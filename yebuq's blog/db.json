{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.2d7529.css","path":"main.2d7529.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.d238ee.js","path":"mobile.d238ee.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.2d7529.js","path":"main.2d7529.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-3/19_222949_9.jpg","path":"img/2017-3/19_222949_9.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-3/19_222949_10.jpg","path":"img/2017-3/19_222949_10.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-2/20170227122128.jpg","path":"img/2017-2/20170227122128.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-2/20170227122206.jpg","path":"img/2017-2/20170227122206.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-2/759734497473095040.jpg","path":"img/2017-2/759734497473095040.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-4/QQ20170406110609.png","path":"img/2017-4/QQ20170406110609.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-4/timg (1).jpg","path":"img/2017-4/timg (1).jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-6/20170601115946.jpg","path":"img/2017-6/20170601115946.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-6/20170601120000.jpg","path":"img/2017-6/20170601120000.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-6/20170601120005.jpg","path":"img/2017-6/20170601120005.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-6/20170601120010.jpg","path":"img/2017-6/20170601120010.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-6/20170601115955.jpg","path":"img/2017-6/20170601115955.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-6/20170601120019.jpg","path":"img/2017-6/20170601120019.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-6/20170601120023.jpg","path":"img/2017-6/20170601120023.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-6/20170601120014.jpg","path":"img/2017-6/20170601120014.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-6/20170601120029.jpg","path":"img/2017-6/20170601120029.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-5/timg.jpg","path":"img/2017-5/timg.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-8/1502117225.jpg","path":"img/2017-8/1502117225.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-8/1502117089.png","path":"img/2017-8/1502117089.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-9/1504526592.jpg","path":"img/2017-9/1504526592.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/icon/26574337464263871.png","path":"img/icon/26574337464263871.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pay/299715691388429949.jpg","path":"img/pay/299715691388429949.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-3/20170301155549.jpg","path":"img/2017-3/20170301155549.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-3/20170301155622.jpg","path":"img/2017-3/20170301155622.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-3/6aa2976egx6CHgSChhS88&690.jpg","path":"img/2017-3/6aa2976egx6CHgSChhS88&690.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-4/timg.jpg","path":"img/2017-4/timg.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-8/161535843694122746.jpg","path":"img/2017-8/161535843694122746.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-8/timg.jpg","path":"img/2017-8/timg.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pay/661513652976287618.jpg","path":"img/pay/661513652976287618.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-3/20150419H5539_KABWt.jpeg","path":"img/2017-3/20150419H5539_KABWt.jpeg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-3/20140609023349143.jpg","path":"img/2017-3/20140609023349143.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-3/20170301120317.jpg","path":"img/2017-3/20170301120317.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-3/e37dbf3ee14747d9c6638edc7ed9ba49.jpg","path":"img/2017-3/e37dbf3ee14747d9c6638edc7ed9ba49.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-3/ChMkJ1cZuBOIHznBAA4UG-1jk7AAAQZcgJZz8cADhQz733.jpg","path":"img/2017-3/ChMkJ1cZuBOIHznBAA4UG-1jk7AAAQZcgJZz8cADhQz733.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-3/ChMkJlcZuB-ILohjABj4B9nSpLsAAQZdAG1MEUAGPgf978.jpg","path":"img/2017-3/ChMkJlcZuB-ILohjABj4B9nSpLsAAQZdAG1MEUAGPgf978.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-4/58842726ce2d2.jpg","path":"img/2017-4/58842726ce2d2.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-3/483580.jpg","path":"img/2017-3/483580.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-6/20170601123154.jpg","path":"img/2017-6/20170601123154.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-8/8634466565743659081.jpg","path":"img/2017-8/8634466565743659081.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-2/775723462023695706.jpg","path":"img/2017-2/775723462023695706.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-8/6043099434676900491.jpg","path":"img/2017-8/6043099434676900491.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-8/7457428889949857221.jpg","path":"img/2017-8/7457428889949857221.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-2/94291181983545482.jpg","path":"img/2017-2/94291181983545482.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-8/895297467916358534.jpg","path":"img/2017-8/895297467916358534.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-3/451551.jpg","path":"img/2017-3/451551.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-3/27480670075741726.jpg","path":"img/2017-3/27480670075741726.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/icon/326255820868179002.png","path":"img/icon/326255820868179002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-9/1504527392.jpg","path":"img/2017-9/1504527392.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/2017-9/timg.jpg","path":"img/2017-9/timg.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.507b3a.css","path":"main.507b3a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.096dc6.js","path":"slider.096dc6.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.507b3a.js","path":"main.507b3a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/icon/20170905144625.jpg","path":"img/icon/20170905144625.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/2017-9/20170928170434.jpg","path":"img/2017-9/20170928170434.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/2017-9/20170928174329.jpg","path":"img/2017-9/20170928174329.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/2017-9/20170928174908.jpg","path":"img/2017-9/20170928174908.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/2017-9/thinking.jpg","path":"img/2017-9/thinking.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/2017-9/20170928191842.jpg","path":"img/2017-9/20170928191842.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"1aab6dce9e12dbf70e9a334f3c15367ccf0e32d0","modified":1490864705719},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1492997967787},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1492997967802},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1492997967802},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1492997967802},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1492997967802},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1492997967802},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1504593674690},{"_id":"themes/yilia/_config.yml","hash":"13be7a424417d06fd99e4837467f27dad03913a0","modified":1504594163864},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1504593674714},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1504593674758},{"_id":"source/_posts/关于vue-reource请求出错的坑.md","hash":"a46ae67651a0c84f2e68b2ff0a16995a0ca5c118","modified":1506598214616},{"_id":"source/_posts/eclipse配置项目可以被跨域访问-Access-Control-Allow-Origin.md","hash":"4bd60792e1fc099b068d5ccc416203d1d6a18a95","modified":1506667175261},{"_id":"source/_posts/hello-world.md","hash":"b1fffb2a7bcae0ed13b0dded2ee685268460a482","modified":1506667175262},{"_id":"source/_posts/关于ajax如何提交照片等file类型的文件.md","hash":"298eb01e92c57f3877959101889550911f8db573","modified":1506667175263},{"_id":"source/_posts/关于构造函数的一点小知识.md","hash":"8f9101de8a07438aedd8ef217eb3b6188590bc11","modified":1506667175266},{"_id":"source/_posts/好久不见.md","hash":"c3acfeebd8c4078073f634746a35ca39ebab8ef6","modified":1506667175273},{"_id":"source/_posts/啦啦啦。。略略略.md","hash":"de134838fdbae73ae92f49fc1f606a1e50ff4fb2","modified":1506667175269},{"_id":"source/_posts/关于页面在谷歌浏览器下可用，在IE11下假死的问题.md","hash":"da75f7c234b453ee11d1739944260d9133af78fe","modified":1506667175268},{"_id":"source/_posts/在node-js下用mongoose简单的操作mongoDB面向文档.md","hash":"752c1688ee0a3e5a397a4eba417412380c4f478f","modified":1506667175271},{"_id":"source/_posts/移动端不同像素比的贴图与边框问题.md","hash":"528f8e9bc579f685b78beadcdac670bf5761e3f1","modified":1506667175277},{"_id":"source/_posts/热烈庆祝耶不q的小窝搭建成功啦.md","hash":"93e9a84e0c0b03cbcdd529615a2cd1857bbb2e6e","modified":1506667175276},{"_id":"source/_posts/手把手教你如何用node-js创建一个聊天室.md","hash":"be9c970daa4b5bff66c460a8a397c91b0f823044","modified":1506667175274},{"_id":"themes/yilia/.git/config","hash":"c478595924669f53c6639490bbb079696b3dd426","modified":1493001113246},{"_id":"themes/yilia/.git/index","hash":"c40194446091f53b5614aeea0345d3365c282b59","modified":1506599602727},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1492997967740},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1492997409446},{"_id":"themes/yilia/.git/packed-refs","hash":"f2c7824806e24eef83ae2f410b72a12d3ed2a00d","modified":1492997967724},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1492997967818},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1492997967818},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1492997967818},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1492997967833},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1492997967833},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1492997967833},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1492997967833},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1492997967912},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1492997967912},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1492997967912},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1492997967912},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1492997967912},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1492997967927},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1492997967912},{"_id":"themes/yilia/source/main.2d7529.css","hash":"2eef112e365f9b00664302ba98b517662c75d411","modified":1487902256000},{"_id":"themes/yilia/source/main.f6a68c.css","hash":"116e8d4922fc5c677b6a6970285f6258b20fe34d","modified":1492997968090},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1492997967927},{"_id":"themes/yilia/source/mobile.40e320.js","hash":"cddc2fb9b2df3eee0c0e9d0cb937f9e54429970d","modified":1492997968105},{"_id":"themes/yilia/source/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1487902256000},{"_id":"themes/yilia/source/slider.885efe.js","hash":"41a76cb10a2b344d54a15ffac68d17331fc6f3d6","modified":1492997968105},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1492997968058},{"_id":"themes/yilia/source/main.2d7529.js","hash":"a0359e7962038f53f9ffbd02dcc52485f8e04da8","modified":1487902256000},{"_id":"themes/yilia/source/main.f6a68c.js","hash":"a0359e7962038f53f9ffbd02dcc52485f8e04da8","modified":1492997968105},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1492997409461},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1492997409446},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1492997409446},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1492997409446},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1492997409446},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1492997409446},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1492997409461},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1492997409461},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1492997409461},{"_id":"themes/yilia/.git/logs/HEAD","hash":"e59c796b7a188249882d803aa034bce468fca3c9","modified":1506599602831},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1492997409461},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1504593674693},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1492997967833},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"b011d92be321ebe09fa2b3179c08aa435b9d051c","modified":1504593674698},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1492997967849},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1492997967849},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1492997967849},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1492997967849},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1504593674695},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1492997967865},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1492997967865},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1492997967865},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1504593674700},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1492997967865},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"c9e369caaf120201b6e52eb467437ec14b20b736","modified":1504593674712},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1492997967896},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1492997967896},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1492997968074},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1492997968074},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1492997968074},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1487902256000},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","hash":"2853b9d8fecd83e26eb032891785afcdaf8b14e2","modified":1492997968074},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1487902256000},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1487902256000},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1492997968074},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1502123042365},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1492997968090},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1487902256000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"db12a6e2e3e683c92be41186091af088fdba17ac","modified":1502123042490},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1492997968090},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1492997967927},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1492997967927},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1492997967927},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1492997967943},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1504593674717},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1492997967943},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1492997967943},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1492997967943},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1504593674719},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1492997967980},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1492997967980},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1492997967980},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1492997967996},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1504593674731},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1492997967996},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1492997968011},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1492997968011},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1492997968011},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1504593674734},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1492997968027},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1492997968011},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1504593674736},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1492997968027},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1492997968027},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1504593674738},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1492997968027},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1504593674743},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1492997968043},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1492997968043},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1492997968043},{"_id":"themes/yilia/source-src/js/fix.js","hash":"9c9f5e38cefcb2196543dce7fa585152238833e7","modified":1504593674741},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1492997968043},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1492997968058},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1492997968058},{"_id":"themes/yilia/source-src/js/slider.js","hash":"707842efee006e3ea9b6765d7460f4ef4f08e41f","modified":1492997968058},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1492997968058},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c1e8f48b6a085ace210eee1838afcbc09e5ee6c2","modified":1504593674746},{"_id":"themes/yilia/.git/objects/pack/pack-112ec025bb463b4e9b4ff0e5d7b4ecf8e93bfbc2.idx","hash":"3d4c719f4d60212cc00c28fdbf4c717906cf5001","modified":1492997967578},{"_id":"themes/yilia/.git/refs/heads/master","hash":"cd214527e8ac0474f07570096fe5e62c923af653","modified":1506599602829},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1504593674702},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1492997967880},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1492997967880},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1492997967880},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1492997967880},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1492997967896},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"cc384aeaed9ffde92efdf192c26db4da3fe5858f","modified":1504593674704},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1504593674708},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1492997967880},{"_id":"themes/yilia/source/img/2017-3/19_222949_9.jpg","hash":"4392ae804951977765bc69ef1643a73cbfbfbf10","modified":1502123040634},{"_id":"themes/yilia/source/img/2017-3/19_222949_10.jpg","hash":"2da300f75893ae4dd98048781dd971f790df4923","modified":1502123040628},{"_id":"themes/yilia/source/img/2017-2/20170227122128.jpg","hash":"4fbfaea240ebf9028429be587b653af0ceafe954","modified":1502123040619},{"_id":"themes/yilia/source/img/2017-2/20170227122206.jpg","hash":"f15bf9bddb20edfec224c2c61f9c6ae296d9c1ef","modified":1502123040616},{"_id":"themes/yilia/source/img/2017-2/759734497473095040.jpg","hash":"dcef3a483f2a85f1a3fcb26c8923f196ce6a2e9f","modified":1502123040622},{"_id":"themes/yilia/source/img/2017-4/QQ20170406110609.png","hash":"4af736f1e4a2cf3054c54eede431cb2e6cffc9cb","modified":1502123041854},{"_id":"themes/yilia/source/img/2017-4/timg (1).jpg","hash":"fdfc0c2ded74b0682356f58d2644e3fd938886f7","modified":1502123041141},{"_id":"themes/yilia/source/img/2017-6/20170601115946.jpg","hash":"0c0299eabeef2dc6e715946f2b6a8fdd21c4f7d3","modified":1502123041217},{"_id":"themes/yilia/source/img/2017-6/20170601120000.jpg","hash":"62c944c790b02b858bd2a4f8dd0e4fbe98036088","modified":1502123041282},{"_id":"themes/yilia/source/img/2017-6/20170601120005.jpg","hash":"ca0880c34384979f1b78de694d8915a4ca23b9e1","modified":1502123041274},{"_id":"themes/yilia/source/img/2017-6/20170601120010.jpg","hash":"f88cc6589309d45812ce1533e11362d23fa42ed7","modified":1502123041300},{"_id":"themes/yilia/source/img/2017-6/20170601115955.jpg","hash":"771d7630517fac9dd45b32683d21a2c569cd0a13","modified":1502123041241},{"_id":"themes/yilia/source/img/2017-6/20170601120019.jpg","hash":"1a741d3ad14d4200aa747c400de84789be080b56","modified":1502123041347},{"_id":"themes/yilia/source/img/2017-6/20170601120023.jpg","hash":"39bd7c59923a1b16725d5b02a1eb44cbcabb78e6","modified":1502123041350},{"_id":"themes/yilia/source/img/2017-6/20170601120014.jpg","hash":"3db9783916d533b0bb127cd6e65be9d20ff3b17f","modified":1502123041324},{"_id":"themes/yilia/source/img/2017-6/20170601120029.jpg","hash":"928e3eaf9c1b86bf27fac2f72b8c0858b9c09ce0","modified":1502123041404},{"_id":"themes/yilia/source/img/2017-5/timg.jpg","hash":"ae89bc6f0238569004a721f0a2b4a23487e7f32f","modified":1502123041173},{"_id":"themes/yilia/source/img/2017-8/1502117225.jpg","hash":"55511e84ee84b522ddb8f31b31da68d48b3c763f","modified":1502123042692},{"_id":"themes/yilia/source/img/2017-8/1502117089.png","hash":"98d543fe8450243ae1ba02f23fdc2af9e7028911","modified":1502123042618},{"_id":"themes/yilia/source/img/2017-9/1504526592.jpg","hash":"8efb21196cf09d14154c6ea36d341b776bf76ae3","modified":1504581213333},{"_id":"themes/yilia/source/img/icon/26574337464263871.png","hash":"c09136539213c367df7f5e51f699c98838db42ea","modified":1502123042960},{"_id":"themes/yilia/source/img/pay/299715691388429949.jpg","hash":"c9bb58ca4813b038506f7216b668135509c91a79","modified":1502123042484},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1492997967960},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1492997967968},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1492997967965},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1492997967962},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1492997967970},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1504593674722},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1504593674729},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1504593674727},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1504593674724},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1492997967996},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1492997967996},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1492997967996},{"_id":"themes/yilia/source/img/2017-3/20170301155549.jpg","hash":"81b2f401ac94081e8adbf96ea01d822aef89d0d6","modified":1502123040806},{"_id":"themes/yilia/source/img/2017-3/20170301155622.jpg","hash":"9a77398478df7b71cdda6dba57237fefabc7bf5f","modified":1502123040841},{"_id":"themes/yilia/source/img/2017-3/6aa2976egx6CHgSChhS88&690.jpg","hash":"cf4b68676aee218f22d2c61c23821bfc7e75dfa2","modified":1502123040901},{"_id":"themes/yilia/source/img/2017-4/timg.jpg","hash":"26f5a40ed2bea4a35ee2cb9582390b7a8d7720c2","modified":1502123041258},{"_id":"themes/yilia/source/img/2017-8/161535843694122746.jpg","hash":"84d1003219a6d684869fe1202124a7c9ede4976e","modified":1502123041558},{"_id":"themes/yilia/source/img/2017-8/timg.jpg","hash":"3ff6be57c83c084778a0ca38aa1eef3919183b4c","modified":1502123042298},{"_id":"themes/yilia/source/img/pay/661513652976287618.jpg","hash":"9dae73dfc4f7c30d8b3f459e6a937f46dd2c5827","modified":1502123042509},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"e59c796b7a188249882d803aa034bce468fca3c9","modified":1506599602830},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1492997967724},{"_id":"themes/yilia/source/img/2017-3/20150419H5539_KABWt.jpeg","hash":"26fe25109c4b18b64be8ee7d92b85ef6e27f521c","modified":1502123040776},{"_id":"themes/yilia/source/img/2017-3/20140609023349143.jpg","hash":"04991990d2f82caf749ce42377c7ca86eeddc41c","modified":1502123040874},{"_id":"themes/yilia/source/img/2017-3/20170301120317.jpg","hash":"594be62699384207794d62082ccf4d07526be4ca","modified":1502123040803},{"_id":"themes/yilia/source/img/2017-3/e37dbf3ee14747d9c6638edc7ed9ba49.jpg","hash":"f954f4d92fc83ea6aacc31dde48b15718ce0f5ea","modified":1502123041091},{"_id":"themes/yilia/source/img/2017-3/ChMkJ1cZuBOIHznBAA4UG-1jk7AAAQZcgJZz8cADhQz733.jpg","hash":"094b4af6938c27f5220601027e78950c3b7883f4","modified":1502123041013},{"_id":"themes/yilia/source/img/2017-3/ChMkJlcZuB-ILohjABj4B9nSpLsAAQZdAG1MEUAGPgf978.jpg","hash":"6e35dd359e6fb25b1722c5dd81b0ca9984268803","modified":1502123041099},{"_id":"themes/yilia/source/img/2017-4/58842726ce2d2.jpg","hash":"6834538a03840b8e66670b33864139b4680095b9","modified":1502123041175},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"3428ea8a7553860146914677070fa6a42673291a","modified":1492997967740},{"_id":"themes/yilia/source/img/2017-3/483580.jpg","hash":"0cebc71c78522c178bcb280084f33f7341913ff1","modified":1502123041024},{"_id":"themes/yilia/source/img/2017-6/20170601123154.jpg","hash":"455f849ef27a0205c39ca42ae2eea01b91a2eb3b","modified":1502123042150},{"_id":"themes/yilia/source/img/2017-8/8634466565743659081.jpg","hash":"94ba9b40ebc66a608a3606c740dd778c7f8cf599","modified":1502123042500},{"_id":"themes/yilia/source/img/2017-2/775723462023695706.jpg","hash":"42cb60b9019e3d19e696fd8b84997aa98132181a","modified":1502123040729},{"_id":"themes/yilia/source/img/2017-8/6043099434676900491.jpg","hash":"d3c18e1d3842f9187aec036e8db329d23b3d1d38","modified":1502123042365},{"_id":"themes/yilia/source/img/2017-8/7457428889949857221.jpg","hash":"78eed24ff4a164367470ef7cfb800d922c15ae73","modified":1502123042371},{"_id":"themes/yilia/source/img/2017-2/94291181983545482.jpg","hash":"aa9ba3e2e0f7eb5ba73c9748148e1b9c3c884057","modified":1502123041026},{"_id":"themes/yilia/source/img/2017-8/895297467916358534.jpg","hash":"3e875c4f12f86103f20588895eda05395720edc0","modified":1502123042383},{"_id":"themes/yilia/source/img/2017-3/451551.jpg","hash":"6aeb8e5745eb21a1f93b70a3b4f12654cfc5dd1b","modified":1502123041244},{"_id":"themes/yilia/source/img/2017-3/27480670075741726.jpg","hash":"493b735186b6bc7f0fd8d15e2763b363b5f9ea93","modified":1502123042152},{"_id":"themes/yilia/source/img/icon/326255820868179002.png","hash":"83167b0af132f4a0c1508d28e4020a521524ea13","modified":1502123064580},{"_id":"themes/yilia/.git/objects/pack/pack-112ec025bb463b4e9b4ff0e5d7b4ecf8e93bfbc2.pack","hash":"44f5cc6c8824d86c893d25c5100904675e7ebbd9","modified":1492997967586},{"_id":"themes/yilia/source/img/2017-9/1504527392.jpg","hash":"4e01a1d0bae852bf2d8ce2688817f55a17d96e6b","modified":1504581213214},{"_id":"themes/yilia/source/img/2017-9/timg.jpg","hash":"d182a1af821553ab6ad810f6e57d00aa78c9b844","modified":1504581212936},{"_id":"public/content.json","hash":"5c06cdc16d6edcd6a7bf3d3224a142933f63bd49","modified":1504581272566},{"_id":"public/2017/08/07/好久不见/index.html","hash":"121a33735292e2d592c1562f4438bbb28068da36","modified":1504594216527},{"_id":"public/2017/06/01/移动端不同像素比的贴图与边框问题/index.html","hash":"d87d8a0802453250d4eaa06f72baf4df47bd2c52","modified":1504594216529},{"_id":"public/2017/05/02/在node-js下用mongoose简单的操作mongoDB面向文档/index.html","hash":"01609d3cd6b6ef7ba4ee49098a4d2ff83028200d","modified":1504594216529},{"_id":"public/2017/04/06/手把手教你如何用node-js创建一个聊天室/index.html","hash":"3141dce5e6b7d8d71f2330a4738e9ef07563e557","modified":1504594216530},{"_id":"public/2017/03/29/关于ajax如何提交照片等file类型的文件/index.html","hash":"4252bf5fd6f67c99e15161d9b1e164052c2a69f5","modified":1504594216530},{"_id":"public/2017/04/18/关于构造函数的一点小知识/index.html","hash":"e40a16f4f1e60f6b3b80e9c4778d1c035822ef4a","modified":1504594216529},{"_id":"public/2017/03/08/啦啦啦。。略略略/index.html","hash":"f4095c594d963d9a4029a5c0cf09329f0112ec51","modified":1504594216530},{"_id":"public/2017/03/01/eclipse配置项目可以被跨域访问-Access-Control-Allow-Origin/index.html","hash":"5e281d2b3d50e9128036d94161bf5efa76e0c3a4","modified":1504594216530},{"_id":"public/2017/02/27/关于页面在谷歌浏览器下可用，在IE11下假死的问题/index.html","hash":"2ca3dfbfcaed6a2db00c2f214b2a18e054d7644d","modified":1504594216530},{"_id":"public/archives/index.html","hash":"27b9e027023fde152e05fce20278281982166bd9","modified":1504594216531},{"_id":"public/2017/02/24/热烈庆祝耶不q的小窝搭建成功啦/index.html","hash":"1582c3bf40189c640cd6d58da4fbc78b70d8a72f","modified":1504594216530},{"_id":"public/archives/2017/index.html","hash":"c7a14727841e6a69a4f191068a4d103f631f562c","modified":1504594216531},{"_id":"public/archives/page/2/index.html","hash":"d8f40c39545ef0df19bcaf539eb01653de737a96","modified":1504594216531},{"_id":"public/archives/2017/page/2/index.html","hash":"e9390c5ac43509182574a84da2842f8c48d27538","modified":1504594216531},{"_id":"public/2017/02/22/hello-world/index.html","hash":"5132a90aaeaf8615c72f1e60eac0f11c9421f0f7","modified":1504594216530},{"_id":"public/archives/2017/02/index.html","hash":"15158306373c07263ae0d1b34804c367545708b7","modified":1504594216531},{"_id":"public/archives/2017/03/index.html","hash":"f1af9fea84703f1abdf4c301f59a8179917b5a6a","modified":1504594216531},{"_id":"public/archives/2017/04/index.html","hash":"87c26bbd27c67589bfed45a3ea8a26c50dabf8f5","modified":1504594216531},{"_id":"public/archives/2017/05/index.html","hash":"a2f73ce9d93901909593f3dcf50820ba84763acc","modified":1504594216531},{"_id":"public/archives/2017/08/index.html","hash":"8b3f4a61327fa5c7668a92912928e01a6d71f7b3","modified":1504594216532},{"_id":"public/categories/开发/index.html","hash":"c3a5a5bc83f56c559ff6122dd7d46eddb6b25893","modified":1504594216535},{"_id":"public/categories/生活/index.html","hash":"e2d584bf63565e02cd850bb41ac28100f936e289","modified":1504594216535},{"_id":"public/archives/2017/06/index.html","hash":"953fff5d3e07fdf1305fde7c295bdb0782fa5ed8","modified":1504594216532},{"_id":"public/categories/开发/二级目录/index.html","hash":"e2db81c53cbf56576e67581f6943c675b25778e1","modified":1504594216535},{"_id":"public/categories/日志/index.html","hash":"b6fa3d326f92c31791904f91445a4a75658b14a5","modified":1504594216542},{"_id":"public/index.html","hash":"1c7126179725fb7bc4b2c9238ed7092acb248b83","modified":1504594216532},{"_id":"public/page/2/index.html","hash":"9a71de09cb5171f77c8eb3d2e35561906f73b3e2","modified":1504594216532},{"_id":"public/tags/eclipse/index.html","hash":"fcde99c975f34b87eb9fc6051dcd346e85212e2c","modified":1504594216532},{"_id":"public/tags/前端/index.html","hash":"622bb76acc7ded8a5fcf2c2f4e5e09beb9ea3bac","modified":1504594216532},{"_id":"public/tags/js/index.html","hash":"54cd65cef4f8329bab32838c8acd791198c9bd67","modified":1504594216533},{"_id":"public/tags/构造函数/index.html","hash":"b797c565f7d810ffc748d7d347038e613cad8089","modified":1504594216533},{"_id":"public/tags/跨域/index.html","hash":"0269d1ea61dbdc2f47388b6d5d4eee413a92078b","modified":1504594216532},{"_id":"public/tags/日常/index.html","hash":"9748dabfa9ad139968abfad3eeeb84e16fcb3ec7","modified":1504594216533},{"_id":"public/tags/生活/index.html","hash":"ec893d68de9b9c0ece6a786a869427043a969841","modified":1504594216533},{"_id":"public/tags/啦啦啦/index.html","hash":"8f5e35a2c5e4de48f4c4d81b8007e6d787024f59","modified":1504594216533},{"_id":"public/tags/兼容/index.html","hash":"1732dc8cfa56b3605b28484e16e3fd1ee0804dab","modified":1504594216534},{"_id":"public/tags/文件上传/index.html","hash":"57e1647ef777063162e751f781fd41dbd110cd93","modified":1504594216534},{"_id":"public/tags/ajax/index.html","hash":"65b50fab42f91ea78e00eba95969c5b26c3e67a8","modified":1504594216534},{"_id":"public/tags/mongoDB/index.html","hash":"08013f9bc733c8e5521e9abd54e7b48ef0f6502f","modified":1504594216534},{"_id":"public/tags/node-js/index.html","hash":"afa58d93c0228b591372bad8a7e0041bcb0cdf21","modified":1504594216534},{"_id":"public/tags/开篇之作/index.html","hash":"7364547641f3db52dd2bb7b1aca0a3b792aa0719","modified":1504594216534},{"_id":"public/tags/移动端/index.html","hash":"b18a2026957e12b897ff49ad34b5a084ed18a211","modified":1504594216534},{"_id":"public/tags/聊天室/index.html","hash":"3aa494fdf03a305e7c5d6c5ceaf15f8033fd2949","modified":1504594216535},{"_id":"public/tags/css/index.html","hash":"4cea31d8c0e69d5b931711d0e28972a16874e968","modified":1504594216534},{"_id":"public/2017/09/04/关于vue-reource请求出错的坑/index.html","hash":"3f7f24b33d772874c478efc314b202b04c47a632","modified":1504594216520},{"_id":"public/archives/2017/09/index.html","hash":"c49f434a635175cd0ad092e9319c5247e97e0dbf","modified":1504594216532},{"_id":"public/tags/vue/index.html","hash":"1845faa8a1885d549b3d5135a4587ad8c9275ebe","modified":1504594216533},{"_id":"public/tags/vue-resource/index.html","hash":"49c9712bc30aa4ae78ea6c7f84c76ca2b14d39cd","modified":1504594216533},{"_id":"public/tags/小心情/index.html","hash":"a77e9758b85e047967cd7a66e24be488647eb471","modified":1504594216533},{"_id":"public/img/2017-9/1504526592.jpg","hash":"8efb21196cf09d14154c6ea36d341b776bf76ae3","modified":1504581273046},{"_id":"public/img/2017-9/1504527392.jpg","hash":"4e01a1d0bae852bf2d8ce2688817f55a17d96e6b","modified":1504581273049},{"_id":"public/img/2017-9/timg.jpg","hash":"d182a1af821553ab6ad810f6e57d00aa78c9b844","modified":1504581273049},{"_id":"themes/yilia/.git/FETCH_HEAD","hash":"1bb4b4e84ba5e6b7c5e6c306e351d110c9d80cb8","modified":1504593674211},{"_id":"themes/yilia/.git/ORIG_HEAD","hash":"f25c7071eabad44abcb3a813a2b8d9d56fbee9cf","modified":1504583785597},{"_id":"themes/yilia/source/main.507b3a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1504593674751},{"_id":"themes/yilia/source/slider.096dc6.js","hash":"25e34d09ead8cabd34d777997c4b1f073918f6cf","modified":1504593674756},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504593674712},{"_id":"themes/yilia/source/main.507b3a.js","hash":"42f38b932426a0bd24a41343a75f8517ca00e8eb","modified":1504593674753},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1504593674754},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1504593674696},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1504593674747},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1504593674748},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1504593674748},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1504593674750},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1504593674715},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1504593674739},{"_id":"themes/yilia/.git/objects/3f/0c925158b3486ff53d74e1c18197e149dfa928","hash":"56360958bfdd7dd4bbb38aeae9304dc7f7ef31ca","modified":1504593531112},{"_id":"themes/yilia/.git/objects/pack/pack-6f708d13791706b17848124aeeefb673c7da72d0.idx","hash":"1da1766ff52ea49c92ff8ebbc512f61744218531","modified":1504583785011},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1504593674705},{"_id":"themes/yilia/.git/refs/remotes/origin/master","hash":"34a7012f5980a4ff6f796864557914f782b4f659","modified":1504583785071},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/master","hash":"6dfffbe703050f32e58f2aa62af5d29d1df7020c","modified":1504583785086},{"_id":"themes/yilia/.git/objects/pack/pack-6f708d13791706b17848124aeeefb673c7da72d0.pack","hash":"defc785045e6403e1e160f3d4db83970e3dc6d7e","modified":1504583785006},{"_id":"themes/yilia/source/img/icon/20170905144625.jpg","hash":"4fde98bf833ed2476dda2fb2e4d79e962651d539","modified":1506599039084},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1504594216546},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1504594216546},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1504594216546},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1504594216546},{"_id":"public/img/icon/20170905144625.jpg","hash":"c136458dac1c63b637b307615ee752f45bb891dc","modified":1504594216546},{"_id":"public/main.507b3a.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1504594216599},{"_id":"public/main.507b3a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1504594216599},{"_id":"public/slider.096dc6.js","hash":"a8b66ef85d96616086ea6256e7288d0b5a2df56d","modified":1504594216599},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1504594216599},{"_id":"source/_posts/分享一个H5与app交互获取分享成功回调的案例.md","hash":"928ce8ff0f8771388f33169db0edf8ae3d3222b9","modified":1506598182292},{"_id":"themes/yilia/.git/COMMIT_EDITMSG","hash":"d60998a06385f8ecbfd1c2cd947ea3373f593b8d","modified":1506599602809},{"_id":"themes/yilia/.git/objects/01/59d82b267123fddd5a32623d06a4948bb557e0","hash":"9cdaaa62c6073466f36d531a2cc81df0abb0e468","modified":1504594514000},{"_id":"themes/yilia/.git/objects/05/8d13c4bc8e7891ab435ee6216714f1c26b693f","hash":"dca1102fecee79f141f6c0a415d5de24c8ed1454","modified":1504594512000},{"_id":"themes/yilia/.git/objects/04/5c04e2580c7ba37d7904b43b64f4ffc0624743","hash":"fb30ffc80d45a5bad214fea2eee8fca0ec06e729","modified":1504594514000},{"_id":"themes/yilia/.git/objects/0a/86b564f5eb398f707e8caa7232b152941b03e2","hash":"4fd65df9c070822256b7911923994560d577d78a","modified":1506599602726},{"_id":"themes/yilia/.git/objects/0b/a728032ab7fc575f65eb21e8d4b0d6605b5c4d","hash":"bc596c80eac9d15899549c5d379e1df9ba2ed725","modified":1504594512000},{"_id":"themes/yilia/.git/objects/0c/6a7bc4eb57b4036a804204a1c9e933275e9f1e","hash":"f32e255e68954933e65bd8b7384393a32f43d123","modified":1504594514000},{"_id":"themes/yilia/.git/objects/19/013864124c6a8c6c94f82311f68cdaa0f666fa","hash":"a98f4006e51c99b8ae87179ca5e49fba6911024e","modified":1506599602665},{"_id":"themes/yilia/.git/objects/0e/8003ff75d02e27b46170db80f8f34a7f650231","hash":"6ce6f34ebc50f792900f503fa40dce3753df7a22","modified":1504594512000},{"_id":"themes/yilia/.git/objects/1b/c809c334e48adc389a8abff188a4e9087325fc","hash":"c2d615258c3f86dcab3ce266f8b24eee4f60cafe","modified":1504594512000},{"_id":"themes/yilia/.git/objects/1d/af1ced19a45bff1f88eb954cb549ab46c464f3","hash":"41a2308f8eb91b9cbf83b660eb0375ee209874c6","modified":1506599602670},{"_id":"themes/yilia/.git/objects/1f/a86bc9f0c8c92eed78ac98791212b1610b7a93","hash":"2cf650cb2a8962d4e1b8f8c98151e718dbf8b2f8","modified":1504594514000},{"_id":"themes/yilia/.git/objects/26/1da98a5d0e1ca7d57774d82aec12ab695796ac","hash":"ef741c73715b53d31248744716b54937c5b3b200","modified":1506599602698},{"_id":"themes/yilia/.git/objects/29/d34e08b8757844f424a561f6a3e0ba3434f090","hash":"a56f70ed8686a1d01d521400fad8bccb49cd00d6","modified":1504594512000},{"_id":"themes/yilia/.git/objects/33/7950cd57718126d971eadb5fdaa003c0ce83e3","hash":"f90d0e7f8dcc3cc1947c290013abffc8f88e02a1","modified":1504594514000},{"_id":"themes/yilia/.git/objects/40/ddab147b067a5f0c7dcef798d57faef85aa589","hash":"65fb5c2ca2b33bb2db7bfb4368d60251d2ca67a9","modified":1504594512000},{"_id":"themes/yilia/.git/objects/44/50ce6027d217477a38827488695b9abbd167fe","hash":"f3fdc3202f0c1291ceda16451490ab532d7539a5","modified":1504594512000},{"_id":"themes/yilia/.git/objects/47/d79844e36a3652c8e0a54b35a3080ee289fd79","hash":"1698bb190f1a148b74cdc06fb0a002d57fd870b9","modified":1504594512000},{"_id":"themes/yilia/.git/objects/4d/3f5aaab2c79b61e2da16d6d28e0e4a06867d48","hash":"335eedff8a0a5fc2f577ade74ae3d03ee5168a73","modified":1504594514000},{"_id":"themes/yilia/.git/objects/4d/9e899ea518f3db00978adc881413a1cd11320a","hash":"147cc7e2bc6face7b91565d86e36e948d30f176f","modified":1504594512000},{"_id":"themes/yilia/.git/objects/4f/a5d194e7285248a031a9b049956bea7928c7c1","hash":"f2307003f64bcfec4324032eda44af4f31969567","modified":1504594514000},{"_id":"themes/yilia/.git/objects/54/aa8ad5cfc113e9d8a3d822a9bf64ac8f7a2ea6","hash":"ad71cb4e9da78d6de35f15dad43f49811013bc66","modified":1506599602816},{"_id":"themes/yilia/.git/objects/65/29db1ea99c87b5c8011c891ef6e349301830f1","hash":"bc24b023f0659bd98dd1c6a93086fd152444ff3e","modified":1504594514000},{"_id":"themes/yilia/.git/objects/66/7f85033bc29588020a9fcddbcdf6c395cf30b2","hash":"bdb843450ae1976e06fea3572d4e133bf70e1b70","modified":1504594512000},{"_id":"themes/yilia/.git/objects/6b/29eb7f39fb153f16cef4fa9b66bddab7f3b06e","hash":"a2d7854c3724b17c5b19cdd21772857df678b72f","modified":1504594512000},{"_id":"themes/yilia/.git/objects/6b/cdbe277b5207f4f4d97ea0d57db2b3fb7d28b6","hash":"ac79293c142242adb530fab158f5aa44073580fe","modified":1506599602813},{"_id":"themes/yilia/.git/objects/6e/69a450b681d81e45dfb0f859ebb619f51b163a","hash":"930ca56ccf1537e6ba71d8673b3ab8d37e134557","modified":1504594512000},{"_id":"themes/yilia/.git/objects/76/be482a4fc0149798ad4da246ca35fa9cc65186","hash":"6c77259e3f444eed5777d983f0322d2694ffa08c","modified":1504594512000},{"_id":"themes/yilia/.git/objects/7d/ad2ffcbf635fc6413aaa3618cb13d8c7b6ed79","hash":"2177fdb3805dabcd793d4d1d43c91e37dc6b8aef","modified":1504594514000},{"_id":"themes/yilia/.git/objects/81/679bee6f33242005efb5c1f280ceccbc96f072","hash":"12965ea889bb9a737fc177926d2e0afeafb09727","modified":1506599602821},{"_id":"themes/yilia/.git/objects/88/ede2f7f5a19d52575a7135865bd6fb70316d25","hash":"df089dd2309a25bb0a0e444b9082bf57a7f78e38","modified":1504594512000},{"_id":"themes/yilia/.git/objects/8d/6f8af6a15907bd9b6ec37cafbdb4699f497360","hash":"feb4fa0df35947539236678aed98500b280dec31","modified":1504594512000},{"_id":"themes/yilia/.git/objects/a8/d8f456ae84c05814f4e1eaea0e51536e4b73bd","hash":"e2497e9a70788d4ded9172fde6f5ab562b2766ab","modified":1504594512000},{"_id":"themes/yilia/.git/objects/b3/641c5b613384bf371edb64d891e59d0536d6e0","hash":"bacb4ead0a39d0755b2ac8d248d043624dc63810","modified":1504594512000},{"_id":"themes/yilia/.git/objects/b9/3faa1e577d9757ad98f6800053effedffa2785","hash":"2227b71712384413804677b8e91d0c427121f208","modified":1504594512000},{"_id":"themes/yilia/.git/objects/bf/5b7275aeea4ee675374f122b7a59437357aa2c","hash":"25b9caab370e2d6a6480948d45e59c20504a4a9c","modified":1504594514000},{"_id":"themes/yilia/.git/objects/bf/e5484f67f408a8cb81cf24b8a99dea96222233","hash":"00a68735cbdf0a5c32c9c107084820ffec3124d4","modified":1504594512000},{"_id":"themes/yilia/.git/objects/c7/8ba074348c4ab2f63d072f64ccb6f6bc763b14","hash":"3c0b380cc1110286b549ea588f1ea6d69eb13a2a","modified":1504594514000},{"_id":"themes/yilia/.git/objects/cb/0731d97d0e4dbc974e94d1cf92a2d85b1733f0","hash":"0dc82615ae2d743b6c643e35bfdac85f04a182cf","modified":1504594512000},{"_id":"themes/yilia/.git/objects/ce/0b7763a1ef4b37b193597e64984155cd408846","hash":"ec073a1fcc08d51c3614a84d302d8a31f7e5f165","modified":1506599602818},{"_id":"themes/yilia/.git/objects/d0/4823681ee7f5d266fed3a1f4d9779ea56f227c","hash":"828b9ff059e08d1ad3f34d1c27115509e805fd6a","modified":1504594514000},{"_id":"themes/yilia/.git/objects/d6/866f146559c5ce9d024f5ae965474b24e5a30e","hash":"54d39f7f8e8ff9a76c1ea9b6ceaeb986de0793bd","modified":1504594512000},{"_id":"themes/yilia/.git/objects/d8/e9fdb799083e573515d759488c16f9ec668c3c","hash":"2f68c740f62a4bc1e51d7196cd1adaa22a5b16f8","modified":1504594512000},{"_id":"themes/yilia/.git/objects/df/8845bfc977bc7a59b91e517f7eefa22266a70e","hash":"aac8430499bd91876f8e64965bb0009e029fcc0a","modified":1504594512000},{"_id":"themes/yilia/.git/objects/df/d5df6f5f4747194699d395acc6ddaf34e96e21","hash":"bf3e487d9d21d4f760478d3aadbce887bccceb4f","modified":1506599602826},{"_id":"themes/yilia/.git/objects/e2/5f300b6b840e47385ec943bae6b765104fe2b9","hash":"ffff24adbd3cfe0ea8f3c04c15d442da533ef0c7","modified":1506599602823},{"_id":"themes/yilia/.git/objects/e3/d382349b48cfd12137ad16e1fbb569307e11b7","hash":"42884930e1f70b720fab9b2268ce834ff23d2925","modified":1504594512000},{"_id":"themes/yilia/.git/objects/e5/fe95568ff4c07ff5fcd55c3a71f4967eccc413","hash":"6c2163a4e88e60afcb2fdfad6d1796b17b115f16","modified":1504594514000},{"_id":"themes/yilia/.git/objects/e7/1bec27e7c7273f98f25fe070acc12035749113","hash":"c3880a33b327211e23db5fcd60b8bd1c22e4699d","modified":1504594512000},{"_id":"themes/yilia/.git/objects/e8/ef1c379807b0a3589ad3c6429ced83cced8038","hash":"e202f5e20c2f28d8dac53e2b89753483f08fcb1c","modified":1504594512000},{"_id":"themes/yilia/.git/objects/f6/3820f826affdae17bd9320d51cdee8549ec34b","hash":"860f3a7c894a7d0374e3353829ace4dc22283236","modified":1504594512000},{"_id":"themes/yilia/.git/objects/f6/a974d326d494749fd6aad6803bf31ca5b4b501","hash":"cc7cd40b24b8814c0cf29bbf7e5bb6ebcb666c05","modified":1504594512000},{"_id":"themes/yilia/.git/objects/f9/99f4d2cec4078475af35d2d82744877da221d3","hash":"39287e223f9fcdf63ead044bfe862c0c7b5ed274","modified":1504594514000},{"_id":"themes/yilia/.git/objects/fd/c70751e75eecd3f886de524e00046c56fcdb44","hash":"6f4484da6f5ec487d03853f2757c73a74d2bedaa","modified":1506599602674},{"_id":"themes/yilia/source/img/2017-9/20170928170434.jpg","hash":"55022e56fa2e17e9b1973f6558e1675e227e8b98","modified":1506599038870},{"_id":"themes/yilia/source/img/2017-9/20170928174329.jpg","hash":"e17890f2fa766f916a877eb0fca16f6bf1204634","modified":1506599038740},{"_id":"themes/yilia/source/img/2017-9/20170928174908.jpg","hash":"dd03649b9dd0f61fd7c9b33774b972294ee01f32","modified":1506599038777},{"_id":"themes/yilia/source/img/2017-9/thinking.jpg","hash":"fa5e072b14969087d5edde981d9f26193b8e8d83","modified":1506599038941},{"_id":"themes/yilia/.git/objects/2b/c3be329bc3c68b804e2652571afd5267c7c298","hash":"f68b52b61e5224eb835c1983150d79e4fa8c71b1","modified":1504594512000},{"_id":"themes/yilia/.git/objects/56/72ee06e186a0de89973ecb31fdda45a7ebd89e","hash":"221155e617cb7e2c1002e179c60bec264c9e0424","modified":1504594512000},{"_id":"themes/yilia/.git/objects/6f/eb836b7943eccb5e8893f570d5ca837e32fb8a","hash":"03b0427083dc8fb274355f4b1cabceb864111cd5","modified":1504594512000},{"_id":"themes/yilia/.git/objects/c1/a5f4f21372f5d6e96d7925ec27b7bb80ab0bd4","hash":"a5590a218715cb109eb87ad129af4c65e1fc6e04","modified":1504594512000},{"_id":"themes/yilia/.git/objects/ce/c71609165fdfadb39249536a0e082c88812436","hash":"4d4154120e020056ca6a354ea1406194dddc0f54","modified":1504594512000},{"_id":"themes/yilia/.git/objects/d7/c93ac98db215398dc31561de09b0531379dc10","hash":"6b20d7ab42c659f5f88f8c61ff4fff3684d74130","modified":1504594512000},{"_id":"themes/yilia/.git/objects/f5/4335509db11dd7cc66382e7eb7d60bdcb3a85b","hash":"e1cfa3655bc3d710834e343fa37573da53904fa6","modified":1504594512000},{"_id":"themes/yilia/.git/objects/0b/28a486caf9c8c5b5f25a0926e8edf07c1cd311","hash":"6f83cfd60d850c1e533246b9ee23d8e096e468af","modified":1504594512000},{"_id":"themes/yilia/.git/objects/32/a57a8bc7574ad6d4c8450ea2603db82a1a11d0","hash":"4871c1c2619cb049279508a1389d4435d45c3794","modified":1504594512000},{"_id":"themes/yilia/.git/objects/42/59e2c1c4b3b22af55f726776876ee681499d07","hash":"6e216716a6dda2f1006beb147682ccda9b284dbe","modified":1504594512000},{"_id":"themes/yilia/.git/objects/b6/d3d3b66a3598427143a44a6726c8b92528f1a8","hash":"bd1a2490b39a6ef26a056e1319662e09ffcc0822","modified":1504594512000},{"_id":"themes/yilia/.git/objects/84/eb31fed1d4b619c6fa8a51bac2b5ae1be36568","hash":"4336e0d96231f4c30b00c43d161eff3382fbc9cc","modified":1504594512000},{"_id":"themes/yilia/.git/objects/f0/e8a4d6796a927fb1f5c14b8143db67ac2f34a2","hash":"b139205bae4a7f2cbfdf396ab743592cf00a73f4","modified":1504594512000},{"_id":"themes/yilia/.git/objects/2e/91f7f18f9568c138795c1c4f7f8aa49673b730","hash":"85b79c1eaf1bdfe1ed616ae56838b702d0d96025","modified":1504594512000},{"_id":"themes/yilia/.git/objects/9f/445f20fb4c3e30d66c348f72e3b7288dd70107","hash":"cb171a4613b3435bde03d6af84df632ce4822f0a","modified":1506599602693},{"_id":"themes/yilia/.git/objects/a2/f4a4bc5b921eda25fcc32317660191ef58dd2e","hash":"6769a305c587b73a7da4fd586d118644b65ad443","modified":1504594512000},{"_id":"themes/yilia/.git/objects/b7/9039982091d43f50ff7cdd078a3a3cc451ca9a","hash":"735f9a6ec909bdfffd0f5ba4654f46020b6ca16f","modified":1504594512000},{"_id":"themes/yilia/source/img/2017-9/20170928191842.jpg","hash":"8041f0289133f739847373fc67b551c1aaf0ac8f","modified":1506599257176},{"_id":"themes/yilia/.git/objects/65/702aba3240f1647ec9a2e3010cac0f14d25199","hash":"5e92851cb0eb86732e30ff242e6a229d2fbe170a","modified":1504594512000},{"_id":"themes/yilia/.git/objects/72/da06c7afa277999357a29dd20229f609ce254f","hash":"794c38cbfdcf22ce8b5d61ce749530fa30db8091","modified":1504594512000},{"_id":"themes/yilia/.git/objects/81/cb13e2518257905c4e0bd7376fdcc68d2b4067","hash":"f9ead5e3be852cc095b1d66c8ba0a9b73fc256e2","modified":1504594512000},{"_id":"themes/yilia/.git/objects/b2/381bd55e9516aca65aba9d2cff8b91dd57b0b1","hash":"b623e6686cae96cecd36a4f7431db4ef4cacb2f2","modified":1504594512000},{"_id":"themes/yilia/.git/objects/bc/e1fb76d73d4ef9b88e63e6b6ed7f8724254ef5","hash":"dd8d432663096dc608bdc8ecb2f8d33f7fa37770","modified":1504594512000},{"_id":"themes/yilia/.git/objects/43/a03dd41e5927135b1aa7c334cd6c2e570fa8d6","hash":"515a5a66e7bd5d8f43aceb5c66647d51501f7251","modified":1504594512000},{"_id":"themes/yilia/.git/objects/db/24dca9e710b56c06ef13d519af740f5d057970","hash":"51a021fe0e0b21457b9ce3763ed9af92f34a65cf","modified":1504594512000},{"_id":"themes/yilia/.git/objects/6e/57edcfe0afb7e8b4c1f69c53e806539511fa4c","hash":"b936dbb7c920255ef58561fcaa91ba878deb4c67","modified":1504594512000}],"Category":[{"name":"开发","_id":"cj764c8ld0002w0d0gqi0vbwf"},{"name":"生活","_id":"cj764c8lw000cw0d0t68dsy6r"},{"name":"二级目录","parent":"cj764c8ld0002w0d0gqi0vbwf","_id":"cj764c8mb000ow0d0iilmkqwl"},{"name":"日志","_id":"cj764c8mi000vw0d00rzutsxq"}],"Data":[],"Page":[],"Post":[{"title":"eclipse配置项目可以被跨域访问:Access-Control-Allow-Origin:*","date":"2017-03-01T02:20:39.000Z","_content":"摘要:\n    　　这篇文章旨在分享一下eclipse如何配置项目可以被跨域访问到。因为网上看了很多，坑也踩了不少，而且身为一个前端的小白，有些地方忽略的我一头雾水有木有= =，所以我会图本并茂的讲解一下，大神请忽略= =\n\n<div align=center>\n<img src=\"../../../../img/2017-3/19_222949_9.jpg\" width=\"500\" height=\"500\" />\n</div>\n<!-- more -->\n正文:\n　　这篇文章旨在分享一下eclipse如何配置项目可以被跨域访问到。因为网上看了很多，坑也踩了不少，而且身为一个前端的小白，有些地方忽略的我一头雾水有木有= =，所以我会图本并茂的讲解一下，大神请忽略= =\n　　百度到的方法大多是教给我们利用cors，或者是在java里新建一个filter类，然后配置web.xml配置里新加一堆标签，可是我想说身为一个小白的我，表示怎么创建这个类，在哪创建都不知道啊。。后来研究了半天，又百度了不少，才算是弄明白一整套流程，也是最简单的方法：\n\n　　1.编写拦截器代码，在项目目录下src/default package/下新建一个类CrossOriginFilter，实现Filter接口，代码如下：\n```\n\npackage org.digdata.swustoj.filter;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n *\n * @author wwhhf\n * @since 2016年5月30日\n * @comment 跨域过滤器\n */\npublic class CrossOriginFilter implements Filter {\n\n    private FilterConfig config = null;\n\n    @Override\n    public void init(FilterConfig config) throws ServletException {\n        this.config = config;\n    }\n\n    @Override\n    public void destroy() {\n        this.config = null;\n    }\n\n    /**\n     *\n     * @author wwhhf\n     * @since 2016/5/30\n     * @comment 跨域的设置\n     */\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response,\n            FilterChain chain) throws IOException, ServletException {\n        HttpServletResponse httpResponse = (HttpServletResponse) response;\n        // 表明它允许\"http://xxx\"发起跨域请求\n        httpResponse.setHeader(\"Access-Control-Allow-Origin\",\n                config.getInitParameter(\"AccessControlAllowOrigin\"));\n        // 表明在xxx秒内，不需要再发送预检验请求，可以缓存该结果\n        httpResponse.setHeader(\"Access-Control-Allow-Methods\",\n                config.getInitParameter(\"AccessControlAllowMethods\"));\n        // 表明它允许xxx的外域请求\n        httpResponse.setHeader(\"Access-Control-Max-Age\",\n                config.getInitParameter(\"AccessControlMaxAge\"));\n        // 表明它允许跨域请求包含xxx头\n        httpResponse.setHeader(\"Access-Control-Allow-Headers\",\n                config.getInitParameter(\"AccessControlAllowHeaders\"));\n        chain.doFilter(request, response);\n    }\n\n}\n```\n　　2.WEB-INF/lib下找到web.xml，添加如下代码（有的人项目下会没有自动生成web.xml这个文件，请参考[http://jingyan.baidu.com/article/90808022c495d9fd91c80f15.html](http://jingyan.baidu.com/article/90808022c495d9fd91c80f15.html)）:\n```\n<filter>\n        <filter-name>CrossOrigin</filter-name>\n        <filter-class>org.digdata.swustoj.filter.CrossOriginFilter</filter-class>\n         <init-param>\n            <param-name>AccessControlAllowOrigin</param-name>\n            <param-value>http://localhost:63342</param-value>//这个value是要换成你的请求网址，如果是*为可以被所有网址跨域请求\n        </init-param>\n        <init-param>\n            <param-name>AccessControlAllowMethods</param-name>\n            <param-value>POST, GET, DELETE, PUT</param-value>\n        </init-param>\n        <init-param>\n            <param-name>AccessControlMaxAge</param-name>\n            <param-value>3628800</param-value>\n        </init-param>\n        <init-param>\n            <param-name>AccessControlAllowHeaders</param-name>\n            <param-value>x-requested-with</param-value>\n        </init-param>\n    </filter>\n    <filter-mapping>\n        <filter-name>CrossOrigin</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n```\n　　3.就可以在WebContent目录下新建一个jsp页面，用来测试页面是否可以被跨域请求，jsp代码如下：\n```\n<%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n    pageEncoding=\"ISO-8859-1\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<title>Insert title here</title>\n</head>\n<body>\n\t<h1>tomcat 2.0</h1>\n</body>\n<html>\n```\n<div align=center>\n<img src=\"../../../../img/2017-3/20170301120317.jpg\" width=\"800\" height=\"400\" />\n</div>\n\n　　4.简单说一下跨域测试，用google浏览器就可以测试了，因为谷歌浏览器默认用ajax或者iframe加载本地文件也是跨域请求。所以你现在eclipse里面把这个页面项目在server里跑起来，就新建一个页面用ajax加载跑起来之后的网址，如果是就成功咯o(^-^)o\n<div align=center>\n<img src=\"../../../../img/2017-3/20170301155549.jpg\" width=\"800\" height=\"400\" />\n</div>\n<div align=center>\n<img src=\"../../../../img/2017-3/20170301155622.jpg\" width=\"800\" height=\"400\" />\n</div>\n","source":"_posts/eclipse配置项目可以被跨域访问-Access-Control-Allow-Origin.md","raw":"---\ntitle: 'eclipse配置项目可以被跨域访问:Access-Control-Allow-Origin:*'\ndate: 2017-03-01 10:20:39\ncategories:\n  - 开发\ntags:\n    - 前端\n    - eclipse\n    - 跨域\n---\n摘要:\n    　　这篇文章旨在分享一下eclipse如何配置项目可以被跨域访问到。因为网上看了很多，坑也踩了不少，而且身为一个前端的小白，有些地方忽略的我一头雾水有木有= =，所以我会图本并茂的讲解一下，大神请忽略= =\n\n<div align=center>\n<img src=\"../../../../img/2017-3/19_222949_9.jpg\" width=\"500\" height=\"500\" />\n</div>\n<!-- more -->\n正文:\n　　这篇文章旨在分享一下eclipse如何配置项目可以被跨域访问到。因为网上看了很多，坑也踩了不少，而且身为一个前端的小白，有些地方忽略的我一头雾水有木有= =，所以我会图本并茂的讲解一下，大神请忽略= =\n　　百度到的方法大多是教给我们利用cors，或者是在java里新建一个filter类，然后配置web.xml配置里新加一堆标签，可是我想说身为一个小白的我，表示怎么创建这个类，在哪创建都不知道啊。。后来研究了半天，又百度了不少，才算是弄明白一整套流程，也是最简单的方法：\n\n　　1.编写拦截器代码，在项目目录下src/default package/下新建一个类CrossOriginFilter，实现Filter接口，代码如下：\n```\n\npackage org.digdata.swustoj.filter;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n *\n * @author wwhhf\n * @since 2016年5月30日\n * @comment 跨域过滤器\n */\npublic class CrossOriginFilter implements Filter {\n\n    private FilterConfig config = null;\n\n    @Override\n    public void init(FilterConfig config) throws ServletException {\n        this.config = config;\n    }\n\n    @Override\n    public void destroy() {\n        this.config = null;\n    }\n\n    /**\n     *\n     * @author wwhhf\n     * @since 2016/5/30\n     * @comment 跨域的设置\n     */\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response,\n            FilterChain chain) throws IOException, ServletException {\n        HttpServletResponse httpResponse = (HttpServletResponse) response;\n        // 表明它允许\"http://xxx\"发起跨域请求\n        httpResponse.setHeader(\"Access-Control-Allow-Origin\",\n                config.getInitParameter(\"AccessControlAllowOrigin\"));\n        // 表明在xxx秒内，不需要再发送预检验请求，可以缓存该结果\n        httpResponse.setHeader(\"Access-Control-Allow-Methods\",\n                config.getInitParameter(\"AccessControlAllowMethods\"));\n        // 表明它允许xxx的外域请求\n        httpResponse.setHeader(\"Access-Control-Max-Age\",\n                config.getInitParameter(\"AccessControlMaxAge\"));\n        // 表明它允许跨域请求包含xxx头\n        httpResponse.setHeader(\"Access-Control-Allow-Headers\",\n                config.getInitParameter(\"AccessControlAllowHeaders\"));\n        chain.doFilter(request, response);\n    }\n\n}\n```\n　　2.WEB-INF/lib下找到web.xml，添加如下代码（有的人项目下会没有自动生成web.xml这个文件，请参考[http://jingyan.baidu.com/article/90808022c495d9fd91c80f15.html](http://jingyan.baidu.com/article/90808022c495d9fd91c80f15.html)）:\n```\n<filter>\n        <filter-name>CrossOrigin</filter-name>\n        <filter-class>org.digdata.swustoj.filter.CrossOriginFilter</filter-class>\n         <init-param>\n            <param-name>AccessControlAllowOrigin</param-name>\n            <param-value>http://localhost:63342</param-value>//这个value是要换成你的请求网址，如果是*为可以被所有网址跨域请求\n        </init-param>\n        <init-param>\n            <param-name>AccessControlAllowMethods</param-name>\n            <param-value>POST, GET, DELETE, PUT</param-value>\n        </init-param>\n        <init-param>\n            <param-name>AccessControlMaxAge</param-name>\n            <param-value>3628800</param-value>\n        </init-param>\n        <init-param>\n            <param-name>AccessControlAllowHeaders</param-name>\n            <param-value>x-requested-with</param-value>\n        </init-param>\n    </filter>\n    <filter-mapping>\n        <filter-name>CrossOrigin</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n```\n　　3.就可以在WebContent目录下新建一个jsp页面，用来测试页面是否可以被跨域请求，jsp代码如下：\n```\n<%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n    pageEncoding=\"ISO-8859-1\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<title>Insert title here</title>\n</head>\n<body>\n\t<h1>tomcat 2.0</h1>\n</body>\n<html>\n```\n<div align=center>\n<img src=\"../../../../img/2017-3/20170301120317.jpg\" width=\"800\" height=\"400\" />\n</div>\n\n　　4.简单说一下跨域测试，用google浏览器就可以测试了，因为谷歌浏览器默认用ajax或者iframe加载本地文件也是跨域请求。所以你现在eclipse里面把这个页面项目在server里跑起来，就新建一个页面用ajax加载跑起来之后的网址，如果是就成功咯o(^-^)o\n<div align=center>\n<img src=\"../../../../img/2017-3/20170301155549.jpg\" width=\"800\" height=\"400\" />\n</div>\n<div align=center>\n<img src=\"../../../../img/2017-3/20170301155622.jpg\" width=\"800\" height=\"400\" />\n</div>\n","slug":"eclipse配置项目可以被跨域访问-Access-Control-Allow-Origin","published":1,"updated":"2017-09-29T06:39:35.261Z","_id":"cj764c8l20000w0d0a2pbqlqz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>摘要:<br>    　　这篇文章旨在分享一下eclipse如何配置项目可以被跨域访问到。因为网上看了很多，坑也踩了不少，而且身为一个前端的小白，有些地方忽略的我一头雾水有木有= =，所以我会图本并茂的讲解一下，大神请忽略= =</p>\n<div align=\"center\"><br><img src=\"../../../../img/2017-3/19_222949_9.jpg\" width=\"500\" height=\"500\"><br></div><br><a id=\"more\"></a><br>正文:<br>　　这篇文章旨在分享一下eclipse如何配置项目可以被跨域访问到。因为网上看了很多，坑也踩了不少，而且身为一个前端的小白，有些地方忽略的我一头雾水有木有= =，所以我会图本并茂的讲解一下，大神请忽略= =<br>　　百度到的方法大多是教给我们利用cors，或者是在java里新建一个filter类，然后配置web.xml配置里新加一堆标签，可是我想说身为一个小白的我，表示怎么创建这个类，在哪创建都不知道啊。。后来研究了半天，又百度了不少，才算是弄明白一整套流程，也是最简单的方法：<br><br>　　1.编写拦截器代码，在项目目录下src/default package/下新建一个类CrossOriginFilter，实现Filter接口，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> org.digdata.swustoj.filter;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.Filter;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.FilterChain;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.FilterConfig;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletResponse;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wwhhf</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2016年5月30日</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@comment</span> 跨域过滤器</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrossOriginFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> FilterConfig config = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig config)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.config = config;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.config = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> wwhhf</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 2016/5/30</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 跨域的设置</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">            FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</div><div class=\"line\">        HttpServletResponse httpResponse = (HttpServletResponse) response;</div><div class=\"line\">        <span class=\"comment\">// 表明它允许\"http://xxx\"发起跨域请求</span></div><div class=\"line\">        httpResponse.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>,</div><div class=\"line\">                config.getInitParameter(<span class=\"string\">\"AccessControlAllowOrigin\"</span>));</div><div class=\"line\">        <span class=\"comment\">// 表明在xxx秒内，不需要再发送预检验请求，可以缓存该结果</span></div><div class=\"line\">        httpResponse.setHeader(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>,</div><div class=\"line\">                config.getInitParameter(<span class=\"string\">\"AccessControlAllowMethods\"</span>));</div><div class=\"line\">        <span class=\"comment\">// 表明它允许xxx的外域请求</span></div><div class=\"line\">        httpResponse.setHeader(<span class=\"string\">\"Access-Control-Max-Age\"</span>,</div><div class=\"line\">                config.getInitParameter(<span class=\"string\">\"AccessControlMaxAge\"</span>));</div><div class=\"line\">        <span class=\"comment\">// 表明它允许跨域请求包含xxx头</span></div><div class=\"line\">        httpResponse.setHeader(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>,</div><div class=\"line\">                config.getInitParameter(<span class=\"string\">\"AccessControlAllowHeaders\"</span>));</div><div class=\"line\">        chain.doFilter(request, response);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>　　2.WEB-INF/lib下找到web.xml，添加如下代码（有的人项目下会没有自动生成web.xml这个文件，请参考<a href=\"http://jingyan.baidu.com/article/90808022c495d9fd91c80f15.html\" target=\"_blank\" rel=\"external\">http://jingyan.baidu.com/article/90808022c495d9fd91c80f15.html</a>）:<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"built_in\">filter</span>&gt;</div><div class=\"line\">        &lt;<span class=\"built_in\">filter</span>-name&gt;CrossOrigin&lt;/<span class=\"built_in\">filter</span>-name&gt;</div><div class=\"line\">        &lt;<span class=\"built_in\">filter</span>-class&gt;org.digdata.swustoj.<span class=\"built_in\">filter</span>.CrossOriginFilter&lt;/<span class=\"built_in\">filter</span>-class&gt;</div><div class=\"line\">         &lt;init-<span class=\"built_in\">param</span>&gt;</div><div class=\"line\">            &lt;<span class=\"built_in\">param</span>-name&gt;AccessControlAllowOrigin&lt;/<span class=\"built_in\">param</span>-name&gt;</div><div class=\"line\">            &lt;<span class=\"built_in\">param</span>-<span class=\"built_in\">value</span>&gt;<span class=\"keyword\">http</span>://localhost:<span class=\"number\">63342</span>&lt;/<span class=\"built_in\">param</span>-<span class=\"built_in\">value</span><span class=\"comment\">&gt;//这个value是要换成你的请求网址，如果是*为可以被所有网址跨域请求</span></div><div class=\"line\">        &lt;/init-<span class=\"built_in\">param</span>&gt;</div><div class=\"line\">        &lt;init-<span class=\"built_in\">param</span>&gt;</div><div class=\"line\">            &lt;<span class=\"built_in\">param</span>-name&gt;AccessControlAllowMethods&lt;/<span class=\"built_in\">param</span>-name&gt;</div><div class=\"line\">            &lt;<span class=\"built_in\">param</span>-<span class=\"built_in\">value</span>&gt;POST, GET, DELETE, PUT&lt;/<span class=\"built_in\">param</span>-<span class=\"built_in\">value</span>&gt;</div><div class=\"line\">        &lt;/init-<span class=\"built_in\">param</span>&gt;</div><div class=\"line\">        &lt;init-<span class=\"built_in\">param</span>&gt;</div><div class=\"line\">            &lt;<span class=\"built_in\">param</span>-name&gt;AccessControlMaxAge&lt;/<span class=\"built_in\">param</span>-name&gt;</div><div class=\"line\">            &lt;<span class=\"built_in\">param</span>-<span class=\"built_in\">value</span>&gt;<span class=\"number\">3628800</span>&lt;/<span class=\"built_in\">param</span>-<span class=\"built_in\">value</span>&gt;</div><div class=\"line\">        &lt;/init-<span class=\"built_in\">param</span>&gt;</div><div class=\"line\">        &lt;init-<span class=\"built_in\">param</span>&gt;</div><div class=\"line\">            &lt;<span class=\"built_in\">param</span>-name&gt;AccessControlAllowHeaders&lt;/<span class=\"built_in\">param</span>-name&gt;</div><div class=\"line\">            &lt;<span class=\"built_in\">param</span>-<span class=\"built_in\">value</span>&gt;x-requested-<span class=\"keyword\">with</span>&lt;/<span class=\"built_in\">param</span>-<span class=\"built_in\">value</span>&gt;</div><div class=\"line\">        &lt;/init-<span class=\"built_in\">param</span>&gt;</div><div class=\"line\">    &lt;/<span class=\"built_in\">filter</span>&gt;</div><div class=\"line\">    &lt;<span class=\"built_in\">filter</span>-mapping&gt;</div><div class=\"line\">        &lt;<span class=\"built_in\">filter</span>-name&gt;CrossOrigin&lt;/<span class=\"built_in\">filter</span>-name&gt;</div><div class=\"line\">        &lt;url-pattern&gt;<span class=\"comment\">/*&lt;/url-pattern&gt;</span></div><div class=\"line\"><span class=\"comment\">    &lt;/filter-mapping&gt;</span></div></pre></td></tr></table></figure><br><br>　　3.就可以在WebContent目录下新建一个jsp页面，用来测试页面是否可以被跨域请求，jsp代码如下：<br><figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\">@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=ISO-8859-1\"</span></span></div><div class=\"line\"><span class=\"ruby\">    pageEncoding=<span class=\"string\">\"ISO-8859-1\"</span></span><span class=\"xml\">%&gt;</span></div><div class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=ISO-8859-1\"</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>tomcat 2.0<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></div></pre></td></tr></table></figure><br><br><div align=\"center\"><br><img src=\"../../../../img/2017-3/20170301120317.jpg\" width=\"800\" height=\"400\"><br></div>\n\n<p>　　4.简单说一下跨域测试，用google浏览器就可以测试了，因为谷歌浏览器默认用ajax或者iframe加载本地文件也是跨域请求。所以你现在eclipse里面把这个页面项目在server里跑起来，就新建一个页面用ajax加载跑起来之后的网址，如果是就成功咯o(^-^)o</p>\n<div align=\"center\"><br><img src=\"../../../../img/2017-3/20170301155549.jpg\" width=\"800\" height=\"400\"><br></div><br><div align=\"center\"><br><img src=\"../../../../img/2017-3/20170301155622.jpg\" width=\"800\" height=\"400\"><br></div>\n","site":{"data":{}},"excerpt":"<p>摘要:<br>    　　这篇文章旨在分享一下eclipse如何配置项目可以被跨域访问到。因为网上看了很多，坑也踩了不少，而且身为一个前端的小白，有些地方忽略的我一头雾水有木有= =，所以我会图本并茂的讲解一下，大神请忽略= =</p>\n<div align=\"center\"><br><img src=\"../../../../img/2017-3/19_222949_9.jpg\" width=\"500\" height=\"500\"><br></div><br>","more":"<br>正文:<br>　　这篇文章旨在分享一下eclipse如何配置项目可以被跨域访问到。因为网上看了很多，坑也踩了不少，而且身为一个前端的小白，有些地方忽略的我一头雾水有木有= =，所以我会图本并茂的讲解一下，大神请忽略= =<br>　　百度到的方法大多是教给我们利用cors，或者是在java里新建一个filter类，然后配置web.xml配置里新加一堆标签，可是我想说身为一个小白的我，表示怎么创建这个类，在哪创建都不知道啊。。后来研究了半天，又百度了不少，才算是弄明白一整套流程，也是最简单的方法：<br><br>　　1.编写拦截器代码，在项目目录下src/default package/下新建一个类CrossOriginFilter，实现Filter接口，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> org.digdata.swustoj.filter;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.Filter;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.FilterChain;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.FilterConfig;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletRequest;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletResponse;</div><div class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wwhhf</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2016年5月30日</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@comment</span> 跨域过滤器</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrossOriginFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> FilterConfig config = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig config)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.config = config;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.config = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> wwhhf</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 2016/5/30</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@comment</span> 跨域的设置</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">            FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</div><div class=\"line\">        HttpServletResponse httpResponse = (HttpServletResponse) response;</div><div class=\"line\">        <span class=\"comment\">// 表明它允许\"http://xxx\"发起跨域请求</span></div><div class=\"line\">        httpResponse.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>,</div><div class=\"line\">                config.getInitParameter(<span class=\"string\">\"AccessControlAllowOrigin\"</span>));</div><div class=\"line\">        <span class=\"comment\">// 表明在xxx秒内，不需要再发送预检验请求，可以缓存该结果</span></div><div class=\"line\">        httpResponse.setHeader(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>,</div><div class=\"line\">                config.getInitParameter(<span class=\"string\">\"AccessControlAllowMethods\"</span>));</div><div class=\"line\">        <span class=\"comment\">// 表明它允许xxx的外域请求</span></div><div class=\"line\">        httpResponse.setHeader(<span class=\"string\">\"Access-Control-Max-Age\"</span>,</div><div class=\"line\">                config.getInitParameter(<span class=\"string\">\"AccessControlMaxAge\"</span>));</div><div class=\"line\">        <span class=\"comment\">// 表明它允许跨域请求包含xxx头</span></div><div class=\"line\">        httpResponse.setHeader(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>,</div><div class=\"line\">                config.getInitParameter(<span class=\"string\">\"AccessControlAllowHeaders\"</span>));</div><div class=\"line\">        chain.doFilter(request, response);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>　　2.WEB-INF/lib下找到web.xml，添加如下代码（有的人项目下会没有自动生成web.xml这个文件，请参考<a href=\"http://jingyan.baidu.com/article/90808022c495d9fd91c80f15.html\" target=\"_blank\" rel=\"external\">http://jingyan.baidu.com/article/90808022c495d9fd91c80f15.html</a>）:<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"built_in\">filter</span>&gt;</div><div class=\"line\">        &lt;<span class=\"built_in\">filter</span>-name&gt;CrossOrigin&lt;/<span class=\"built_in\">filter</span>-name&gt;</div><div class=\"line\">        &lt;<span class=\"built_in\">filter</span>-class&gt;org.digdata.swustoj.<span class=\"built_in\">filter</span>.CrossOriginFilter&lt;/<span class=\"built_in\">filter</span>-class&gt;</div><div class=\"line\">         &lt;init-<span class=\"built_in\">param</span>&gt;</div><div class=\"line\">            &lt;<span class=\"built_in\">param</span>-name&gt;AccessControlAllowOrigin&lt;/<span class=\"built_in\">param</span>-name&gt;</div><div class=\"line\">            &lt;<span class=\"built_in\">param</span>-<span class=\"built_in\">value</span>&gt;<span class=\"keyword\">http</span>://localhost:<span class=\"number\">63342</span>&lt;/<span class=\"built_in\">param</span>-<span class=\"built_in\">value</span><span class=\"comment\">&gt;//这个value是要换成你的请求网址，如果是*为可以被所有网址跨域请求</span></div><div class=\"line\">        &lt;/init-<span class=\"built_in\">param</span>&gt;</div><div class=\"line\">        &lt;init-<span class=\"built_in\">param</span>&gt;</div><div class=\"line\">            &lt;<span class=\"built_in\">param</span>-name&gt;AccessControlAllowMethods&lt;/<span class=\"built_in\">param</span>-name&gt;</div><div class=\"line\">            &lt;<span class=\"built_in\">param</span>-<span class=\"built_in\">value</span>&gt;POST, GET, DELETE, PUT&lt;/<span class=\"built_in\">param</span>-<span class=\"built_in\">value</span>&gt;</div><div class=\"line\">        &lt;/init-<span class=\"built_in\">param</span>&gt;</div><div class=\"line\">        &lt;init-<span class=\"built_in\">param</span>&gt;</div><div class=\"line\">            &lt;<span class=\"built_in\">param</span>-name&gt;AccessControlMaxAge&lt;/<span class=\"built_in\">param</span>-name&gt;</div><div class=\"line\">            &lt;<span class=\"built_in\">param</span>-<span class=\"built_in\">value</span>&gt;<span class=\"number\">3628800</span>&lt;/<span class=\"built_in\">param</span>-<span class=\"built_in\">value</span>&gt;</div><div class=\"line\">        &lt;/init-<span class=\"built_in\">param</span>&gt;</div><div class=\"line\">        &lt;init-<span class=\"built_in\">param</span>&gt;</div><div class=\"line\">            &lt;<span class=\"built_in\">param</span>-name&gt;AccessControlAllowHeaders&lt;/<span class=\"built_in\">param</span>-name&gt;</div><div class=\"line\">            &lt;<span class=\"built_in\">param</span>-<span class=\"built_in\">value</span>&gt;x-requested-<span class=\"keyword\">with</span>&lt;/<span class=\"built_in\">param</span>-<span class=\"built_in\">value</span>&gt;</div><div class=\"line\">        &lt;/init-<span class=\"built_in\">param</span>&gt;</div><div class=\"line\">    &lt;/<span class=\"built_in\">filter</span>&gt;</div><div class=\"line\">    &lt;<span class=\"built_in\">filter</span>-mapping&gt;</div><div class=\"line\">        &lt;<span class=\"built_in\">filter</span>-name&gt;CrossOrigin&lt;/<span class=\"built_in\">filter</span>-name&gt;</div><div class=\"line\">        &lt;url-pattern&gt;<span class=\"comment\">/*&lt;/url-pattern&gt;</span></div><div class=\"line\"><span class=\"comment\">    &lt;/filter-mapping&gt;</span></div></pre></td></tr></table></figure><br><br>　　3.就可以在WebContent目录下新建一个jsp页面，用来测试页面是否可以被跨域请求，jsp代码如下：<br><figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\">@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=ISO-8859-1\"</span></span></div><div class=\"line\"><span class=\"ruby\">    pageEncoding=<span class=\"string\">\"ISO-8859-1\"</span></span><span class=\"xml\">%&gt;</span></div><div class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=ISO-8859-1\"</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>tomcat 2.0<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></div></pre></td></tr></table></figure><br><br><div align=\"center\"><br><img src=\"../../../../img/2017-3/20170301120317.jpg\" width=\"800\" height=\"400\"><br></div>\n\n<p>　　4.简单说一下跨域测试，用google浏览器就可以测试了，因为谷歌浏览器默认用ajax或者iframe加载本地文件也是跨域请求。所以你现在eclipse里面把这个页面项目在server里跑起来，就新建一个页面用ajax加载跑起来之后的网址，如果是就成功咯o(^-^)o</p>\n<div align=\"center\"><br><img src=\"../../../../img/2017-3/20170301155549.jpg\" width=\"800\" height=\"400\"><br></div><br><div align=\"center\"><br><img src=\"../../../../img/2017-3/20170301155622.jpg\" width=\"800\" height=\"400\"><br></div>"},{"title":"关于vue-reource请求出错的坑","date":"2017-09-04T11:54:00.000Z","_content":"摘要:\n　　这次分享一个之前碰到的关于vue-resource post请求后台数据出错的坑，希望对大家有帮助，详细如下文。。。\n    <div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/timg.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n    <!-- more -->\n正文:\n<h1 style=\"color:#3a3a3a;\">vue-resource与ajax还是有点不同的</h1>\n　　分享一个之前碰到的关于vue-resource post请求后台数据出错的坑。在之前的开发工作中碰到了这么一个问题，在vue中使用vue-resource get请求一切正常，可是当使用post后台数据报错如下图：\n<div align=left style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/1504526592.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n    然后使用ajax的post请求发现是没问题的？后来网上百度了半天才在这个<a href='http://www.jianshu.com/p/8d66070eac20'>http://www.jianshu.com/p/8d66070eac20</a>简书一个大牛的帖子中找到问题所在。vue-resource默认的post的data是request payload的形式，而我们一般的ajax与form表单的话的data都是formdata的形式，所以跟后台请求的时候有些出入，才导致了数据出错。\n　　解决方案有两种：\n　　1.当然是麻烦后台同学改一下接口的兼容性啦；\n　　2.这才是我今天重点分享的干货，就是在vue里面的main.js中添加如下的代码：\n~~~\nVue.config.productionTip = false;\nVue.http.options.emulateJSON = true;\nVue.http.options.emulateHTTP = true;\nVue.http.options.headers = {\n  'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n};~~~\n\n　　这样我们的vue-resource的data的格式就变成formdata啦，如下图所示：\n<div align=left style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/1504527392.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n　　像这样就大功告成啦！然后还要给大家分享一个自己范的很低级的错误。。。。我之前data的请求格式变回来了，然后数据请求也成功了，但是拿不到后台返回的数据（返回为空）是什么鬼？请看如下代码：\n~~~\nthis.$http.post('/app/mall/excharge', {\n            goodsId: _this.goodsInfo.id,\n            code: _this.goodsInfo.code,\n            number: _this.goodsInfo.number,\n            userId: _this.userInfo.userId,\n            token: _this.userInfo.token\n          })\n          .then((res) => {\n            _this.buyToggle = false;\n            if (res.body.data.mall.status === 1) { // code为1购买成功\n              const popConfig = {\n                msg: res.body.data.mall.msg,\n                popShow: true,\n                singleBtn: true,\n                types: 'success' // buyReq是购买请求\n              };\n              this.$emit('popToggle', popConfig);\n            } else if (res.body.data.mall.status === 2) { // code为2商品已下架\n              const popConfig = {\n                msg: res.body.data.mall.msg,\n                popShow: true,\n                singleBtn: true,\n                types: 'outUnder' // 商品已下架刷新按钮状态\n              };\n              this.$emit('popToggle', popConfig);\n            } else if (res.body.data.mall.status === 3) { // code为3购买库存不足\n              const popConfig = {\n                msg: res.body.data.mall.msg,\n                popShow: true,\n                singleBtn: true,\n                types: 'reload' // 购买数量大于库存时需刷新购买页面\n              };\n              this.$emit('popToggle', popConfig);\n            } else if (res.body.data.mall.status === -100) { // 重复购买的时候不做提示\n              return false;\n            } else {\n              const popConfig = {\n                msg: res.body.data.mall.msg,\n                popShow: true,\n                singleBtn: true,\n                types: 'false' // 购买失败直接返回文案\n              };\n              this.$emit('popToggle', popConfig);\n            }\n            _this.buyToggle = true;\n          });\n~~~\n　　没错就是第8行，我不知道脑袋当时犯了什么抽抽，在es6的then方法前面换行了？？？而且es-lint居然还不报错有木有= =！！！然后then(res)里面的res接收到的返回值当时就是空啦。。。。。。所以小伙伴们千万不要学我犯这种低级的错误。嗯好了，今天分享就到这里了，希望有帮助的同学疯狂留言^_^。\n\n\n","source":"_posts/关于vue-reource请求出错的坑.md","raw":"---\ntitle: 关于vue-reource请求出错的坑\ndate: 2017-09-04 19:54:00\ncategories:\n  - 开发\ntags:\n    - js\n    - vue\n    - vue-resource\n---\n摘要:\n　　这次分享一个之前碰到的关于vue-resource post请求后台数据出错的坑，希望对大家有帮助，详细如下文。。。\n    <div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/timg.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n    <!-- more -->\n正文:\n<h1 style=\"color:#3a3a3a;\">vue-resource与ajax还是有点不同的</h1>\n　　分享一个之前碰到的关于vue-resource post请求后台数据出错的坑。在之前的开发工作中碰到了这么一个问题，在vue中使用vue-resource get请求一切正常，可是当使用post后台数据报错如下图：\n<div align=left style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/1504526592.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n    然后使用ajax的post请求发现是没问题的？后来网上百度了半天才在这个<a href='http://www.jianshu.com/p/8d66070eac20'>http://www.jianshu.com/p/8d66070eac20</a>简书一个大牛的帖子中找到问题所在。vue-resource默认的post的data是request payload的形式，而我们一般的ajax与form表单的话的data都是formdata的形式，所以跟后台请求的时候有些出入，才导致了数据出错。\n　　解决方案有两种：\n　　1.当然是麻烦后台同学改一下接口的兼容性啦；\n　　2.这才是我今天重点分享的干货，就是在vue里面的main.js中添加如下的代码：\n~~~\nVue.config.productionTip = false;\nVue.http.options.emulateJSON = true;\nVue.http.options.emulateHTTP = true;\nVue.http.options.headers = {\n  'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n};~~~\n\n　　这样我们的vue-resource的data的格式就变成formdata啦，如下图所示：\n<div align=left style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/1504527392.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n　　像这样就大功告成啦！然后还要给大家分享一个自己范的很低级的错误。。。。我之前data的请求格式变回来了，然后数据请求也成功了，但是拿不到后台返回的数据（返回为空）是什么鬼？请看如下代码：\n~~~\nthis.$http.post('/app/mall/excharge', {\n            goodsId: _this.goodsInfo.id,\n            code: _this.goodsInfo.code,\n            number: _this.goodsInfo.number,\n            userId: _this.userInfo.userId,\n            token: _this.userInfo.token\n          })\n          .then((res) => {\n            _this.buyToggle = false;\n            if (res.body.data.mall.status === 1) { // code为1购买成功\n              const popConfig = {\n                msg: res.body.data.mall.msg,\n                popShow: true,\n                singleBtn: true,\n                types: 'success' // buyReq是购买请求\n              };\n              this.$emit('popToggle', popConfig);\n            } else if (res.body.data.mall.status === 2) { // code为2商品已下架\n              const popConfig = {\n                msg: res.body.data.mall.msg,\n                popShow: true,\n                singleBtn: true,\n                types: 'outUnder' // 商品已下架刷新按钮状态\n              };\n              this.$emit('popToggle', popConfig);\n            } else if (res.body.data.mall.status === 3) { // code为3购买库存不足\n              const popConfig = {\n                msg: res.body.data.mall.msg,\n                popShow: true,\n                singleBtn: true,\n                types: 'reload' // 购买数量大于库存时需刷新购买页面\n              };\n              this.$emit('popToggle', popConfig);\n            } else if (res.body.data.mall.status === -100) { // 重复购买的时候不做提示\n              return false;\n            } else {\n              const popConfig = {\n                msg: res.body.data.mall.msg,\n                popShow: true,\n                singleBtn: true,\n                types: 'false' // 购买失败直接返回文案\n              };\n              this.$emit('popToggle', popConfig);\n            }\n            _this.buyToggle = true;\n          });\n~~~\n　　没错就是第8行，我不知道脑袋当时犯了什么抽抽，在es6的then方法前面换行了？？？而且es-lint居然还不报错有木有= =！！！然后then(res)里面的res接收到的返回值当时就是空啦。。。。。。所以小伙伴们千万不要学我犯这种低级的错误。嗯好了，今天分享就到这里了，希望有帮助的同学疯狂留言^_^。\n\n\n","slug":"关于vue-reource请求出错的坑","published":1,"updated":"2017-09-28T11:30:14.616Z","_id":"cj764c8l80001w0d0cutjxg59","comments":1,"layout":"post","photos":[],"link":"","content":"<p>摘要:<br>　　这次分享一个之前碰到的关于vue-resource post请求后台数据出错的坑，希望对大家有帮助，详细如下文。。。<br>    <div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/timg.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br>    <a id=\"more\"></a><br>正文:</p>\n<p></p><h1 style=\"color:#3a3a3a;\">vue-resource与ajax还是有点不同的</h1><br>　　分享一个之前碰到的关于vue-resource post请求后台数据出错的坑。在之前的开发工作中碰到了这么一个问题，在vue中使用vue-resource get请求一切正常，可是当使用post后台数据报错如下图：<p></p>\n<p><div align=\"left\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/1504526592.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br>    然后使用ajax的post请求发现是没问题的？后来网上百度了半天才在这个<a href=\"http://www.jianshu.com/p/8d66070eac20\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/8d66070eac20</a>简书一个大牛的帖子中找到问题所在。vue-resource默认的post的data是request payload的形式，而我们一般的ajax与form表单的话的data都是formdata的形式，所以跟后台请求的时候有些出入，才导致了数据出错。<br>　　解决方案有两种：<br>　　1.当然是麻烦后台同学改一下接口的兼容性啦；<br>　　2.这才是我今天重点分享的干货，就是在vue里面的main.js中添加如下的代码：<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.config.productionTip = <span class=\"keyword\">false</span>;</div><div class=\"line\">Vue.http.<span class=\"keyword\">options</span>.emulateJSON = <span class=\"keyword\">true</span>;</div><div class=\"line\">Vue.http.<span class=\"keyword\">options</span>.emulateHTTP = <span class=\"keyword\">true</span>;</div><div class=\"line\">Vue.http.<span class=\"keyword\">options</span>.headers = &#123;</div><div class=\"line\">  <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>　　这样我们的vue-resource的data的格式就变成formdata啦，如下图所示：</p>\n<p><div align=\"left\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/1504527392.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br>　　像这样就大功告成啦！然后还要给大家分享一个自己范的很低级的错误。。。。我之前data的请求格式变回来了，然后数据请求也成功了，但是拿不到后台返回的数据（返回为空）是什么鬼？请看如下代码：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$http.post(<span class=\"string\">'/app/mall/excharge'</span>, &#123;</div><div class=\"line\">            goodsId: _this.goodsInfo.id,</div><div class=\"line\">            code: _this.goodsInfo.code,</div><div class=\"line\">            number: _this.goodsInfo.number,</div><div class=\"line\">            userId: _this.userInfo.userId,</div><div class=\"line\">            token: _this.userInfo.token</div><div class=\"line\">          &#125;)</div><div class=\"line\">          .then((res) =&gt; &#123;</div><div class=\"line\">            _this.buyToggle = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (res.body.<span class=\"keyword\">data</span>.mall.status === <span class=\"number\">1</span>) &#123; <span class=\"comment\">// code为1购买成功</span></div><div class=\"line\">              const popConfig = &#123;</div><div class=\"line\">                msg: res.body.<span class=\"keyword\">data</span>.mall.msg,</div><div class=\"line\">                popShow: <span class=\"literal\">true</span>,</div><div class=\"line\">                singleBtn: <span class=\"literal\">true</span>,</div><div class=\"line\">                types: <span class=\"string\">'success'</span> <span class=\"comment\">// buyReq是购买请求</span></div><div class=\"line\">              &#125;;</div><div class=\"line\">              <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'popToggle'</span>, popConfig);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (res.body.<span class=\"keyword\">data</span>.mall.status === <span class=\"number\">2</span>) &#123; <span class=\"comment\">// code为2商品已下架</span></div><div class=\"line\">              const popConfig = &#123;</div><div class=\"line\">                msg: res.body.<span class=\"keyword\">data</span>.mall.msg,</div><div class=\"line\">                popShow: <span class=\"literal\">true</span>,</div><div class=\"line\">                singleBtn: <span class=\"literal\">true</span>,</div><div class=\"line\">                types: <span class=\"string\">'outUnder'</span> <span class=\"comment\">// 商品已下架刷新按钮状态</span></div><div class=\"line\">              &#125;;</div><div class=\"line\">              <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'popToggle'</span>, popConfig);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (res.body.<span class=\"keyword\">data</span>.mall.status === <span class=\"number\">3</span>) &#123; <span class=\"comment\">// code为3购买库存不足</span></div><div class=\"line\">              const popConfig = &#123;</div><div class=\"line\">                msg: res.body.<span class=\"keyword\">data</span>.mall.msg,</div><div class=\"line\">                popShow: <span class=\"literal\">true</span>,</div><div class=\"line\">                singleBtn: <span class=\"literal\">true</span>,</div><div class=\"line\">                types: <span class=\"string\">'reload'</span> <span class=\"comment\">// 购买数量大于库存时需刷新购买页面</span></div><div class=\"line\">              &#125;;</div><div class=\"line\">              <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'popToggle'</span>, popConfig);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (res.body.<span class=\"keyword\">data</span>.mall.status === <span class=\"number\">-100</span>) &#123; <span class=\"comment\">// 重复购买的时候不做提示</span></div><div class=\"line\">              <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              const popConfig = &#123;</div><div class=\"line\">                msg: res.body.<span class=\"keyword\">data</span>.mall.msg,</div><div class=\"line\">                popShow: <span class=\"literal\">true</span>,</div><div class=\"line\">                singleBtn: <span class=\"literal\">true</span>,</div><div class=\"line\">                types: <span class=\"string\">'false'</span> <span class=\"comment\">// 购买失败直接返回文案</span></div><div class=\"line\">              &#125;;</div><div class=\"line\">              <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'popToggle'</span>, popConfig);</div><div class=\"line\">            &#125;</div><div class=\"line\">            _this.buyToggle = <span class=\"literal\">true</span>;</div><div class=\"line\">          &#125;);</div></pre></td></tr></table></figure></p>\n<p>　　没错就是第8行，我不知道脑袋当时犯了什么抽抽，在es6的then方法前面换行了？？？而且es-lint居然还不报错有木有= =！！！然后then(res)里面的res接收到的返回值当时就是空啦。。。。。。所以小伙伴们千万不要学我犯这种低级的错误。嗯好了，今天分享就到这里了，希望有帮助的同学疯狂留言^_^。</p>\n","site":{"data":{}},"excerpt":"<p>摘要:<br>　　这次分享一个之前碰到的关于vue-resource post请求后台数据出错的坑，希望对大家有帮助，详细如下文。。。<br>    <div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/timg.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br>","more":"<br>正文:</p>\n<p></p><h1 style=\"color:#3a3a3a;\">vue-resource与ajax还是有点不同的</h1><br>　　分享一个之前碰到的关于vue-resource post请求后台数据出错的坑。在之前的开发工作中碰到了这么一个问题，在vue中使用vue-resource get请求一切正常，可是当使用post后台数据报错如下图：<p></p>\n<p><div align=\"left\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/1504526592.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br>    然后使用ajax的post请求发现是没问题的？后来网上百度了半天才在这个<a href=\"http://www.jianshu.com/p/8d66070eac20\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/8d66070eac20</a>简书一个大牛的帖子中找到问题所在。vue-resource默认的post的data是request payload的形式，而我们一般的ajax与form表单的话的data都是formdata的形式，所以跟后台请求的时候有些出入，才导致了数据出错。<br>　　解决方案有两种：<br>　　1.当然是麻烦后台同学改一下接口的兼容性啦；<br>　　2.这才是我今天重点分享的干货，就是在vue里面的main.js中添加如下的代码：<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.config.productionTip = <span class=\"keyword\">false</span>;</div><div class=\"line\">Vue.http.<span class=\"keyword\">options</span>.emulateJSON = <span class=\"keyword\">true</span>;</div><div class=\"line\">Vue.http.<span class=\"keyword\">options</span>.emulateHTTP = <span class=\"keyword\">true</span>;</div><div class=\"line\">Vue.http.<span class=\"keyword\">options</span>.headers = &#123;</div><div class=\"line\">  <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>　　这样我们的vue-resource的data的格式就变成formdata啦，如下图所示：</p>\n<p><div align=\"left\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/1504527392.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br>　　像这样就大功告成啦！然后还要给大家分享一个自己范的很低级的错误。。。。我之前data的请求格式变回来了，然后数据请求也成功了，但是拿不到后台返回的数据（返回为空）是什么鬼？请看如下代码：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.$http.post(<span class=\"string\">'/app/mall/excharge'</span>, &#123;</div><div class=\"line\">            goodsId: _this.goodsInfo.id,</div><div class=\"line\">            code: _this.goodsInfo.code,</div><div class=\"line\">            number: _this.goodsInfo.number,</div><div class=\"line\">            userId: _this.userInfo.userId,</div><div class=\"line\">            token: _this.userInfo.token</div><div class=\"line\">          &#125;)</div><div class=\"line\">          .then((res) =&gt; &#123;</div><div class=\"line\">            _this.buyToggle = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (res.body.<span class=\"keyword\">data</span>.mall.status === <span class=\"number\">1</span>) &#123; <span class=\"comment\">// code为1购买成功</span></div><div class=\"line\">              const popConfig = &#123;</div><div class=\"line\">                msg: res.body.<span class=\"keyword\">data</span>.mall.msg,</div><div class=\"line\">                popShow: <span class=\"literal\">true</span>,</div><div class=\"line\">                singleBtn: <span class=\"literal\">true</span>,</div><div class=\"line\">                types: <span class=\"string\">'success'</span> <span class=\"comment\">// buyReq是购买请求</span></div><div class=\"line\">              &#125;;</div><div class=\"line\">              <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'popToggle'</span>, popConfig);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (res.body.<span class=\"keyword\">data</span>.mall.status === <span class=\"number\">2</span>) &#123; <span class=\"comment\">// code为2商品已下架</span></div><div class=\"line\">              const popConfig = &#123;</div><div class=\"line\">                msg: res.body.<span class=\"keyword\">data</span>.mall.msg,</div><div class=\"line\">                popShow: <span class=\"literal\">true</span>,</div><div class=\"line\">                singleBtn: <span class=\"literal\">true</span>,</div><div class=\"line\">                types: <span class=\"string\">'outUnder'</span> <span class=\"comment\">// 商品已下架刷新按钮状态</span></div><div class=\"line\">              &#125;;</div><div class=\"line\">              <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'popToggle'</span>, popConfig);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (res.body.<span class=\"keyword\">data</span>.mall.status === <span class=\"number\">3</span>) &#123; <span class=\"comment\">// code为3购买库存不足</span></div><div class=\"line\">              const popConfig = &#123;</div><div class=\"line\">                msg: res.body.<span class=\"keyword\">data</span>.mall.msg,</div><div class=\"line\">                popShow: <span class=\"literal\">true</span>,</div><div class=\"line\">                singleBtn: <span class=\"literal\">true</span>,</div><div class=\"line\">                types: <span class=\"string\">'reload'</span> <span class=\"comment\">// 购买数量大于库存时需刷新购买页面</span></div><div class=\"line\">              &#125;;</div><div class=\"line\">              <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'popToggle'</span>, popConfig);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (res.body.<span class=\"keyword\">data</span>.mall.status === <span class=\"number\">-100</span>) &#123; <span class=\"comment\">// 重复购买的时候不做提示</span></div><div class=\"line\">              <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              const popConfig = &#123;</div><div class=\"line\">                msg: res.body.<span class=\"keyword\">data</span>.mall.msg,</div><div class=\"line\">                popShow: <span class=\"literal\">true</span>,</div><div class=\"line\">                singleBtn: <span class=\"literal\">true</span>,</div><div class=\"line\">                types: <span class=\"string\">'false'</span> <span class=\"comment\">// 购买失败直接返回文案</span></div><div class=\"line\">              &#125;;</div><div class=\"line\">              <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'popToggle'</span>, popConfig);</div><div class=\"line\">            &#125;</div><div class=\"line\">            _this.buyToggle = <span class=\"literal\">true</span>;</div><div class=\"line\">          &#125;);</div></pre></td></tr></table></figure></p>\n<p>　　没错就是第8行，我不知道脑袋当时犯了什么抽抽，在es6的then方法前面换行了？？？而且es-lint居然还不报错有木有= =！！！然后then(res)里面的res接收到的返回值当时就是空啦。。。。。。所以小伙伴们千万不要学我犯这种低级的错误。嗯好了，今天分享就到这里了，希望有帮助的同学疯狂留言^_^。</p>"},{"title":"关于js复杂类型和构造函数的一点小知识","date":"2017-04-18T02:21:45.000Z","_content":"摘要:\n    　　javascript脚本语言在进入v8以后可以说是无所不能，而构造函数更可以说是前端代码逼格化灰常重要的技能，可以大大减少代码的重复性，让我们的js代码看起来更加简洁易懂。然而，逼格越高的东西往往也越不容易理解，所以今天在这里给大家介绍一些关于js的复杂类型和构造函数的一些入门知识。\n    <div align=center>\n    <img src=\"../../../../img/2017-4/58842726ce2d2.jpg\" width=\"800\" height=\"400\" />\n    </div>\n        <!-- more -->\n正文:\n<h1 style=\"color:#d9534f;\">类型</h1>\n    javascript类型可以简单的分为两组：基本类型和复杂类型。访问基本类型，访问的是值。而访问复杂类型，访问的是值的引用，或者说是对指针的访问。\n    ·基本类型包括number，boolean，string，null，undefined;\n    ·复杂类型包括array，object，function;\n    如下述例子：\n```\n//基本类型\nvar a = 5;\nvar b = a;\nb = 6;\na;//结果为5\nb;//结果为6\n\n//复杂类型\nvar a = ['hello','world'];\nvar b = a;\nb[0] = 'bye';\na[0];//结果为'bye'\nb[0];//结果为'bye'\n```\n\n\n<h1 style=\"color:#d9534f;\">THIS,FUNCTION#CALL,FUNCTION#APPLY</h1>\n　　在浏览器对象中，window就是全局对象，而下面的代码中，this则指向全局对象：\n```\nfunction a (){\n    window == this; //true\n}\n```\n　　.call和.apply可以改变this引用的对象\n```\nfunction a (){\n    this.a == \"b\"; //true\n}\na.call({a:\"b\"});\n```\n　　而call和apply的区别在于，call接收一个参数列表，而apply接收一个参数数组\n```\nfunction a (b,c){\n    b == 'first' //true;\n    c == 'second' //true;\n}\na.call({a:'b'},first,second);\na.apply({a:'b'},[first,second])\n```\n\n<h1 style=\"color:#d9534f;\">构造与继承</h1>\n　　javascript中没有类关键词。所以类的概念我们只能通过函数来定义：\n```\nfunction Animal(){}\n```\n　　可以通过函数的prototype属性来完成对所有Animal的实例定义函数\n```\nAnimal.prototype.eat = function(food){\n    //eat method\n}\n```\n　　而在此时，函数内部this指向的就不是全局对象window了，而是通过Animal实例出的对象\n```\nfunction Animal(name){\n    this.name = name;\n}\nAnimal.prototype.getName = function(){\n    console.log(this.name);\n}\nvar animal = new Animal(\"cat\");\nanimal.getName == \"cat\";//true;\n```\n　　万幸在v8发布以后我们有了_proto_属性，它使的定义继承链变得更加更加容易：\n```\n    function Animal(){\n\n    }\n    Animal.prototype.cname = \"cat\";\n    function Ferret(){\n\n    }\n    Ferret.prototype.__proto__ = Animal.prototype;\n    console.log(Animal.prototype.cname); //结果为cat\n    console.log(Ferret.prototype.__proto__.cname);//结果为cat\n```\n这样，Animal中的prototype中的属性就全部保存在Animal里面了。然而大家要记住，__proto__这个属性就像复杂类型一样只是指向构造器的prototype，访问的并不是值，更像是指针的引用。所以当我们改变__proto__里面的属性以后，就相当于改变了构造器里面的prototype。我们用下面一个例子来引申：\n```\n    function fnTest(name){\n        this.name = name;\n        this.sayName = function(){\n            console.log(this.name);\n        }\n    }\n    fnTest.prototype.showName=function(){\n        console.log(this.name + \"1111\");\n    };\n    var a = new fnTest(\"dog\");\n    var b = new fnTest(\"cat\");\n    console.log(b);\n    b.sayName = function () {\n        console.log(this.name + \"3333\")\n    };\n    b.__proto__.showName = function () {\n        console.log(this.name + \"2222\")\n    };\n\n    a.sayName();  //结果为dog\n    b.sayName();  //结果cat3333\n\n    a.showName(); //结果dog2222\n    b.showName(); //结果cat2222\n```\n　　","source":"_posts/关于构造函数的一点小知识.md","raw":"---\ntitle: 关于js复杂类型和构造函数的一点小知识\ndate: 2017-04-18 10:21:45\ncategories:\n  - 开发\ntags:\n    - 前端\n    - js\n    - 构造函数\n---\n摘要:\n    　　javascript脚本语言在进入v8以后可以说是无所不能，而构造函数更可以说是前端代码逼格化灰常重要的技能，可以大大减少代码的重复性，让我们的js代码看起来更加简洁易懂。然而，逼格越高的东西往往也越不容易理解，所以今天在这里给大家介绍一些关于js的复杂类型和构造函数的一些入门知识。\n    <div align=center>\n    <img src=\"../../../../img/2017-4/58842726ce2d2.jpg\" width=\"800\" height=\"400\" />\n    </div>\n        <!-- more -->\n正文:\n<h1 style=\"color:#d9534f;\">类型</h1>\n    javascript类型可以简单的分为两组：基本类型和复杂类型。访问基本类型，访问的是值。而访问复杂类型，访问的是值的引用，或者说是对指针的访问。\n    ·基本类型包括number，boolean，string，null，undefined;\n    ·复杂类型包括array，object，function;\n    如下述例子：\n```\n//基本类型\nvar a = 5;\nvar b = a;\nb = 6;\na;//结果为5\nb;//结果为6\n\n//复杂类型\nvar a = ['hello','world'];\nvar b = a;\nb[0] = 'bye';\na[0];//结果为'bye'\nb[0];//结果为'bye'\n```\n\n\n<h1 style=\"color:#d9534f;\">THIS,FUNCTION#CALL,FUNCTION#APPLY</h1>\n　　在浏览器对象中，window就是全局对象，而下面的代码中，this则指向全局对象：\n```\nfunction a (){\n    window == this; //true\n}\n```\n　　.call和.apply可以改变this引用的对象\n```\nfunction a (){\n    this.a == \"b\"; //true\n}\na.call({a:\"b\"});\n```\n　　而call和apply的区别在于，call接收一个参数列表，而apply接收一个参数数组\n```\nfunction a (b,c){\n    b == 'first' //true;\n    c == 'second' //true;\n}\na.call({a:'b'},first,second);\na.apply({a:'b'},[first,second])\n```\n\n<h1 style=\"color:#d9534f;\">构造与继承</h1>\n　　javascript中没有类关键词。所以类的概念我们只能通过函数来定义：\n```\nfunction Animal(){}\n```\n　　可以通过函数的prototype属性来完成对所有Animal的实例定义函数\n```\nAnimal.prototype.eat = function(food){\n    //eat method\n}\n```\n　　而在此时，函数内部this指向的就不是全局对象window了，而是通过Animal实例出的对象\n```\nfunction Animal(name){\n    this.name = name;\n}\nAnimal.prototype.getName = function(){\n    console.log(this.name);\n}\nvar animal = new Animal(\"cat\");\nanimal.getName == \"cat\";//true;\n```\n　　万幸在v8发布以后我们有了_proto_属性，它使的定义继承链变得更加更加容易：\n```\n    function Animal(){\n\n    }\n    Animal.prototype.cname = \"cat\";\n    function Ferret(){\n\n    }\n    Ferret.prototype.__proto__ = Animal.prototype;\n    console.log(Animal.prototype.cname); //结果为cat\n    console.log(Ferret.prototype.__proto__.cname);//结果为cat\n```\n这样，Animal中的prototype中的属性就全部保存在Animal里面了。然而大家要记住，__proto__这个属性就像复杂类型一样只是指向构造器的prototype，访问的并不是值，更像是指针的引用。所以当我们改变__proto__里面的属性以后，就相当于改变了构造器里面的prototype。我们用下面一个例子来引申：\n```\n    function fnTest(name){\n        this.name = name;\n        this.sayName = function(){\n            console.log(this.name);\n        }\n    }\n    fnTest.prototype.showName=function(){\n        console.log(this.name + \"1111\");\n    };\n    var a = new fnTest(\"dog\");\n    var b = new fnTest(\"cat\");\n    console.log(b);\n    b.sayName = function () {\n        console.log(this.name + \"3333\")\n    };\n    b.__proto__.showName = function () {\n        console.log(this.name + \"2222\")\n    };\n\n    a.sayName();  //结果为dog\n    b.sayName();  //结果cat3333\n\n    a.showName(); //结果dog2222\n    b.showName(); //结果cat2222\n```\n　　","slug":"关于构造函数的一点小知识","published":1,"updated":"2017-09-29T06:39:35.266Z","_id":"cj764c8lh0004w0d0xkoq2vir","comments":1,"layout":"post","photos":[],"link":"","content":"<p>摘要:<br>    　　javascript脚本语言在进入v8以后可以说是无所不能，而构造函数更可以说是前端代码逼格化灰常重要的技能，可以大大减少代码的重复性，让我们的js代码看起来更加简洁易懂。然而，逼格越高的东西往往也越不容易理解，所以今天在这里给大家介绍一些关于js的复杂类型和构造函数的一些入门知识。<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-4/58842726ce2d2.jpg\" width=\"800\" height=\"400\"><br>    </div><br>        <a id=\"more\"></a><br>正文:</p>\n<p></p><h1 style=\"color:#d9534f;\">类型</h1><br>    javascript类型可以简单的分为两组：基本类型和复杂类型。访问基本类型，访问的是值。而访问复杂类型，访问的是值的引用，或者说是对指针的访问。<br>    ·基本类型包括number，boolean，string，null，undefined;<br>    ·复杂类型包括array，object，function;<br>    如下述例子：<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//基本类型</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b = a;</div><div class=\"line\">b = <span class=\"number\">6</span>;</div><div class=\"line\">a;<span class=\"comment\">//结果为5</span></div><div class=\"line\">b;<span class=\"comment\">//结果为6</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//复杂类型</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'hello'</span>,<span class=\"string\">'world'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a;</div><div class=\"line\">b[<span class=\"number\">0</span>] = <span class=\"string\">'bye'</span>;</div><div class=\"line\">a[<span class=\"number\">0</span>];<span class=\"comment\">//结果为'bye'</span></div><div class=\"line\">b[<span class=\"number\">0</span>];<span class=\"comment\">//结果为'bye'</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h1 style=\"color:#d9534f;\">THIS,FUNCTION#CALL,FUNCTION#APPLY</h1><br>　　在浏览器对象中，window就是全局对象，而下面的代码中，this则指向全局对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">window</span> == <span class=\"keyword\">this</span>; <span class=\"comment\">//true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p>\n<p>　　.call和.apply可以改变this引用的对象<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> <span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.a == <span class=\"string\">\"b\"</span>; <span class=\"comment\">//true</span></div><div class=\"line\">&#125;</div><div class=\"line\">a.call(&#123;a:<span class=\"string\">\"b\"</span>&#125;);</div></pre></td></tr></table></figure></p>\n<p>　　而call和apply的区别在于，call接收一个参数列表，而apply接收一个参数数组<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> <span class=\"params\">(b,c)</span></span>&#123;</div><div class=\"line\">    b == <span class=\"string\">'first'</span> <span class=\"comment\">//true;</span></div><div class=\"line\">    c == <span class=\"string\">'second'</span> <span class=\"comment\">//true;</span></div><div class=\"line\">&#125;</div><div class=\"line\">a.call(&#123;a:<span class=\"string\">'b'</span>&#125;,first,second);</div><div class=\"line\">a.apply(&#123;a:<span class=\"string\">'b'</span>&#125;,[first,second])</div></pre></td></tr></table></figure></p>\n<p></p><h1 style=\"color:#d9534f;\">构造与继承</h1><br>　　javascript中没有类关键词。所以类的概念我们只能通过函数来定义：<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span><span class=\"params\">()</span></span>&#123;&#125;</div></pre></td></tr></table></figure><p></p>\n<p>　　可以通过函数的prototype属性来完成对所有Animal的实例定义函数<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Animal.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(food)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//eat method</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　而在此时，函数内部this指向的就不是全局对象window了，而是通过Animal实例出的对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\">Animal.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal(<span class=\"string\">\"cat\"</span>);</div><div class=\"line\">animal.getName == <span class=\"string\">\"cat\"</span>;<span class=\"comment\">//true;</span></div></pre></td></tr></table></figure></p>\n<p>　　万幸在v8发布以后我们有了<em>proto</em>属性，它使的定义继承链变得更加更加容易：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">Animal.prototype.cname = <span class=\"string\">\"cat\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ferret</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">Ferret.prototype.__proto__ = Animal.prototype;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Animal.prototype.cname); <span class=\"comment\">//结果为cat</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(Ferret.prototype.__proto__.cname);<span class=\"comment\">//结果为cat</span></div></pre></td></tr></table></figure></p>\n<p>这样，Animal中的prototype中的属性就全部保存在Animal里面了。然而大家要记住，<strong>proto</strong>这个属性就像复杂类型一样只是指向构造器的prototype，访问的并不是值，更像是指针的引用。所以当我们改变<strong>proto</strong>里面的属性以后，就相当于改变了构造器里面的prototype。我们用下面一个例子来引申：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnTest</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">fnTest.prototype.showName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"1111\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fnTest(<span class=\"string\">\"dog\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> fnTest(<span class=\"string\">\"cat\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b);</div><div class=\"line\">b.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"3333\"</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\">b.__proto__.showName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"2222\"</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">a.sayName();  <span class=\"comment\">//结果为dog</span></div><div class=\"line\">b.sayName();  <span class=\"comment\">//结果cat3333</span></div><div class=\"line\"></div><div class=\"line\">a.showName(); <span class=\"comment\">//结果dog2222</span></div><div class=\"line\">b.showName(); <span class=\"comment\">//结果cat2222</span></div></pre></td></tr></table></figure></p>\n<p>　　</p>\n","site":{"data":{}},"excerpt":"<p>摘要:<br>    　　javascript脚本语言在进入v8以后可以说是无所不能，而构造函数更可以说是前端代码逼格化灰常重要的技能，可以大大减少代码的重复性，让我们的js代码看起来更加简洁易懂。然而，逼格越高的东西往往也越不容易理解，所以今天在这里给大家介绍一些关于js的复杂类型和构造函数的一些入门知识。<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-4/58842726ce2d2.jpg\" width=\"800\" height=\"400\"><br>    </div><br>","more":"<br>正文:</p>\n<p></p><h1 style=\"color:#d9534f;\">类型</h1><br>    javascript类型可以简单的分为两组：基本类型和复杂类型。访问基本类型，访问的是值。而访问复杂类型，访问的是值的引用，或者说是对指针的访问。<br>    ·基本类型包括number，boolean，string，null，undefined;<br>    ·复杂类型包括array，object，function;<br>    如下述例子：<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//基本类型</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b = a;</div><div class=\"line\">b = <span class=\"number\">6</span>;</div><div class=\"line\">a;<span class=\"comment\">//结果为5</span></div><div class=\"line\">b;<span class=\"comment\">//结果为6</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//复杂类型</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'hello'</span>,<span class=\"string\">'world'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a;</div><div class=\"line\">b[<span class=\"number\">0</span>] = <span class=\"string\">'bye'</span>;</div><div class=\"line\">a[<span class=\"number\">0</span>];<span class=\"comment\">//结果为'bye'</span></div><div class=\"line\">b[<span class=\"number\">0</span>];<span class=\"comment\">//结果为'bye'</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h1 style=\"color:#d9534f;\">THIS,FUNCTION#CALL,FUNCTION#APPLY</h1><br>　　在浏览器对象中，window就是全局对象，而下面的代码中，this则指向全局对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">window</span> == <span class=\"keyword\">this</span>; <span class=\"comment\">//true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p>\n<p>　　.call和.apply可以改变this引用的对象<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> <span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.a == <span class=\"string\">\"b\"</span>; <span class=\"comment\">//true</span></div><div class=\"line\">&#125;</div><div class=\"line\">a.call(&#123;a:<span class=\"string\">\"b\"</span>&#125;);</div></pre></td></tr></table></figure></p>\n<p>　　而call和apply的区别在于，call接收一个参数列表，而apply接收一个参数数组<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> <span class=\"params\">(b,c)</span></span>&#123;</div><div class=\"line\">    b == <span class=\"string\">'first'</span> <span class=\"comment\">//true;</span></div><div class=\"line\">    c == <span class=\"string\">'second'</span> <span class=\"comment\">//true;</span></div><div class=\"line\">&#125;</div><div class=\"line\">a.call(&#123;a:<span class=\"string\">'b'</span>&#125;,first,second);</div><div class=\"line\">a.apply(&#123;a:<span class=\"string\">'b'</span>&#125;,[first,second])</div></pre></td></tr></table></figure></p>\n<p></p><h1 style=\"color:#d9534f;\">构造与继承</h1><br>　　javascript中没有类关键词。所以类的概念我们只能通过函数来定义：<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span><span class=\"params\">()</span></span>&#123;&#125;</div></pre></td></tr></table></figure><p></p>\n<p>　　可以通过函数的prototype属性来完成对所有Animal的实例定义函数<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Animal.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(food)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//eat method</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　而在此时，函数内部this指向的就不是全局对象window了，而是通过Animal实例出的对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\">Animal.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal(<span class=\"string\">\"cat\"</span>);</div><div class=\"line\">animal.getName == <span class=\"string\">\"cat\"</span>;<span class=\"comment\">//true;</span></div></pre></td></tr></table></figure></p>\n<p>　　万幸在v8发布以后我们有了<em>proto</em>属性，它使的定义继承链变得更加更加容易：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">Animal.prototype.cname = <span class=\"string\">\"cat\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ferret</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">Ferret.prototype.__proto__ = Animal.prototype;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Animal.prototype.cname); <span class=\"comment\">//结果为cat</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(Ferret.prototype.__proto__.cname);<span class=\"comment\">//结果为cat</span></div></pre></td></tr></table></figure></p>\n<p>这样，Animal中的prototype中的属性就全部保存在Animal里面了。然而大家要记住，<strong>proto</strong>这个属性就像复杂类型一样只是指向构造器的prototype，访问的并不是值，更像是指针的引用。所以当我们改变<strong>proto</strong>里面的属性以后，就相当于改变了构造器里面的prototype。我们用下面一个例子来引申：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnTest</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">fnTest.prototype.showName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"1111\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fnTest(<span class=\"string\">\"dog\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> fnTest(<span class=\"string\">\"cat\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b);</div><div class=\"line\">b.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"3333\"</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\">b.__proto__.showName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"2222\"</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">a.sayName();  <span class=\"comment\">//结果为dog</span></div><div class=\"line\">b.sayName();  <span class=\"comment\">//结果cat3333</span></div><div class=\"line\"></div><div class=\"line\">a.showName(); <span class=\"comment\">//结果dog2222</span></div><div class=\"line\">b.showName(); <span class=\"comment\">//结果cat2222</span></div></pre></td></tr></table></figure></p>\n<p>　　</p>"},{"title":"啦啦啦。。略略略~~","date":"2017-03-08T02:59:28.000Z","_content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=413829859&auto=1&height=66\"></iframe>\n摘要：\n　　好几天没有更新博客了，因为这几天不愉快的事情太多了，都赶一起了。直到今天才感觉好点，就随便写点生活的上的事情吧。\n    <div align=center>\n    <img src=\"../../../../img/2017-3/483580.jpg\" width=\"700\" height=\"500\" />\n    </div>\n    <!-- more -->\n正文：\n　　销声匿迹了好几天，都是在静静的潜修，修的的不是别的是心态，因为最近是真的特么狠烦...先是干了件二逼事，然后就是周末吃坏了东西上吐下泻连带发烧了好几天，再然后就是面试被虐，心情爆炸到了极点...我曾经发过这样一条朋友圈：烦躁时不张牙舞爪，高兴时不得意忘形。不得意忘形我是没咋做到。。但是不张牙舞爪还是必须的，因为你一时的张牙舞爪，很可能就伤了你身边的朋友一辈子，而且越亲近的越是。所以每次自己烦的时候都觉得还是尽量不要跟别人有什么交互的好，喜欢一个人待会好先把自己心情收拾好，才能在别人面前显的强大哈哈。\n　　直到今天肠胃总算是好点了，烧也退了，终于有胃口吃东西了伴随着心情也嗨皮起来了。首先得谢谢各位小伙伴的关心（总感觉这句话有点像谢谢党和政府一样强行插入...），在偌大的北京，起码不好了还有人问问，感觉还是不错了，哈哈o(^▽^)o...其次呢，其次我给忘了...本来今天上午还构思的好好的，但是写着写着突然工作上来活了，忙着忙着就把已经构思好的都忘了，有点尴尬啊...\n    <div align=center>\n    <img src=\"../../../../img/2017-3/20150419H5539_KABWt.jpeg\" width=\"700\" height=\"500\" />\n    </div>\n　　但是无所谓，忘了就忘了吧，就说说自己吧。可能是我最近太饥渴的缘故最近公司的财务美女跟一个小老姨总想着要给我介绍美女，额，这个东西我是真的没有经历过互相介绍那种的，感觉，两个人不应该是为了在一起而玩的熟了，而是玩的熟了才应该在一起了，所以我觉得我还是喜欢那种两个人水到渠成的感觉。而且，重点是我家里也没有人催，我也不着急，大不了多吃几把狗粮，还可以趁着自己单着把自己变得更优秀（不管你们信不信..我是信了..呵呵..）。\n　　写着写着又没得写了，突然想起来胖子说的一句话：“你不跟那sb说话他也不跟你喷”，哈哈哈哈哈，真的每次想起来这句话我都笑到掉眼泪。因为他们家合租的住了一个男的，这个男的我俩见过之后一致认为没有比他再能装x的了，然后我之后再没怎么去过胖子家，然后各种同情胖子需要跟这种人住一起。然后某一天我继续同情他的时候，他就说了这句话，哈哈哈哈。简直心酸带着无奈带着坚强啊！五味陈杂有木有！哎哟，不行了，再让我笑会再写....我感觉这个梗，撑起了我今年的笑点...\n    <div align=center>\n    <img src=\"../../../../img/2017-3/e37dbf3ee14747d9c6638edc7ed9ba49.jpg\" width=\"700\" height=\"500\" />\n    </div>\n　　今天朋友圈还看见小仙女呲牙咧嘴的自拍照了，顺手点了个赞。我最近心情不好，怕发的话也都是矫情的话，所以朋友圈也还是不要发了，忍忍吧。包括以后，我都不想做一个矫情的人，在这立个flag，嗯。对了说到这，还想到说了最近想养只小猫(知道我为什么贴这么多猫的照片了吧...)。想一想，你在家敲着敲着代码，一只小猫跳到桌子上在你键盘上乱踩几下是得多有爱...嗯，一起养只小猫，可以的。本来是想着领养一只小猫的，但是打了两个百度的领养中心电话，发现都换人了，所以可能还得想别的办法。想着最好从小养一只，有感情。而且说好的一人一半啊，到时候不许特么耍赖啊@内个人\n    <div align=center>\n    <img src=\"../../../../img/2017-3/451551.jpg\" width=\"700\" height=\"500\" />\n    </div>\n　　还有好多好多琐事，比如：上个月请两天假导致这个月工资少了1000多块啊，电动牙刷坏了发现自己不会刷牙了导致我又花了好几百块买了个新的啊，还有前两天终于入手了一只姑获鸟啊（自此以后抽到的都特么是r），奥对说到这突然想起来某人给寄的巧克力也到了，谢谢，很开心，还有周末要跟一对吃饭又特么要吃狗粮了啊...嗯，就这么多吧，反正就是希望自己好，还有，期待小猫的到来~o(^_^)o\n    <div align=center>\n    <img style=\"transform:rotate(90deg);margin:100px 0;\" src=\"../../../../img/2017-3/27480670075741726.jpg\" width=\"700\" height=\"500\" />\n    </div>\n\n","source":"_posts/啦啦啦。。略略略.md","raw":"---\ntitle: 啦啦啦。。略略略~~\ndate: 2017-03-08 10:59:28\ncategories:\n  - 生活\ntags:\n  - 生活\n  - 日常\n---\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=413829859&auto=1&height=66\"></iframe>\n摘要：\n　　好几天没有更新博客了，因为这几天不愉快的事情太多了，都赶一起了。直到今天才感觉好点，就随便写点生活的上的事情吧。\n    <div align=center>\n    <img src=\"../../../../img/2017-3/483580.jpg\" width=\"700\" height=\"500\" />\n    </div>\n    <!-- more -->\n正文：\n　　销声匿迹了好几天，都是在静静的潜修，修的的不是别的是心态，因为最近是真的特么狠烦...先是干了件二逼事，然后就是周末吃坏了东西上吐下泻连带发烧了好几天，再然后就是面试被虐，心情爆炸到了极点...我曾经发过这样一条朋友圈：烦躁时不张牙舞爪，高兴时不得意忘形。不得意忘形我是没咋做到。。但是不张牙舞爪还是必须的，因为你一时的张牙舞爪，很可能就伤了你身边的朋友一辈子，而且越亲近的越是。所以每次自己烦的时候都觉得还是尽量不要跟别人有什么交互的好，喜欢一个人待会好先把自己心情收拾好，才能在别人面前显的强大哈哈。\n　　直到今天肠胃总算是好点了，烧也退了，终于有胃口吃东西了伴随着心情也嗨皮起来了。首先得谢谢各位小伙伴的关心（总感觉这句话有点像谢谢党和政府一样强行插入...），在偌大的北京，起码不好了还有人问问，感觉还是不错了，哈哈o(^▽^)o...其次呢，其次我给忘了...本来今天上午还构思的好好的，但是写着写着突然工作上来活了，忙着忙着就把已经构思好的都忘了，有点尴尬啊...\n    <div align=center>\n    <img src=\"../../../../img/2017-3/20150419H5539_KABWt.jpeg\" width=\"700\" height=\"500\" />\n    </div>\n　　但是无所谓，忘了就忘了吧，就说说自己吧。可能是我最近太饥渴的缘故最近公司的财务美女跟一个小老姨总想着要给我介绍美女，额，这个东西我是真的没有经历过互相介绍那种的，感觉，两个人不应该是为了在一起而玩的熟了，而是玩的熟了才应该在一起了，所以我觉得我还是喜欢那种两个人水到渠成的感觉。而且，重点是我家里也没有人催，我也不着急，大不了多吃几把狗粮，还可以趁着自己单着把自己变得更优秀（不管你们信不信..我是信了..呵呵..）。\n　　写着写着又没得写了，突然想起来胖子说的一句话：“你不跟那sb说话他也不跟你喷”，哈哈哈哈哈，真的每次想起来这句话我都笑到掉眼泪。因为他们家合租的住了一个男的，这个男的我俩见过之后一致认为没有比他再能装x的了，然后我之后再没怎么去过胖子家，然后各种同情胖子需要跟这种人住一起。然后某一天我继续同情他的时候，他就说了这句话，哈哈哈哈。简直心酸带着无奈带着坚强啊！五味陈杂有木有！哎哟，不行了，再让我笑会再写....我感觉这个梗，撑起了我今年的笑点...\n    <div align=center>\n    <img src=\"../../../../img/2017-3/e37dbf3ee14747d9c6638edc7ed9ba49.jpg\" width=\"700\" height=\"500\" />\n    </div>\n　　今天朋友圈还看见小仙女呲牙咧嘴的自拍照了，顺手点了个赞。我最近心情不好，怕发的话也都是矫情的话，所以朋友圈也还是不要发了，忍忍吧。包括以后，我都不想做一个矫情的人，在这立个flag，嗯。对了说到这，还想到说了最近想养只小猫(知道我为什么贴这么多猫的照片了吧...)。想一想，你在家敲着敲着代码，一只小猫跳到桌子上在你键盘上乱踩几下是得多有爱...嗯，一起养只小猫，可以的。本来是想着领养一只小猫的，但是打了两个百度的领养中心电话，发现都换人了，所以可能还得想别的办法。想着最好从小养一只，有感情。而且说好的一人一半啊，到时候不许特么耍赖啊@内个人\n    <div align=center>\n    <img src=\"../../../../img/2017-3/451551.jpg\" width=\"700\" height=\"500\" />\n    </div>\n　　还有好多好多琐事，比如：上个月请两天假导致这个月工资少了1000多块啊，电动牙刷坏了发现自己不会刷牙了导致我又花了好几百块买了个新的啊，还有前两天终于入手了一只姑获鸟啊（自此以后抽到的都特么是r），奥对说到这突然想起来某人给寄的巧克力也到了，谢谢，很开心，还有周末要跟一对吃饭又特么要吃狗粮了啊...嗯，就这么多吧，反正就是希望自己好，还有，期待小猫的到来~o(^_^)o\n    <div align=center>\n    <img style=\"transform:rotate(90deg);margin:100px 0;\" src=\"../../../../img/2017-3/27480670075741726.jpg\" width=\"700\" height=\"500\" />\n    </div>\n\n","slug":"啦啦啦。。略略略","published":1,"updated":"2017-09-29T06:39:35.269Z","_id":"cj764c8lk0005w0d0t39ln4xm","comments":1,"layout":"post","photos":[],"link":"","content":"<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=413829859&auto=1&height=66\"></iframe><br>摘要：<br>　　好几天没有更新博客了，因为这几天不愉快的事情太多了，都赶一起了。直到今天才感觉好点，就随便写点生活的上的事情吧。<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-3/483580.jpg\" width=\"700\" height=\"500\"><br>    </div><br>    <a id=\"more\"></a><br>正文：<br>　　销声匿迹了好几天，都是在静静的潜修，修的的不是别的是心态，因为最近是真的特么狠烦…先是干了件二逼事，然后就是周末吃坏了东西上吐下泻连带发烧了好几天，再然后就是面试被虐，心情爆炸到了极点…我曾经发过这样一条朋友圈：烦躁时不张牙舞爪，高兴时不得意忘形。不得意忘形我是没咋做到。。但是不张牙舞爪还是必须的，因为你一时的张牙舞爪，很可能就伤了你身边的朋友一辈子，而且越亲近的越是。所以每次自己烦的时候都觉得还是尽量不要跟别人有什么交互的好，喜欢一个人待会好先把自己心情收拾好，才能在别人面前显的强大哈哈。<br>　　直到今天肠胃总算是好点了，烧也退了，终于有胃口吃东西了伴随着心情也嗨皮起来了。首先得谢谢各位小伙伴的关心（总感觉这句话有点像谢谢党和政府一样强行插入…），在偌大的北京，起码不好了还有人问问，感觉还是不错了，哈哈o(^▽^)o…其次呢，其次我给忘了…本来今天上午还构思的好好的，但是写着写着突然工作上来活了，忙着忙着就把已经构思好的都忘了，有点尴尬啊…<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-3/20150419H5539_KABWt.jpeg\" width=\"700\" height=\"500\"><br>    </div><br>　　但是无所谓，忘了就忘了吧，就说说自己吧。可能是我最近太饥渴的缘故最近公司的财务美女跟一个小老姨总想着要给我介绍美女，额，这个东西我是真的没有经历过互相介绍那种的，感觉，两个人不应该是为了在一起而玩的熟了，而是玩的熟了才应该在一起了，所以我觉得我还是喜欢那种两个人水到渠成的感觉。而且，重点是我家里也没有人催，我也不着急，大不了多吃几把狗粮，还可以趁着自己单着把自己变得更优秀（不管你们信不信..我是信了..呵呵..）。<br>　　写着写着又没得写了，突然想起来胖子说的一句话：“你不跟那sb说话他也不跟你喷”，哈哈哈哈哈，真的每次想起来这句话我都笑到掉眼泪。因为他们家合租的住了一个男的，这个男的我俩见过之后一致认为没有比他再能装x的了，然后我之后再没怎么去过胖子家，然后各种同情胖子需要跟这种人住一起。然后某一天我继续同情他的时候，他就说了这句话，哈哈哈哈。简直心酸带着无奈带着坚强啊！五味陈杂有木有！哎哟，不行了，再让我笑会再写….我感觉这个梗，撑起了我今年的笑点…<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-3/e37dbf3ee14747d9c6638edc7ed9ba49.jpg\" width=\"700\" height=\"500\"><br>    </div><br>　　今天朋友圈还看见小仙女呲牙咧嘴的自拍照了，顺手点了个赞。我最近心情不好，怕发的话也都是矫情的话，所以朋友圈也还是不要发了，忍忍吧。包括以后，我都不想做一个矫情的人，在这立个flag，嗯。对了说到这，还想到说了最近想养只小猫(知道我为什么贴这么多猫的照片了吧…)。想一想，你在家敲着敲着代码，一只小猫跳到桌子上在你键盘上乱踩几下是得多有爱…嗯，一起养只小猫，可以的。本来是想着领养一只小猫的，但是打了两个百度的领养中心电话，发现都换人了，所以可能还得想别的办法。想着最好从小养一只，有感情。而且说好的一人一半啊，到时候不许特么耍赖啊@内个人<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-3/451551.jpg\" width=\"700\" height=\"500\"><br>    </div><br>　　还有好多好多琐事，比如：上个月请两天假导致这个月工资少了1000多块啊，电动牙刷坏了发现自己不会刷牙了导致我又花了好几百块买了个新的啊，还有前两天终于入手了一只姑获鸟啊（自此以后抽到的都特么是r），奥对说到这突然想起来某人给寄的巧克力也到了，谢谢，很开心，还有周末要跟一对吃饭又特么要吃狗粮了啊…嗯，就这么多吧，反正就是希望自己好，还有，期待小猫的到来~o(^_^)o<br>    <div align=\"center\"><br>    <img style=\"transform:rotate(90deg);margin:100px 0;\" src=\"../../../../img/2017-3/27480670075741726.jpg\" width=\"700\" height=\"500\"><br>    </div></p>\n","site":{"data":{}},"excerpt":"<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=413829859&auto=1&height=66\"></iframe><br>摘要：<br>　　好几天没有更新博客了，因为这几天不愉快的事情太多了，都赶一起了。直到今天才感觉好点，就随便写点生活的上的事情吧。<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-3/483580.jpg\" width=\"700\" height=\"500\"><br>    </div><br>","more":"<br>正文：<br>　　销声匿迹了好几天，都是在静静的潜修，修的的不是别的是心态，因为最近是真的特么狠烦…先是干了件二逼事，然后就是周末吃坏了东西上吐下泻连带发烧了好几天，再然后就是面试被虐，心情爆炸到了极点…我曾经发过这样一条朋友圈：烦躁时不张牙舞爪，高兴时不得意忘形。不得意忘形我是没咋做到。。但是不张牙舞爪还是必须的，因为你一时的张牙舞爪，很可能就伤了你身边的朋友一辈子，而且越亲近的越是。所以每次自己烦的时候都觉得还是尽量不要跟别人有什么交互的好，喜欢一个人待会好先把自己心情收拾好，才能在别人面前显的强大哈哈。<br>　　直到今天肠胃总算是好点了，烧也退了，终于有胃口吃东西了伴随着心情也嗨皮起来了。首先得谢谢各位小伙伴的关心（总感觉这句话有点像谢谢党和政府一样强行插入…），在偌大的北京，起码不好了还有人问问，感觉还是不错了，哈哈o(^▽^)o…其次呢，其次我给忘了…本来今天上午还构思的好好的，但是写着写着突然工作上来活了，忙着忙着就把已经构思好的都忘了，有点尴尬啊…<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-3/20150419H5539_KABWt.jpeg\" width=\"700\" height=\"500\"><br>    </div><br>　　但是无所谓，忘了就忘了吧，就说说自己吧。可能是我最近太饥渴的缘故最近公司的财务美女跟一个小老姨总想着要给我介绍美女，额，这个东西我是真的没有经历过互相介绍那种的，感觉，两个人不应该是为了在一起而玩的熟了，而是玩的熟了才应该在一起了，所以我觉得我还是喜欢那种两个人水到渠成的感觉。而且，重点是我家里也没有人催，我也不着急，大不了多吃几把狗粮，还可以趁着自己单着把自己变得更优秀（不管你们信不信..我是信了..呵呵..）。<br>　　写着写着又没得写了，突然想起来胖子说的一句话：“你不跟那sb说话他也不跟你喷”，哈哈哈哈哈，真的每次想起来这句话我都笑到掉眼泪。因为他们家合租的住了一个男的，这个男的我俩见过之后一致认为没有比他再能装x的了，然后我之后再没怎么去过胖子家，然后各种同情胖子需要跟这种人住一起。然后某一天我继续同情他的时候，他就说了这句话，哈哈哈哈。简直心酸带着无奈带着坚强啊！五味陈杂有木有！哎哟，不行了，再让我笑会再写….我感觉这个梗，撑起了我今年的笑点…<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-3/e37dbf3ee14747d9c6638edc7ed9ba49.jpg\" width=\"700\" height=\"500\"><br>    </div><br>　　今天朋友圈还看见小仙女呲牙咧嘴的自拍照了，顺手点了个赞。我最近心情不好，怕发的话也都是矫情的话，所以朋友圈也还是不要发了，忍忍吧。包括以后，我都不想做一个矫情的人，在这立个flag，嗯。对了说到这，还想到说了最近想养只小猫(知道我为什么贴这么多猫的照片了吧…)。想一想，你在家敲着敲着代码，一只小猫跳到桌子上在你键盘上乱踩几下是得多有爱…嗯，一起养只小猫，可以的。本来是想着领养一只小猫的，但是打了两个百度的领养中心电话，发现都换人了，所以可能还得想别的办法。想着最好从小养一只，有感情。而且说好的一人一半啊，到时候不许特么耍赖啊@内个人<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-3/451551.jpg\" width=\"700\" height=\"500\"><br>    </div><br>　　还有好多好多琐事，比如：上个月请两天假导致这个月工资少了1000多块啊，电动牙刷坏了发现自己不会刷牙了导致我又花了好几百块买了个新的啊，还有前两天终于入手了一只姑获鸟啊（自此以后抽到的都特么是r），奥对说到这突然想起来某人给寄的巧克力也到了，谢谢，很开心，还有周末要跟一对吃饭又特么要吃狗粮了啊…嗯，就这么多吧，反正就是希望自己好，还有，期待小猫的到来~o(^_^)o<br>    <div align=\"center\"><br>    <img style=\"transform:rotate(90deg);margin:100px 0;\" src=\"../../../../img/2017-3/27480670075741726.jpg\" width=\"700\" height=\"500\"><br>    </div></p>"},{"title":"好久不见^_^","date":"2017-08-07T12:59:23.000Z","_content":"摘要:\n　　好久，好久没有更新一一下自己博客了!最近几个月真的发生了好多事情，多到自己都不知道该从哪里讲起。。。。嗯，有好的事情，也有不好的事情，有些可以讲的事情，还有些必须憋在心里没办法讲的事情。讲真有些事情憋着真的很难受。。哎。。。\n    <div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/timg.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n     <!-- more -->\n     <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=476323037&auto=1&height=66\"></iframe>\n正文:\n<h1 style=\"color:#3a3a3a;\">换了家公司</h1>\n　　嗯就先从自己换了公司这件事情说起吧。对，你们没有猜错，最近小跳了个槽，来到一个现在这个做p2p的公司，规模不小，几千人，已经上市了。公司福利也不错（社保公积金都百分缴，七险一金有木有），每天还有免费的零食跟水果啊，还有每个月一次的生日趴啊之类的。嗯，总之就是公司气氛很不错的说。重点是新公司的团队大家人都很好，什么后台的小伙伴啊，老大啊，部门老板啊，人都超级不错的有木有！虽然是比原来公司忙了点，说到这，我真的要吐槽一下了， 话说真的比原来忙了不是一点半点呀。。。。。基本每天加班到十点以后。。。上次一个大需求做完了还通了个宵。。。。早上才回家。然后大老板给我们研发发了个大红包，我抢了90多哈哈。。。还算是个安慰。。。。然后今天之所以有时间写东西就是因为我们今天又有一个大需求要上线。。嗯。。苦逼吧。。。我来这里快8个星期了。。一直都是我一个前端挑大梁。。后台无数个人对接我一个前端的说。。你们真的好意思嘛。。。老大说一直在给我招人一直在面试。。要招个高级带带我。结果，结果，结果来了个初级的妹子。。哎哟。。虽然我很喜欢妹子但是真的还是得来个高级的怎么也得成立个前端组，跟老大说了这个意思，好在老大支持我的想法，然后先从别的部门调来一个高手给我缓解压力，还有我们的初级妹子明天也来啦～～～感觉终于快解放了，哭死我了这个月。。。\n　　嗯。公司的情况大概就介绍到这里吧。反正忙点是忙点，还算充实。通常你忙着忙着会发现：卧槽！今天周五，明天都放假了！哈哈！也挺好的。奥对了还有件大事，我们公司马上搬到东升科技园了，就在8月底，离我三站，超级近的有木有！我寻思着，可以买个拉轰的摩托车上班啦哈啊哈～～～～快点搬吧～～～～～下面贴上我近几天的打卡记录纪念一下\n<div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/1502117225.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n<h1 style=\"color:#3a3a3a;\">聚散离合</h1>\n　　每次能比比的必少不了身边这堆损友。这么久了，大家都多少有点变化了。麟爷最终分了手，然后交了新女朋友（前后几乎尼玛没有缓冲期有木有！），老姨有了产品男，大侄最近浪的飞起。只剩下我跟胖子两个人苦苦在单身人海中徘徊。。。哎。。。好过分。。。所以觉得是时候浪一把了，该是忘了大哥的时候了，我爱过，爱的很深，付出很多，但是确实不是适合我的类型，那种跟谁都聊的飞起没玩够的确实不适合我，我投降，所以我退出。对不起没能一起看话剧，对不起没能一起看周杰伦的演唱会，对不起拉黑了你，对不起我会慢慢过去忘了你。我曾经给你说过的所有话都是认真的，现在这些也是，嗯。哎，不开心的不说了，字打在这里她也看不到，其实没啥卵用。。说点高兴的，老姨升了职，大侄找了新工作涨了工资，胖子满了一年也涨了一千块，我这次跳槽当然也涨工资啦（涨多少保密哈哈！），麟爷技术有了长足的发展，大家都在潜移默变，都在慢慢成长。希望我们几年以后甚至十几年几十年以后都还能在一起聚聚，说说我们曾经傻逼的日子。如果你们把我当回事的话，你们的婚礼我一定一个不缺场，嗯，这是一个期望，当然我的你们更是一个不能缺。\n　　朋友们就比比到这吧，虽然嘴上说着烦你们浪的飞起不会再带你们玩了，但是其实心里还是希望你们好的，有事情的话肯定义不容辞，嗯。最后放上一张我自认为是我们巅峰时期的照片吧^_^哦对忘了说张图大美女，在我们这堆程序猿（媛）里，考研上学的雅静简直就是个另类呀哈哈，希望越变越美布拉布拉。。。。下面，请看照片！\n<div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/161535843694122746.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n<h1 style=\"color:#3a3a3a;\">陪伴了我三个多月的新家庭成员</h1>\n　　该是给大家隆重介绍我家新成员：咋滴了 的时候了o(^▽^)o~~~~~~~~~~4.14出生的咋地了居然跟我一个生日。。。。这踏马简直就为我而生的小猫啊。。。这个小家伙是我在5.1抱回来的，第一次见面都就被这个家伙的颜值深深的折服了。。。真的好萌好可爱啊啊啊，在网友的家里一眼就看中了。。最终花了我1500大洋在跨越了一个北京城从南到北的距离后，终于把这个家伙接回家啦！\n　　刚进家门的时候还只是怕怕的蹲在地上，缩成一团怕怕的一直盯着我看，在不到一个小时以后，已经开始床上床下蹦个没完没了了= =。 刚抱回家的时候，总盯着我一直叫个不停，出于礼貌我就一直回答他：咋滴啦!然后，然后你们应该知道它的名字是怎么来的吧= =数数，咋地了现在陪我居然超过3个月了，时间是过的真快啊！一开始早上一顿猫粮，晚上一顿奶，夜宵是营养膏，是真的不敢怠慢。后来满了3个月奶给断了一阵，发现这个家伙我一喝牛奶就馋的跟什么似的老跟我抢= =得，看来药不能停，奶不能断啊，还是得继续供着。咋滴了在一堆爸爸妈妈的万千宠爱下到现在也已经茁壮长成一直大猫了（比刚进家那会真的大了不止一点半点。。），上个月14号带他去医院打了第一针驱虫镇。还记得当时一进宠物医院就被围观了，大家都说好可爱好漂亮啊！我这当爸的真的是无比自豪啊！哈哈！嗯，以前这家伙的饭量都是我在控制，一天倒固定的量。后来前一阵子我懒了，早上出门之前直接给倒了满满一盆猫粮，然后，然后几天发现这个家伙肚子真的特么大的吓人啊！身材比例都失调了！为了继续让他保持身材，为了继续能让他给爸爸招来小姐姐。。我决心给他减肥！继续以前一样给他固定量的猫粮，不能再多吃了，特喵的你胖成猪你看我还要不要你。\n　　这个月14号得带他去打第二针了，嗯，爸爸希望你能茁壮成长，能陪我好久好久。。。。。下面的话就放张咋滴了洗澡的黑人图吧哈哈o(^▽^)o但是讲真，我们家咋地了真的洗澡的时候都贼帅，除了有的时候趴着的姿势贼逗比外没别的毛病。。。话不多说，上图：\n<div align=center style=\"overflow:hidden;\"><img src=\"../../../../img/2017-8/6043099434676900491.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n<div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/7457428889949857221.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n<div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/8634466565743659081.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n　　感觉如果咋滴了看见我发的照片一定绝交了。。。哈哈哈哈哈哈。哎哟，行了，比比叨叨的不知不觉码了这么多字了，总之希望自己生活会慢慢更好，我知道人都是想看人家不好，以后我多码点不高兴的给你们看o.0，嗯。目前已经12点了，身边的同志们还在激烈战斗，一张图片结束今天逼到吧，希望忘了没必要的人，希望能追上我喜欢的人！\n<div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/895297467916358534.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n\n","source":"_posts/好久不见.md","raw":"---\ntitle: 好久不见^_^\ndate: 2017-08-07 20:59:23\ncategories:\n  - 生活\ntags:\n    - 小心情\n    - 啦啦啦\n---\n摘要:\n　　好久，好久没有更新一一下自己博客了!最近几个月真的发生了好多事情，多到自己都不知道该从哪里讲起。。。。嗯，有好的事情，也有不好的事情，有些可以讲的事情，还有些必须憋在心里没办法讲的事情。讲真有些事情憋着真的很难受。。哎。。。\n    <div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/timg.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n     <!-- more -->\n     <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=476323037&auto=1&height=66\"></iframe>\n正文:\n<h1 style=\"color:#3a3a3a;\">换了家公司</h1>\n　　嗯就先从自己换了公司这件事情说起吧。对，你们没有猜错，最近小跳了个槽，来到一个现在这个做p2p的公司，规模不小，几千人，已经上市了。公司福利也不错（社保公积金都百分缴，七险一金有木有），每天还有免费的零食跟水果啊，还有每个月一次的生日趴啊之类的。嗯，总之就是公司气氛很不错的说。重点是新公司的团队大家人都很好，什么后台的小伙伴啊，老大啊，部门老板啊，人都超级不错的有木有！虽然是比原来公司忙了点，说到这，我真的要吐槽一下了， 话说真的比原来忙了不是一点半点呀。。。。。基本每天加班到十点以后。。。上次一个大需求做完了还通了个宵。。。。早上才回家。然后大老板给我们研发发了个大红包，我抢了90多哈哈。。。还算是个安慰。。。。然后今天之所以有时间写东西就是因为我们今天又有一个大需求要上线。。嗯。。苦逼吧。。。我来这里快8个星期了。。一直都是我一个前端挑大梁。。后台无数个人对接我一个前端的说。。你们真的好意思嘛。。。老大说一直在给我招人一直在面试。。要招个高级带带我。结果，结果，结果来了个初级的妹子。。哎哟。。虽然我很喜欢妹子但是真的还是得来个高级的怎么也得成立个前端组，跟老大说了这个意思，好在老大支持我的想法，然后先从别的部门调来一个高手给我缓解压力，还有我们的初级妹子明天也来啦～～～感觉终于快解放了，哭死我了这个月。。。\n　　嗯。公司的情况大概就介绍到这里吧。反正忙点是忙点，还算充实。通常你忙着忙着会发现：卧槽！今天周五，明天都放假了！哈哈！也挺好的。奥对了还有件大事，我们公司马上搬到东升科技园了，就在8月底，离我三站，超级近的有木有！我寻思着，可以买个拉轰的摩托车上班啦哈啊哈～～～～快点搬吧～～～～～下面贴上我近几天的打卡记录纪念一下\n<div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/1502117225.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n<h1 style=\"color:#3a3a3a;\">聚散离合</h1>\n　　每次能比比的必少不了身边这堆损友。这么久了，大家都多少有点变化了。麟爷最终分了手，然后交了新女朋友（前后几乎尼玛没有缓冲期有木有！），老姨有了产品男，大侄最近浪的飞起。只剩下我跟胖子两个人苦苦在单身人海中徘徊。。。哎。。。好过分。。。所以觉得是时候浪一把了，该是忘了大哥的时候了，我爱过，爱的很深，付出很多，但是确实不是适合我的类型，那种跟谁都聊的飞起没玩够的确实不适合我，我投降，所以我退出。对不起没能一起看话剧，对不起没能一起看周杰伦的演唱会，对不起拉黑了你，对不起我会慢慢过去忘了你。我曾经给你说过的所有话都是认真的，现在这些也是，嗯。哎，不开心的不说了，字打在这里她也看不到，其实没啥卵用。。说点高兴的，老姨升了职，大侄找了新工作涨了工资，胖子满了一年也涨了一千块，我这次跳槽当然也涨工资啦（涨多少保密哈哈！），麟爷技术有了长足的发展，大家都在潜移默变，都在慢慢成长。希望我们几年以后甚至十几年几十年以后都还能在一起聚聚，说说我们曾经傻逼的日子。如果你们把我当回事的话，你们的婚礼我一定一个不缺场，嗯，这是一个期望，当然我的你们更是一个不能缺。\n　　朋友们就比比到这吧，虽然嘴上说着烦你们浪的飞起不会再带你们玩了，但是其实心里还是希望你们好的，有事情的话肯定义不容辞，嗯。最后放上一张我自认为是我们巅峰时期的照片吧^_^哦对忘了说张图大美女，在我们这堆程序猿（媛）里，考研上学的雅静简直就是个另类呀哈哈，希望越变越美布拉布拉。。。。下面，请看照片！\n<div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/161535843694122746.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n<h1 style=\"color:#3a3a3a;\">陪伴了我三个多月的新家庭成员</h1>\n　　该是给大家隆重介绍我家新成员：咋滴了 的时候了o(^▽^)o~~~~~~~~~~4.14出生的咋地了居然跟我一个生日。。。。这踏马简直就为我而生的小猫啊。。。这个小家伙是我在5.1抱回来的，第一次见面都就被这个家伙的颜值深深的折服了。。。真的好萌好可爱啊啊啊，在网友的家里一眼就看中了。。最终花了我1500大洋在跨越了一个北京城从南到北的距离后，终于把这个家伙接回家啦！\n　　刚进家门的时候还只是怕怕的蹲在地上，缩成一团怕怕的一直盯着我看，在不到一个小时以后，已经开始床上床下蹦个没完没了了= =。 刚抱回家的时候，总盯着我一直叫个不停，出于礼貌我就一直回答他：咋滴啦!然后，然后你们应该知道它的名字是怎么来的吧= =数数，咋地了现在陪我居然超过3个月了，时间是过的真快啊！一开始早上一顿猫粮，晚上一顿奶，夜宵是营养膏，是真的不敢怠慢。后来满了3个月奶给断了一阵，发现这个家伙我一喝牛奶就馋的跟什么似的老跟我抢= =得，看来药不能停，奶不能断啊，还是得继续供着。咋滴了在一堆爸爸妈妈的万千宠爱下到现在也已经茁壮长成一直大猫了（比刚进家那会真的大了不止一点半点。。），上个月14号带他去医院打了第一针驱虫镇。还记得当时一进宠物医院就被围观了，大家都说好可爱好漂亮啊！我这当爸的真的是无比自豪啊！哈哈！嗯，以前这家伙的饭量都是我在控制，一天倒固定的量。后来前一阵子我懒了，早上出门之前直接给倒了满满一盆猫粮，然后，然后几天发现这个家伙肚子真的特么大的吓人啊！身材比例都失调了！为了继续让他保持身材，为了继续能让他给爸爸招来小姐姐。。我决心给他减肥！继续以前一样给他固定量的猫粮，不能再多吃了，特喵的你胖成猪你看我还要不要你。\n　　这个月14号得带他去打第二针了，嗯，爸爸希望你能茁壮成长，能陪我好久好久。。。。。下面的话就放张咋滴了洗澡的黑人图吧哈哈o(^▽^)o但是讲真，我们家咋地了真的洗澡的时候都贼帅，除了有的时候趴着的姿势贼逗比外没别的毛病。。。话不多说，上图：\n<div align=center style=\"overflow:hidden;\"><img src=\"../../../../img/2017-8/6043099434676900491.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n<div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/7457428889949857221.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n<div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/8634466565743659081.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n　　感觉如果咋滴了看见我发的照片一定绝交了。。。哈哈哈哈哈哈。哎哟，行了，比比叨叨的不知不觉码了这么多字了，总之希望自己生活会慢慢更好，我知道人都是想看人家不好，以后我多码点不高兴的给你们看o.0，嗯。目前已经12点了，身边的同志们还在激烈战斗，一张图片结束今天逼到吧，希望忘了没必要的人，希望能追上我喜欢的人！\n<div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/895297467916358534.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n\n","slug":"好久不见","published":1,"updated":"2017-09-29T06:39:35.273Z","_id":"cj764c8lp0006w0d0qf2wxqs9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>摘要:<br>　　好久，好久没有更新一一下自己博客了!最近几个月真的发生了好多事情，多到自己都不知道该从哪里讲起。。。。嗯，有好的事情，也有不好的事情，有些可以讲的事情，还有些必须憋在心里没办法讲的事情。讲真有些事情憋着真的很难受。。哎。。。<br>    <div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/timg.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br>     <a id=\"more\"></a><br>     <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=476323037&auto=1&height=66\"></iframe><br>正文:</p>\n<p></p><h1 style=\"color:#3a3a3a;\">换了家公司</h1><br>　　嗯就先从自己换了公司这件事情说起吧。对，你们没有猜错，最近小跳了个槽，来到一个现在这个做p2p的公司，规模不小，几千人，已经上市了。公司福利也不错（社保公积金都百分缴，七险一金有木有），每天还有免费的零食跟水果啊，还有每个月一次的生日趴啊之类的。嗯，总之就是公司气氛很不错的说。重点是新公司的团队大家人都很好，什么后台的小伙伴啊，老大啊，部门老板啊，人都超级不错的有木有！虽然是比原来公司忙了点，说到这，我真的要吐槽一下了， 话说真的比原来忙了不是一点半点呀。。。。。基本每天加班到十点以后。。。上次一个大需求做完了还通了个宵。。。。早上才回家。然后大老板给我们研发发了个大红包，我抢了90多哈哈。。。还算是个安慰。。。。然后今天之所以有时间写东西就是因为我们今天又有一个大需求要上线。。嗯。。苦逼吧。。。我来这里快8个星期了。。一直都是我一个前端挑大梁。。后台无数个人对接我一个前端的说。。你们真的好意思嘛。。。老大说一直在给我招人一直在面试。。要招个高级带带我。结果，结果，结果来了个初级的妹子。。哎哟。。虽然我很喜欢妹子但是真的还是得来个高级的怎么也得成立个前端组，跟老大说了这个意思，好在老大支持我的想法，然后先从别的部门调来一个高手给我缓解压力，还有我们的初级妹子明天也来啦～～～感觉终于快解放了，哭死我了这个月。。。<br>　　嗯。公司的情况大概就介绍到这里吧。反正忙点是忙点，还算充实。通常你忙着忙着会发现：卧槽！今天周五，明天都放假了！哈哈！也挺好的。奥对了还有件大事，我们公司马上搬到东升科技园了，就在8月底，离我三站，超级近的有木有！我寻思着，可以买个拉轰的摩托车上班啦哈啊哈～～～～快点搬吧～～～～～下面贴上我近几天的打卡记录纪念一下<p></p>\n<div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/1502117225.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br><h1 style=\"color:#3a3a3a;\">聚散离合</h1><br>　　每次能比比的必少不了身边这堆损友。这么久了，大家都多少有点变化了。麟爷最终分了手，然后交了新女朋友（前后几乎尼玛没有缓冲期有木有！），老姨有了产品男，大侄最近浪的飞起。只剩下我跟胖子两个人苦苦在单身人海中徘徊。。。哎。。。好过分。。。所以觉得是时候浪一把了，该是忘了大哥的时候了，我爱过，爱的很深，付出很多，但是确实不是适合我的类型，那种跟谁都聊的飞起没玩够的确实不适合我，我投降，所以我退出。对不起没能一起看话剧，对不起没能一起看周杰伦的演唱会，对不起拉黑了你，对不起我会慢慢过去忘了你。我曾经给你说过的所有话都是认真的，现在这些也是，嗯。哎，不开心的不说了，字打在这里她也看不到，其实没啥卵用。。说点高兴的，老姨升了职，大侄找了新工作涨了工资，胖子满了一年也涨了一千块，我这次跳槽当然也涨工资啦（涨多少保密哈哈！），麟爷技术有了长足的发展，大家都在潜移默变，都在慢慢成长。希望我们几年以后甚至十几年几十年以后都还能在一起聚聚，说说我们曾经傻逼的日子。如果你们把我当回事的话，你们的婚礼我一定一个不缺场，嗯，这是一个期望，当然我的你们更是一个不能缺。<br>　　朋友们就比比到这吧，虽然嘴上说着烦你们浪的飞起不会再带你们玩了，但是其实心里还是希望你们好的，有事情的话肯定义不容辞，嗯。最后放上一张我自认为是我们巅峰时期的照片吧^_^哦对忘了说张图大美女，在我们这堆程序猿（媛）里，考研上学的雅静简直就是个另类呀哈哈，希望越变越美布拉布拉。。。。下面，请看照片！<br><div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/161535843694122746.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br><h1 style=\"color:#3a3a3a;\">陪伴了我三个多月的新家庭成员</h1><br>　　该是给大家隆重介绍我家新成员：咋滴了 的时候了o(^▽^)o<del>~</del><del>~</del>4.14出生的咋地了居然跟我一个生日。。。。这踏马简直就为我而生的小猫啊。。。这个小家伙是我在5.1抱回来的，第一次见面都就被这个家伙的颜值深深的折服了。。。真的好萌好可爱啊啊啊，在网友的家里一眼就看中了。。最终花了我1500大洋在跨越了一个北京城从南到北的距离后，终于把这个家伙接回家啦！<br>　　刚进家门的时候还只是怕怕的蹲在地上，缩成一团怕怕的一直盯着我看，在不到一个小时以后，已经开始床上床下蹦个没完没了了= =。 刚抱回家的时候，总盯着我一直叫个不停，出于礼貌我就一直回答他：咋滴啦!然后，然后你们应该知道它的名字是怎么来的吧= =数数，咋地了现在陪我居然超过3个月了，时间是过的真快啊！一开始早上一顿猫粮，晚上一顿奶，夜宵是营养膏，是真的不敢怠慢。后来满了3个月奶给断了一阵，发现这个家伙我一喝牛奶就馋的跟什么似的老跟我抢= =得，看来药不能停，奶不能断啊，还是得继续供着。咋滴了在一堆爸爸妈妈的万千宠爱下到现在也已经茁壮长成一直大猫了（比刚进家那会真的大了不止一点半点。。），上个月14号带他去医院打了第一针驱虫镇。还记得当时一进宠物医院就被围观了，大家都说好可爱好漂亮啊！我这当爸的真的是无比自豪啊！哈哈！嗯，以前这家伙的饭量都是我在控制，一天倒固定的量。后来前一阵子我懒了，早上出门之前直接给倒了满满一盆猫粮，然后，然后几天发现这个家伙肚子真的特么大的吓人啊！身材比例都失调了！为了继续让他保持身材，为了继续能让他给爸爸招来小姐姐。。我决心给他减肥！继续以前一样给他固定量的猫粮，不能再多吃了，特喵的你胖成猪你看我还要不要你。<br>　　这个月14号得带他去打第二针了，嗯，爸爸希望你能茁壮成长，能陪我好久好久。。。。。下面的话就放张咋滴了洗澡的黑人图吧哈哈o(^▽^)o但是讲真，我们家咋地了真的洗澡的时候都贼帅，除了有的时候趴着的姿势贼逗比外没别的毛病。。。话不多说，上图：<br><div align=\"center\" style=\"overflow:hidden;\"><img src=\"../../../../img/2017-8/6043099434676900491.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br><div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/7457428889949857221.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br><div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/8634466565743659081.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br>　　感觉如果咋滴了看见我发的照片一定绝交了。。。哈哈哈哈哈哈。哎哟，行了，比比叨叨的不知不觉码了这么多字了，总之希望自己生活会慢慢更好，我知道人都是想看人家不好，以后我多码点不高兴的给你们看o.0，嗯。目前已经12点了，身边的同志们还在激烈战斗，一张图片结束今天逼到吧，希望忘了没必要的人，希望能追上我喜欢的人！<br><div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/895297467916358534.jpg\" style=\"display:inline-block;vertical-align:top\"></div>\n\n","site":{"data":{}},"excerpt":"<p>摘要:<br>　　好久，好久没有更新一一下自己博客了!最近几个月真的发生了好多事情，多到自己都不知道该从哪里讲起。。。。嗯，有好的事情，也有不好的事情，有些可以讲的事情，还有些必须憋在心里没办法讲的事情。讲真有些事情憋着真的很难受。。哎。。。<br>    <div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/timg.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br>","more":"<br>     <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=476323037&auto=1&height=66\"></iframe><br>正文:</p>\n<p></p><h1 style=\"color:#3a3a3a;\">换了家公司</h1><br>　　嗯就先从自己换了公司这件事情说起吧。对，你们没有猜错，最近小跳了个槽，来到一个现在这个做p2p的公司，规模不小，几千人，已经上市了。公司福利也不错（社保公积金都百分缴，七险一金有木有），每天还有免费的零食跟水果啊，还有每个月一次的生日趴啊之类的。嗯，总之就是公司气氛很不错的说。重点是新公司的团队大家人都很好，什么后台的小伙伴啊，老大啊，部门老板啊，人都超级不错的有木有！虽然是比原来公司忙了点，说到这，我真的要吐槽一下了， 话说真的比原来忙了不是一点半点呀。。。。。基本每天加班到十点以后。。。上次一个大需求做完了还通了个宵。。。。早上才回家。然后大老板给我们研发发了个大红包，我抢了90多哈哈。。。还算是个安慰。。。。然后今天之所以有时间写东西就是因为我们今天又有一个大需求要上线。。嗯。。苦逼吧。。。我来这里快8个星期了。。一直都是我一个前端挑大梁。。后台无数个人对接我一个前端的说。。你们真的好意思嘛。。。老大说一直在给我招人一直在面试。。要招个高级带带我。结果，结果，结果来了个初级的妹子。。哎哟。。虽然我很喜欢妹子但是真的还是得来个高级的怎么也得成立个前端组，跟老大说了这个意思，好在老大支持我的想法，然后先从别的部门调来一个高手给我缓解压力，还有我们的初级妹子明天也来啦～～～感觉终于快解放了，哭死我了这个月。。。<br>　　嗯。公司的情况大概就介绍到这里吧。反正忙点是忙点，还算充实。通常你忙着忙着会发现：卧槽！今天周五，明天都放假了！哈哈！也挺好的。奥对了还有件大事，我们公司马上搬到东升科技园了，就在8月底，离我三站，超级近的有木有！我寻思着，可以买个拉轰的摩托车上班啦哈啊哈～～～～快点搬吧～～～～～下面贴上我近几天的打卡记录纪念一下<p></p>\n<div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/1502117225.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br><h1 style=\"color:#3a3a3a;\">聚散离合</h1><br>　　每次能比比的必少不了身边这堆损友。这么久了，大家都多少有点变化了。麟爷最终分了手，然后交了新女朋友（前后几乎尼玛没有缓冲期有木有！），老姨有了产品男，大侄最近浪的飞起。只剩下我跟胖子两个人苦苦在单身人海中徘徊。。。哎。。。好过分。。。所以觉得是时候浪一把了，该是忘了大哥的时候了，我爱过，爱的很深，付出很多，但是确实不是适合我的类型，那种跟谁都聊的飞起没玩够的确实不适合我，我投降，所以我退出。对不起没能一起看话剧，对不起没能一起看周杰伦的演唱会，对不起拉黑了你，对不起我会慢慢过去忘了你。我曾经给你说过的所有话都是认真的，现在这些也是，嗯。哎，不开心的不说了，字打在这里她也看不到，其实没啥卵用。。说点高兴的，老姨升了职，大侄找了新工作涨了工资，胖子满了一年也涨了一千块，我这次跳槽当然也涨工资啦（涨多少保密哈哈！），麟爷技术有了长足的发展，大家都在潜移默变，都在慢慢成长。希望我们几年以后甚至十几年几十年以后都还能在一起聚聚，说说我们曾经傻逼的日子。如果你们把我当回事的话，你们的婚礼我一定一个不缺场，嗯，这是一个期望，当然我的你们更是一个不能缺。<br>　　朋友们就比比到这吧，虽然嘴上说着烦你们浪的飞起不会再带你们玩了，但是其实心里还是希望你们好的，有事情的话肯定义不容辞，嗯。最后放上一张我自认为是我们巅峰时期的照片吧^_^哦对忘了说张图大美女，在我们这堆程序猿（媛）里，考研上学的雅静简直就是个另类呀哈哈，希望越变越美布拉布拉。。。。下面，请看照片！<br><div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/161535843694122746.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br><h1 style=\"color:#3a3a3a;\">陪伴了我三个多月的新家庭成员</h1><br>　　该是给大家隆重介绍我家新成员：咋滴了 的时候了o(^▽^)o<del>~</del><del>~</del>4.14出生的咋地了居然跟我一个生日。。。。这踏马简直就为我而生的小猫啊。。。这个小家伙是我在5.1抱回来的，第一次见面都就被这个家伙的颜值深深的折服了。。。真的好萌好可爱啊啊啊，在网友的家里一眼就看中了。。最终花了我1500大洋在跨越了一个北京城从南到北的距离后，终于把这个家伙接回家啦！<br>　　刚进家门的时候还只是怕怕的蹲在地上，缩成一团怕怕的一直盯着我看，在不到一个小时以后，已经开始床上床下蹦个没完没了了= =。 刚抱回家的时候，总盯着我一直叫个不停，出于礼貌我就一直回答他：咋滴啦!然后，然后你们应该知道它的名字是怎么来的吧= =数数，咋地了现在陪我居然超过3个月了，时间是过的真快啊！一开始早上一顿猫粮，晚上一顿奶，夜宵是营养膏，是真的不敢怠慢。后来满了3个月奶给断了一阵，发现这个家伙我一喝牛奶就馋的跟什么似的老跟我抢= =得，看来药不能停，奶不能断啊，还是得继续供着。咋滴了在一堆爸爸妈妈的万千宠爱下到现在也已经茁壮长成一直大猫了（比刚进家那会真的大了不止一点半点。。），上个月14号带他去医院打了第一针驱虫镇。还记得当时一进宠物医院就被围观了，大家都说好可爱好漂亮啊！我这当爸的真的是无比自豪啊！哈哈！嗯，以前这家伙的饭量都是我在控制，一天倒固定的量。后来前一阵子我懒了，早上出门之前直接给倒了满满一盆猫粮，然后，然后几天发现这个家伙肚子真的特么大的吓人啊！身材比例都失调了！为了继续让他保持身材，为了继续能让他给爸爸招来小姐姐。。我决心给他减肥！继续以前一样给他固定量的猫粮，不能再多吃了，特喵的你胖成猪你看我还要不要你。<br>　　这个月14号得带他去打第二针了，嗯，爸爸希望你能茁壮成长，能陪我好久好久。。。。。下面的话就放张咋滴了洗澡的黑人图吧哈哈o(^▽^)o但是讲真，我们家咋地了真的洗澡的时候都贼帅，除了有的时候趴着的姿势贼逗比外没别的毛病。。。话不多说，上图：<br><div align=\"center\" style=\"overflow:hidden;\"><img src=\"../../../../img/2017-8/6043099434676900491.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br><div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/7457428889949857221.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br><div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/8634466565743659081.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br>　　感觉如果咋滴了看见我发的照片一定绝交了。。。哈哈哈哈哈哈。哎哟，行了，比比叨叨的不知不觉码了这么多字了，总之希望自己生活会慢慢更好，我知道人都是想看人家不好，以后我多码点不高兴的给你们看o.0，嗯。目前已经12点了，身边的同志们还在激烈战斗，一张图片结束今天逼到吧，希望忘了没必要的人，希望能追上我喜欢的人！<br><div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-8/895297467916358534.jpg\" style=\"display:inline-block;vertical-align:top\"></div>"},{"title":"关于切换选项卡时页面请求在谷歌浏览器下可用，在IE11下假死的问题","date":"2017-02-27T04:01:08.000Z","_content":"摘要:\n    　　问题大概是这样的：在项目里调兼容的时候遇到的一个莫名的问题，页面在谷歌浏览器下完全没问题，但是在IE11下面测试的时候在第一个选项卡切换到第二个选项卡，这个时候没问题可是再切换到第一个选项卡的时候页面就无响应了。\n\n正文:\n    　　问题大概是这样的：在项目里调兼容的时候遇到的一个莫名的问题，页面在谷歌浏览器下完全没问题，但是在IE11下面测试的时候在第一个选项卡切换到第二个选项卡，这个时候没问题可是再切换到第一个选项卡的时候页面就无响应了。\n    　　这里是默认打开页面的时候，默认选项卡为：终端动态图\n    <div align=center>\n    <img src=\"../../../../img/2017-2/20170227122128.jpg\" width=\"400\" height=\"400\" />\n    </div>\n    <!-- more -->\n这里是从第一个选项卡切换到第二个选项卡“终端信息列表”的时候：\n    <div align=center>\n    <img src=\"../../../../img/2017-2/20170227122206.jpg\" width=\"400\" height=\"400\" />\n    </div>\n\n　　然后，问题来了，在这个时候再切换回第一个页面的时候就出问题了，页面无响应，一直停留在第二个选项卡。下面是部分关键js代码，用的bootstrap框架：\n第一个选项卡的js：\n\n    ```\n        $(\".details_ap a[href='#tab_topology_detail']\").click(function(ev){\n            $(this).tab(\"show\");\n            if(navigator.appName == \"Microsoft Internet Explorer\" && navigator.appVersion.match(/8./i)==\"8.\"){\n                tab_1 += 1\n            }\n            if(tab_1 <= 1){\n                ec_graph = echarts.init(document.getElementById(\"ec_graph\"));\n            }\n            clearInterval(timerWhiteGraph);\n            clearInterval(timerWhiteList);\n            showDetails(graphWhite);\n            timerWhiteGraph = setInterval(function(){\n                var _url =  '../../rest/topology/whiteSta?apMac=' + apMac.apMac + '&apMac2=' + apMac.apMac2 + '&apMac5=' + apMac.apMac5;\n                $.get(_url,function(info){\n                    if(info.resultCode == \"0\"){\n                        graphWhite = createNode(info);\n                        showDetails(graphWhite);\n                    }\n                    else{\n                        alert(\"数据异常代码\" + info.resultCode);\n                    }\n                });\n            },30000);\n            var oEvent=ev||event;\n            oEvent.preventDefault();\n        });\n    ```\n　　这里是第二个选项卡的js：\n\n    ```\n            $(\".details_ap a[href='#tab_table_detail']\").click(function(ev){\n                $(this).tab(\"show\");\n                if(tab_2 <= 1){\n\n                }\n                if(navigator.appName == \"Microsoft Internet Explorer\" && navigator.appVersion.match(/8./i)==\"8.\"){\n                    tab_2 += 1;\n                }\n                tableInit(tableUrlWhite);\n                clearInterval(timerWhiteGraph);\n                clearInterval(timerWhiteList);\n                timerWhiteList = setInterval(function(){\n                    tableInit(tableUrlWhite);\n                },30000);\n                var oEvent = ev || event;\n                oEvent.preventDefault();\n            });\n     ```\n　　各位看出来问题在哪了吗。。。我看了很久实在是找不到问题在哪，后来误打误撞翻到了一片文章（ps;后来找不到了= =）说是$.get的方法在请求数据的时候，浏览器要缓存的，就是这个缓存出了问题，第一个页面默认出来就进行get请求，get请求的响应在IE下默认是可以缓存的(响应应该包含一个到期时间, 或者有一个验证器)，页面刚打开缓存，从第二个选项卡切换回来又缓存，两个同时进行就卡死了。。\n    解决方案：很简单，就是把get方法改成post就可以了，因为post默认是不会缓存的。\n    希望此篇日志对大家有帮助o(^▽^)o\n\n","source":"_posts/关于页面在谷歌浏览器下可用，在IE11下假死的问题.md","raw":"---\ntitle: 关于切换选项卡时页面请求在谷歌浏览器下可用，在IE11下假死的问题\ndate: 2017-02-27 12:01:08\ncategories:\n  - 开发\ntags:\n    - 前端\n    - js\n    - 兼容\n---\n摘要:\n    　　问题大概是这样的：在项目里调兼容的时候遇到的一个莫名的问题，页面在谷歌浏览器下完全没问题，但是在IE11下面测试的时候在第一个选项卡切换到第二个选项卡，这个时候没问题可是再切换到第一个选项卡的时候页面就无响应了。\n\n正文:\n    　　问题大概是这样的：在项目里调兼容的时候遇到的一个莫名的问题，页面在谷歌浏览器下完全没问题，但是在IE11下面测试的时候在第一个选项卡切换到第二个选项卡，这个时候没问题可是再切换到第一个选项卡的时候页面就无响应了。\n    　　这里是默认打开页面的时候，默认选项卡为：终端动态图\n    <div align=center>\n    <img src=\"../../../../img/2017-2/20170227122128.jpg\" width=\"400\" height=\"400\" />\n    </div>\n    <!-- more -->\n这里是从第一个选项卡切换到第二个选项卡“终端信息列表”的时候：\n    <div align=center>\n    <img src=\"../../../../img/2017-2/20170227122206.jpg\" width=\"400\" height=\"400\" />\n    </div>\n\n　　然后，问题来了，在这个时候再切换回第一个页面的时候就出问题了，页面无响应，一直停留在第二个选项卡。下面是部分关键js代码，用的bootstrap框架：\n第一个选项卡的js：\n\n    ```\n        $(\".details_ap a[href='#tab_topology_detail']\").click(function(ev){\n            $(this).tab(\"show\");\n            if(navigator.appName == \"Microsoft Internet Explorer\" && navigator.appVersion.match(/8./i)==\"8.\"){\n                tab_1 += 1\n            }\n            if(tab_1 <= 1){\n                ec_graph = echarts.init(document.getElementById(\"ec_graph\"));\n            }\n            clearInterval(timerWhiteGraph);\n            clearInterval(timerWhiteList);\n            showDetails(graphWhite);\n            timerWhiteGraph = setInterval(function(){\n                var _url =  '../../rest/topology/whiteSta?apMac=' + apMac.apMac + '&apMac2=' + apMac.apMac2 + '&apMac5=' + apMac.apMac5;\n                $.get(_url,function(info){\n                    if(info.resultCode == \"0\"){\n                        graphWhite = createNode(info);\n                        showDetails(graphWhite);\n                    }\n                    else{\n                        alert(\"数据异常代码\" + info.resultCode);\n                    }\n                });\n            },30000);\n            var oEvent=ev||event;\n            oEvent.preventDefault();\n        });\n    ```\n　　这里是第二个选项卡的js：\n\n    ```\n            $(\".details_ap a[href='#tab_table_detail']\").click(function(ev){\n                $(this).tab(\"show\");\n                if(tab_2 <= 1){\n\n                }\n                if(navigator.appName == \"Microsoft Internet Explorer\" && navigator.appVersion.match(/8./i)==\"8.\"){\n                    tab_2 += 1;\n                }\n                tableInit(tableUrlWhite);\n                clearInterval(timerWhiteGraph);\n                clearInterval(timerWhiteList);\n                timerWhiteList = setInterval(function(){\n                    tableInit(tableUrlWhite);\n                },30000);\n                var oEvent = ev || event;\n                oEvent.preventDefault();\n            });\n     ```\n　　各位看出来问题在哪了吗。。。我看了很久实在是找不到问题在哪，后来误打误撞翻到了一片文章（ps;后来找不到了= =）说是$.get的方法在请求数据的时候，浏览器要缓存的，就是这个缓存出了问题，第一个页面默认出来就进行get请求，get请求的响应在IE下默认是可以缓存的(响应应该包含一个到期时间, 或者有一个验证器)，页面刚打开缓存，从第二个选项卡切换回来又缓存，两个同时进行就卡死了。。\n    解决方案：很简单，就是把get方法改成post就可以了，因为post默认是不会缓存的。\n    希望此篇日志对大家有帮助o(^▽^)o\n\n","slug":"关于页面在谷歌浏览器下可用，在IE11下假死的问题","published":1,"updated":"2017-09-29T06:39:35.268Z","_id":"cj764c8lt0009w0d04uf7vx3q","comments":1,"layout":"post","photos":[],"link":"","content":"<p>摘要:<br>    　　问题大概是这样的：在项目里调兼容的时候遇到的一个莫名的问题，页面在谷歌浏览器下完全没问题，但是在IE11下面测试的时候在第一个选项卡切换到第二个选项卡，这个时候没问题可是再切换到第一个选项卡的时候页面就无响应了。</p>\n<p>正文:<br>    　　问题大概是这样的：在项目里调兼容的时候遇到的一个莫名的问题，页面在谷歌浏览器下完全没问题，但是在IE11下面测试的时候在第一个选项卡切换到第二个选项卡，这个时候没问题可是再切换到第一个选项卡的时候页面就无响应了。<br>    　　这里是默认打开页面的时候，默认选项卡为：终端动态图<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-2/20170227122128.jpg\" width=\"400\" height=\"400\"><br>    </div><br>    <a id=\"more\"></a><br>这里是从第一个选项卡切换到第二个选项卡“终端信息列表”的时候：<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-2/20170227122206.jpg\" width=\"400\" height=\"400\"><br>    </div></p>\n<p>　　然后，问题来了，在这个时候再切换回第一个页面的时候就出问题了，页面无响应，一直停留在第二个选项卡。下面是部分关键js代码，用的bootstrap框架：<br>第一个选项卡的js：</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\".details_ap a[href='#tab_topology_detail']\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).tab(<span class=\"string\">\"show\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(navigator.appName == <span class=\"string\">\"Microsoft Internet Explorer\"</span> &amp;&amp; navigator.appVersion.match(<span class=\"regexp\">/8./i</span>)==<span class=\"string\">\"8.\"</span>)&#123;</div><div class=\"line\">        tab_1 += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(tab_1 &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        ec_graph = echarts.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"ec_graph\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">    clearInterval(timerWhiteGraph);</div><div class=\"line\">    clearInterval(timerWhiteList);</div><div class=\"line\">    showDetails(graphWhite);</div><div class=\"line\">    timerWhiteGraph = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> _url =  <span class=\"string\">'../../rest/topology/whiteSta?apMac='</span> + apMac.apMac + <span class=\"string\">'&amp;apMac2='</span> + apMac.apMac2 + <span class=\"string\">'&amp;apMac5='</span> + apMac.apMac5;</div><div class=\"line\">        $.get(_url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">info</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(info.resultCode == <span class=\"string\">\"0\"</span>)&#123;</div><div class=\"line\">                graphWhite = createNode(info);</div><div class=\"line\">                showDetails(graphWhite);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                alert(<span class=\"string\">\"数据异常代码\"</span> + info.resultCode);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,<span class=\"number\">30000</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> oEvent=ev||event;</div><div class=\"line\">    oEvent.preventDefault();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</code></pre><p>　　这里是第二个选项卡的js：</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\".details_ap a[href='#tab_table_detail']\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).tab(<span class=\"string\">\"show\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(tab_2 &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(navigator.appName == <span class=\"string\">\"Microsoft Internet Explorer\"</span> &amp;&amp; navigator.appVersion.match(<span class=\"regexp\">/8./i</span>)==<span class=\"string\">\"8.\"</span>)&#123;</div><div class=\"line\">        tab_2 += <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    tableInit(tableUrlWhite);</div><div class=\"line\">    clearInterval(timerWhiteGraph);</div><div class=\"line\">    clearInterval(timerWhiteList);</div><div class=\"line\">    timerWhiteList = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        tableInit(tableUrlWhite);</div><div class=\"line\">    &#125;,<span class=\"number\">30000</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> oEvent = ev || event;</div><div class=\"line\">    oEvent.preventDefault();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</code></pre><p>　　各位看出来问题在哪了吗。。。我看了很久实在是找不到问题在哪，后来误打误撞翻到了一片文章（ps;后来找不到了= =）说是$.get的方法在请求数据的时候，浏览器要缓存的，就是这个缓存出了问题，第一个页面默认出来就进行get请求，get请求的响应在IE下默认是可以缓存的(响应应该包含一个到期时间, 或者有一个验证器)，页面刚打开缓存，从第二个选项卡切换回来又缓存，两个同时进行就卡死了。。<br>    解决方案：很简单，就是把get方法改成post就可以了，因为post默认是不会缓存的。<br>    希望此篇日志对大家有帮助o(^▽^)o</p>\n","site":{"data":{}},"excerpt":"<p>摘要:<br>    　　问题大概是这样的：在项目里调兼容的时候遇到的一个莫名的问题，页面在谷歌浏览器下完全没问题，但是在IE11下面测试的时候在第一个选项卡切换到第二个选项卡，这个时候没问题可是再切换到第一个选项卡的时候页面就无响应了。</p>\n<p>正文:<br>    　　问题大概是这样的：在项目里调兼容的时候遇到的一个莫名的问题，页面在谷歌浏览器下完全没问题，但是在IE11下面测试的时候在第一个选项卡切换到第二个选项卡，这个时候没问题可是再切换到第一个选项卡的时候页面就无响应了。<br>    　　这里是默认打开页面的时候，默认选项卡为：终端动态图<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-2/20170227122128.jpg\" width=\"400\" height=\"400\"><br>    </div><br>","more":"<br>这里是从第一个选项卡切换到第二个选项卡“终端信息列表”的时候：<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-2/20170227122206.jpg\" width=\"400\" height=\"400\"><br>    </div></p>\n<p>　　然后，问题来了，在这个时候再切换回第一个页面的时候就出问题了，页面无响应，一直停留在第二个选项卡。下面是部分关键js代码，用的bootstrap框架：<br>第一个选项卡的js：</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\".details_ap a[href='#tab_topology_detail']\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).tab(<span class=\"string\">\"show\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(navigator.appName == <span class=\"string\">\"Microsoft Internet Explorer\"</span> &amp;&amp; navigator.appVersion.match(<span class=\"regexp\">/8./i</span>)==<span class=\"string\">\"8.\"</span>)&#123;</div><div class=\"line\">        tab_1 += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(tab_1 &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        ec_graph = echarts.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"ec_graph\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">    clearInterval(timerWhiteGraph);</div><div class=\"line\">    clearInterval(timerWhiteList);</div><div class=\"line\">    showDetails(graphWhite);</div><div class=\"line\">    timerWhiteGraph = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> _url =  <span class=\"string\">'../../rest/topology/whiteSta?apMac='</span> + apMac.apMac + <span class=\"string\">'&amp;apMac2='</span> + apMac.apMac2 + <span class=\"string\">'&amp;apMac5='</span> + apMac.apMac5;</div><div class=\"line\">        $.get(_url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">info</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(info.resultCode == <span class=\"string\">\"0\"</span>)&#123;</div><div class=\"line\">                graphWhite = createNode(info);</div><div class=\"line\">                showDetails(graphWhite);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                alert(<span class=\"string\">\"数据异常代码\"</span> + info.resultCode);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,<span class=\"number\">30000</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> oEvent=ev||event;</div><div class=\"line\">    oEvent.preventDefault();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</code></pre><p>　　这里是第二个选项卡的js：</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\".details_ap a[href='#tab_table_detail']\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).tab(<span class=\"string\">\"show\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(tab_2 &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(navigator.appName == <span class=\"string\">\"Microsoft Internet Explorer\"</span> &amp;&amp; navigator.appVersion.match(<span class=\"regexp\">/8./i</span>)==<span class=\"string\">\"8.\"</span>)&#123;</div><div class=\"line\">        tab_2 += <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    tableInit(tableUrlWhite);</div><div class=\"line\">    clearInterval(timerWhiteGraph);</div><div class=\"line\">    clearInterval(timerWhiteList);</div><div class=\"line\">    timerWhiteList = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        tableInit(tableUrlWhite);</div><div class=\"line\">    &#125;,<span class=\"number\">30000</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> oEvent = ev || event;</div><div class=\"line\">    oEvent.preventDefault();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</code></pre><p>　　各位看出来问题在哪了吗。。。我看了很久实在是找不到问题在哪，后来误打误撞翻到了一片文章（ps;后来找不到了= =）说是$.get的方法在请求数据的时候，浏览器要缓存的，就是这个缓存出了问题，第一个页面默认出来就进行get请求，get请求的响应在IE下默认是可以缓存的(响应应该包含一个到期时间, 或者有一个验证器)，页面刚打开缓存，从第二个选项卡切换回来又缓存，两个同时进行就卡死了。。<br>    解决方案：很简单，就是把get方法改成post就可以了，因为post默认是不会缓存的。<br>    希望此篇日志对大家有帮助o(^▽^)o</p>"},{"title":"关于ajax如何提交照片等file类型的文件","date":"2017-03-29T02:54:50.000Z","_content":"摘要:\n    　　好久没有更新博文了。。。感觉是时候分享一波小技术了o(^▽^)o，嗯今天就分享一个关于项目中如何用ajax上传图片的小知识。。你准备好了吗。。。？？\n    <div align=center>\n    <img src=\"../../../../img/2017-3/6aa2976egx6CHgSChhS88&690.jpg\" width=\"700\" height=\"500\" />\n    </div>\n    <!-- more -->\n正文：\n    　　问题是这样的，项目里遇到一个表格里添加一行的操作，所以这个没有办法用表单提交，别的都好好说，用ajax传一个json字符串给后台就好了，但是这个图片就没办法跟json字符串一块传过去了。所以网上找到了这个方法，觉得写的很好很常用，所以还是写在自己的博客里方便分享。话不多说直接上代码：\n```\n     var formData = new FormData();\n     formData.append('file', $('#up_img_add')[0].files[0]);\n     $.ajax({\n         url: \"../../rest/group/upload\",\n         method: \"POST\",\n         async: false,\n         contentType: false,\n         processData: false, //必须false才会自动加上正确的Content-Type,\n         data: formData,\n         success: function (data) {\n             console.log(data);\n             equipGroup.image = data;\n         }\n     });\n\n```\n　　这里首先创建一个FormData()对象，一开始不知道，百度一下才知道FormData()这个对象真的是个好东西，可以保存的东西有名为\"username\"，\"accountnum\"，\"userfile\" 以及 \"webmasterfile\" 的字段名，字段 \"userfile\" 和 \"webmasterfile\" 的值都包含了一个文件，\"accountnum\" 的数字被自动转换为字符，\"webmasterfile\" 字段的值不是一个字符串,还是一个 Blob 对象。例：\n```\n     var oMyForm = new FormData();\n\n     oMyForm.append(\"username\", \"Groucho\");\n     oMyForm.append(\"accountnum\", 123456); // 数字123456被立即转换成字符串\"123456\"\n\n     // fileInputElement中已经包含了用户所选择的文件\n     oMyForm.append(\"userfile\", fileInputElement.files[0]);\n\n     var oFileBody = \"<a id=\"a\"><b id=\"b\">hey!</b></a>\"; // Blob对象包含的文件内容\n     var oBlob = new Blob([oFileBody], { type: \"text/xml\"});\n\n     oMyForm.append(\"webmasterfile\", oBlob);\n```\n　　用 formData.append('file', $('#up_img_add')[0].files[0])这个给创建的formData对象插入你要上传的input标签的files值，然后就可以用ajax上传啦！但是上传的时候要注意两点：\n　　1.contentType: false, processData: false, 这两句话一定要加上，不然jquery的ajax会默认给你加上错误的头部type类型。\n　　2.data这个字段是不需要定义的，加上之后会发生意想不到的错误。\n　　然后后台接收到图片以后会保存在一个目录下面，然后把这个目录的url地址返回给我们，我们就可以调用啦！大功告成~\n　　<div align=center>\n    <img src=\"../../../../img/2017-3/ChMkJlcZuB-ILohjABj4B9nSpLsAAQZdAG1MEUAGPgf978.jpg\" width=\"700\" height=\"500\" />\n    </div>\n","source":"_posts/关于ajax如何提交照片等file类型的文件.md","raw":"---\ntitle: 关于ajax如何提交照片等file类型的文件\ndate: 2017-03-29 10:54:50\ncategories:\n  - 开发\ntags:\n    - 前端\n    - 文件上传\n    - ajax\n---\n摘要:\n    　　好久没有更新博文了。。。感觉是时候分享一波小技术了o(^▽^)o，嗯今天就分享一个关于项目中如何用ajax上传图片的小知识。。你准备好了吗。。。？？\n    <div align=center>\n    <img src=\"../../../../img/2017-3/6aa2976egx6CHgSChhS88&690.jpg\" width=\"700\" height=\"500\" />\n    </div>\n    <!-- more -->\n正文：\n    　　问题是这样的，项目里遇到一个表格里添加一行的操作，所以这个没有办法用表单提交，别的都好好说，用ajax传一个json字符串给后台就好了，但是这个图片就没办法跟json字符串一块传过去了。所以网上找到了这个方法，觉得写的很好很常用，所以还是写在自己的博客里方便分享。话不多说直接上代码：\n```\n     var formData = new FormData();\n     formData.append('file', $('#up_img_add')[0].files[0]);\n     $.ajax({\n         url: \"../../rest/group/upload\",\n         method: \"POST\",\n         async: false,\n         contentType: false,\n         processData: false, //必须false才会自动加上正确的Content-Type,\n         data: formData,\n         success: function (data) {\n             console.log(data);\n             equipGroup.image = data;\n         }\n     });\n\n```\n　　这里首先创建一个FormData()对象，一开始不知道，百度一下才知道FormData()这个对象真的是个好东西，可以保存的东西有名为\"username\"，\"accountnum\"，\"userfile\" 以及 \"webmasterfile\" 的字段名，字段 \"userfile\" 和 \"webmasterfile\" 的值都包含了一个文件，\"accountnum\" 的数字被自动转换为字符，\"webmasterfile\" 字段的值不是一个字符串,还是一个 Blob 对象。例：\n```\n     var oMyForm = new FormData();\n\n     oMyForm.append(\"username\", \"Groucho\");\n     oMyForm.append(\"accountnum\", 123456); // 数字123456被立即转换成字符串\"123456\"\n\n     // fileInputElement中已经包含了用户所选择的文件\n     oMyForm.append(\"userfile\", fileInputElement.files[0]);\n\n     var oFileBody = \"<a id=\"a\"><b id=\"b\">hey!</b></a>\"; // Blob对象包含的文件内容\n     var oBlob = new Blob([oFileBody], { type: \"text/xml\"});\n\n     oMyForm.append(\"webmasterfile\", oBlob);\n```\n　　用 formData.append('file', $('#up_img_add')[0].files[0])这个给创建的formData对象插入你要上传的input标签的files值，然后就可以用ajax上传啦！但是上传的时候要注意两点：\n　　1.contentType: false, processData: false, 这两句话一定要加上，不然jquery的ajax会默认给你加上错误的头部type类型。\n　　2.data这个字段是不需要定义的，加上之后会发生意想不到的错误。\n　　然后后台接收到图片以后会保存在一个目录下面，然后把这个目录的url地址返回给我们，我们就可以调用啦！大功告成~\n　　<div align=center>\n    <img src=\"../../../../img/2017-3/ChMkJlcZuB-ILohjABj4B9nSpLsAAQZdAG1MEUAGPgf978.jpg\" width=\"700\" height=\"500\" />\n    </div>\n","slug":"关于ajax如何提交照片等file类型的文件","published":1,"updated":"2017-09-29T06:39:35.263Z","_id":"cj764c8lv000bw0d0adq0s9qx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>摘要:<br>    　　好久没有更新博文了。。。感觉是时候分享一波小技术了o(^▽^)o，嗯今天就分享一个关于项目中如何用ajax上传图片的小知识。。你准备好了吗。。。？？<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-3/6aa2976egx6CHgSChhS88&690.jpg\" width=\"700\" height=\"500\"><br>    </div><br>    <a id=\"more\"></a><br>正文：<br>    　　问题是这样的，项目里遇到一个表格里添加一行的操作，所以这个没有办法用表单提交，别的都好好说，用ajax传一个json字符串给后台就好了，但是这个图片就没办法跟json字符串一块传过去了。所以网上找到了这个方法，觉得写的很好很常用，所以还是写在自己的博客里方便分享。话不多说直接上代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\">formData.append(<span class=\"string\">'file'</span>, $(<span class=\"string\">'#up_img_add'</span>)[<span class=\"number\">0</span>].files[<span class=\"number\">0</span>]);</div><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">    url: <span class=\"string\">\"../../rest/group/upload\"</span>,</div><div class=\"line\">    method: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">    <span class=\"keyword\">async</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    contentType: <span class=\"literal\">false</span>,</div><div class=\"line\">    processData: <span class=\"literal\">false</span>, <span class=\"comment\">//必须false才会自动加上正确的Content-Type,</span></div><div class=\"line\">    data: formData,</div><div class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">        equipGroup.image = data;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>　　这里首先创建一个FormData()对象，一开始不知道，百度一下才知道FormData()这个对象真的是个好东西，可以保存的东西有名为”username”，”accountnum”，”userfile” 以及 “webmasterfile” 的字段名，字段 “userfile” 和 “webmasterfile” 的值都包含了一个文件，”accountnum” 的数字被自动转换为字符，”webmasterfile” 字段的值不是一个字符串,还是一个 Blob 对象。例：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oMyForm = <span class=\"built_in\">new</span> FormData();</div><div class=\"line\"></div><div class=\"line\">oMyForm.<span class=\"built_in\">append</span>(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"Groucho\"</span>);</div><div class=\"line\">oMyForm.<span class=\"built_in\">append</span>(<span class=\"string\">\"accountnum\"</span>, <span class=\"number\">123456</span>); <span class=\"comment\">// 数字123456被立即转换成字符串\"123456\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// fileInputElement中已经包含了用户所选择的文件</span></div><div class=\"line\">oMyForm.<span class=\"built_in\">append</span>(<span class=\"string\">\"userfile\"</span>, fileInputElement.files[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> oFileBody = <span class=\"string\">\"&lt;a id=\"</span>a<span class=\"string\">\"&gt;&lt;b id=\"</span>b<span class=\"string\">\"&gt;hey!&lt;/b&gt;&lt;/a&gt;\"</span>; <span class=\"comment\">// Blob对象包含的文件内容</span></div><div class=\"line\"><span class=\"keyword\">var</span> oBlob = <span class=\"built_in\">new</span> Blob([oFileBody], &#123; <span class=\"keyword\">type</span>: <span class=\"string\">\"text/xml\"</span>&#125;);</div><div class=\"line\"></div><div class=\"line\">oMyForm.<span class=\"built_in\">append</span>(<span class=\"string\">\"webmasterfile\"</span>, oBlob);</div></pre></td></tr></table></figure></p>\n<p>　　用 formData.append(‘file’, $(‘#up_img_add’)[0].files[0])这个给创建的formData对象插入你要上传的input标签的files值，然后就可以用ajax上传啦！但是上传的时候要注意两点：<br>　　1.contentType: false, processData: false, 这两句话一定要加上，不然jquery的ajax会默认给你加上错误的头部type类型。<br>　　2.data这个字段是不需要定义的，加上之后会发生意想不到的错误。<br>　　然后后台接收到图片以后会保存在一个目录下面，然后把这个目录的url地址返回给我们，我们就可以调用啦！大功告成~<br>　　<div align=\"center\"><br>    <img src=\"../../../../img/2017-3/ChMkJlcZuB-ILohjABj4B9nSpLsAAQZdAG1MEUAGPgf978.jpg\" width=\"700\" height=\"500\"><br>    </div></p>\n","site":{"data":{}},"excerpt":"<p>摘要:<br>    　　好久没有更新博文了。。。感觉是时候分享一波小技术了o(^▽^)o，嗯今天就分享一个关于项目中如何用ajax上传图片的小知识。。你准备好了吗。。。？？<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-3/6aa2976egx6CHgSChhS88&690.jpg\" width=\"700\" height=\"500\"><br>    </div><br>","more":"<br>正文：<br>    　　问题是这样的，项目里遇到一个表格里添加一行的操作，所以这个没有办法用表单提交，别的都好好说，用ajax传一个json字符串给后台就好了，但是这个图片就没办法跟json字符串一块传过去了。所以网上找到了这个方法，觉得写的很好很常用，所以还是写在自己的博客里方便分享。话不多说直接上代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\">formData.append(<span class=\"string\">'file'</span>, $(<span class=\"string\">'#up_img_add'</span>)[<span class=\"number\">0</span>].files[<span class=\"number\">0</span>]);</div><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">    url: <span class=\"string\">\"../../rest/group/upload\"</span>,</div><div class=\"line\">    method: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">    <span class=\"keyword\">async</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    contentType: <span class=\"literal\">false</span>,</div><div class=\"line\">    processData: <span class=\"literal\">false</span>, <span class=\"comment\">//必须false才会自动加上正确的Content-Type,</span></div><div class=\"line\">    data: formData,</div><div class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">        equipGroup.image = data;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>　　这里首先创建一个FormData()对象，一开始不知道，百度一下才知道FormData()这个对象真的是个好东西，可以保存的东西有名为”username”，”accountnum”，”userfile” 以及 “webmasterfile” 的字段名，字段 “userfile” 和 “webmasterfile” 的值都包含了一个文件，”accountnum” 的数字被自动转换为字符，”webmasterfile” 字段的值不是一个字符串,还是一个 Blob 对象。例：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oMyForm = <span class=\"built_in\">new</span> FormData();</div><div class=\"line\"></div><div class=\"line\">oMyForm.<span class=\"built_in\">append</span>(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"Groucho\"</span>);</div><div class=\"line\">oMyForm.<span class=\"built_in\">append</span>(<span class=\"string\">\"accountnum\"</span>, <span class=\"number\">123456</span>); <span class=\"comment\">// 数字123456被立即转换成字符串\"123456\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// fileInputElement中已经包含了用户所选择的文件</span></div><div class=\"line\">oMyForm.<span class=\"built_in\">append</span>(<span class=\"string\">\"userfile\"</span>, fileInputElement.files[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> oFileBody = <span class=\"string\">\"&lt;a id=\"</span>a<span class=\"string\">\"&gt;&lt;b id=\"</span>b<span class=\"string\">\"&gt;hey!&lt;/b&gt;&lt;/a&gt;\"</span>; <span class=\"comment\">// Blob对象包含的文件内容</span></div><div class=\"line\"><span class=\"keyword\">var</span> oBlob = <span class=\"built_in\">new</span> Blob([oFileBody], &#123; <span class=\"keyword\">type</span>: <span class=\"string\">\"text/xml\"</span>&#125;);</div><div class=\"line\"></div><div class=\"line\">oMyForm.<span class=\"built_in\">append</span>(<span class=\"string\">\"webmasterfile\"</span>, oBlob);</div></pre></td></tr></table></figure></p>\n<p>　　用 formData.append(‘file’, $(‘#up_img_add’)[0].files[0])这个给创建的formData对象插入你要上传的input标签的files值，然后就可以用ajax上传啦！但是上传的时候要注意两点：<br>　　1.contentType: false, processData: false, 这两句话一定要加上，不然jquery的ajax会默认给你加上错误的头部type类型。<br>　　2.data这个字段是不需要定义的，加上之后会发生意想不到的错误。<br>　　然后后台接收到图片以后会保存在一个目录下面，然后把这个目录的url地址返回给我们，我们就可以调用啦！大功告成~<br>　　<div align=\"center\"><br>    <img src=\"../../../../img/2017-3/ChMkJlcZuB-ILohjABj4B9nSpLsAAQZdAG1MEUAGPgf978.jpg\" width=\"700\" height=\"500\"><br>    </div></p>"},{"title":"在node.js下用mongoose简单的操作mongoDB面向文档","date":"2017-05-02T02:56:47.000Z","_content":"摘要:\n    　　MongoDB是一个面向文档的数据库，它非常适合Node.js应用以及云端部署，因为MySql以及PostgreSql是根据固定的结构设计将数据存储在不同的表之中，而MongoDB可以将任意类型的文档数据储存到集合之中，这也是MongoDB最有意思的特性之一。所以今天就安利一波如何用node.js操作MongoDB数据库。\n    <div align=center style=\"height:200px;\">\n    <img src=\"../../../../img/2017-5/timg.jpg\" width=\"585\" height=\"192\" />\n    </div>\n    <!-- more -->\n正文:\n　　要在node.js中操作MongoDB，我们首先要选择一个方便我们操作的node的插件，比较常用的插件有两种，分别是'mongodb'与'mongoose'。这里我推荐使用mongoose，因为他是根据mongodb封装的一个插件，使用起来更方便，操作起来也更简洁。\n　　首先我们要在node中安装mongoose，在跟git bash中输入\n```\nnpm install mongoose --save\n```\n当然如果你安装了淘宝镜像，那么使用cnpm更好。接下来我们在node.js项目中新建一个server.js文件，然后在其中输入依赖：\n```\nvar mongoose = require('mongoose');\n```\n这样我们就引入了mongoose这个插件，接下来我们需要利用这个插件来连接数据库\n```\nmongoose.connect('mongodb://localhost:my-website')\n```\n这里注意了，'my-website'是你在MongoDB中的数据库的名称，如果数据库中没有这个名字的话，那么MongoDB会自动新建一个名字为'my-website'的数据库并连接。\n然后我们建立一个数据模型，这个模型建立可以在文件任意位置定义，无所谓Mongoose是否已经与数据库连接,这里我们模拟建立一个用户注册的模型，包含用户的名字，信箱，以及密码信息。\n```\nvar Schema = mongoose.Schema;\nvar user = mongoose.model('User',new Schema({\n    first:String,\n    last:String,\n    email:{type:String, unique:true,\n    password:{type:String, index:true}}}))\n```\n这里我们设置了所有的字段类型都是string类型，email的字段我们设置为唯一不可重复。然后添加新的数据到MongoDB,我们调用save的方法：\n```\nvar user = new User(req.body.user).save(function (err) {\n        if(err) return next(err);\n        console.log(user);\n        //成功存入后的方法;\n    })\n```\n这里要注意我们传的参数req.body.user里面的字段要与我们创建的模型User里面的字段名字相匹配。接下来是查询的方法findOne：\n```\n User.findOne({email:req.body.user.email,password:req.body.user.password},function (err, doc) {\n        if(err) throw err;\n        if(!doc) return res.send(\"<p>user is not found! please go back an try again</p>\")\n        console.log(doc);\n        req.session.loggedIn = doc._id;\n        res.redirect('/');\n    })\n```\n如果查询成功，函数会成功返回一个doc，里面包含了我们查询到的相关信息，这里我要重点给大家介绍一下doc_id这个东西，doc_id是在存储的时候MongoDB自动创建的唯一标识id，方便于我们操作，有一点要注意这个ID是ObjectID类型的。具体查询方法如下：\n```\n User.findById(req.session.loggedIn , function (err, doc) {\n            if(err) return next(err)\n            console.log(doc);\n            app.locals={me:doc};\n            next();\n        })\n```\n这里req.session.loggedIn就是我们存储的doc_id，根据这个id查询出的信息都是唯一的。\n\n下面给大家分享一段我一个模拟登陆注册的server.js的代码：\n```\nvar express = require('express'),\n    bodyParer = require('body-parser'),\n    jade = require('jade'),\n    cookieParser = require('cookie-parser'),\n    mongodb = require('mongodb'),\n    http = require('http'),\n    session = require('express-session'),\n    ObjectID = require('mongodb').ObjectID,\n    mongoose = require('mongoose');\n/**\n * 创建中间件以及一些中间件需要用到的插件\n */\nvar app = express();\n\napp.use(bodyParer.urlencoded({extended:true}));\napp.use(cookieParser())\napp.use(session({\n    resave:false,\n    saveUninitialized:false,\n    secret: 'keyboard cat'\n}))\n\n/**\n * 定义模板引擎\n */\napp.set(\"view engine\",\"jade\");\napp.set('views',\"./views\")\n\n/**\n * 连接数据库\n */\nmongoose.connect('mongodb://localhost/my-website')\n\n/**\n * 定义模板\n */\nvar Schema = mongoose.Schema;\nvar User = mongoose.model('user',new Schema({\n    first:String,\n    last:String,\n    email:{type:String,unique:true},\n    password:{type:String,index:true}\n}))\n\n/**\n * 登陆状态的验证的通用路由\n */\napp.use(function (req, res, next) {\n    if(req.session.loggedIn){\n        res.locals = {authenticated:true}\n        console.log(req.session.loggedIn)\n       User.findById(req.session.loggedIn , function (err, doc) {\n            if(err) return next(err)\n            console.log(doc);\n            app.locals={me:doc};\n            next();\n        })\n    }\n    else{\n        app.locals = {authenticated:false}\n        next();\n    }\n})\n/**\n * 主页路由\n */\napp.get('/',function (req, res, next) {\n    res.render('index');\n})\napp.get('/login/:signupEmail',function (req, res, next) { //这里允许主页接收一个参数\n    res.render('login',{signupEmail:req.params.signupEmail})\n})\n/**\n * 登陆路由模块\n */\napp.get('/login/',function (req, res, next) {\n    res.render('login')\n})\napp.post('/login',function (req, res,next) {\n    User.findOne({email:req.body.user.email,password:req.body.user.password},function (err, doc) {//验证登陆账号密码\n        if(err) throw err;\n        if(!doc) return res.send(\"<p>user is not found! please go back an try again</p>\")\n        console.log(doc);\n        req.session.loggedIn = doc._id;\n        res.redirect('/');\n    })\n})\n/**\n * 注册路由模块\n */\napp.get('/signup',function (req, res) {\n    res.render('signup')\n})\napp.post('/signup',function (req, res) {\n    console.log(req.body);\n    var user = new User(req.body.user).save(function (err) {//注册信息保存到MongoDB数据库\n        if(err) return next(err);\n        console.log(user);\n        res.redirect('/login/' + req.body.user.email);\n    })\n})\n/**\n * 登出操作\n */\napp.get('/logout',function (req, res) {\n    req.session.loggedIn = null;\n    res.redirect('/')\n})\n\nhttp.createServer(app).listen(3000);\n```\n　　希望我的分享对大家有帮助哦o(^▽^)o本文原创欢迎转载~~~~~~~~~~~~\n\n　　","source":"_posts/在node-js下用mongoose简单的操作mongoDB面向文档.md","raw":"---\ntitle: 在node.js下用mongoose简单的操作mongoDB面向文档\ndate: 2017-05-02 10:56:47\ncategories:\n  - 开发\ntags:\n    - 前端\n    - mongoDB\n    - node.js\n---\n摘要:\n    　　MongoDB是一个面向文档的数据库，它非常适合Node.js应用以及云端部署，因为MySql以及PostgreSql是根据固定的结构设计将数据存储在不同的表之中，而MongoDB可以将任意类型的文档数据储存到集合之中，这也是MongoDB最有意思的特性之一。所以今天就安利一波如何用node.js操作MongoDB数据库。\n    <div align=center style=\"height:200px;\">\n    <img src=\"../../../../img/2017-5/timg.jpg\" width=\"585\" height=\"192\" />\n    </div>\n    <!-- more -->\n正文:\n　　要在node.js中操作MongoDB，我们首先要选择一个方便我们操作的node的插件，比较常用的插件有两种，分别是'mongodb'与'mongoose'。这里我推荐使用mongoose，因为他是根据mongodb封装的一个插件，使用起来更方便，操作起来也更简洁。\n　　首先我们要在node中安装mongoose，在跟git bash中输入\n```\nnpm install mongoose --save\n```\n当然如果你安装了淘宝镜像，那么使用cnpm更好。接下来我们在node.js项目中新建一个server.js文件，然后在其中输入依赖：\n```\nvar mongoose = require('mongoose');\n```\n这样我们就引入了mongoose这个插件，接下来我们需要利用这个插件来连接数据库\n```\nmongoose.connect('mongodb://localhost:my-website')\n```\n这里注意了，'my-website'是你在MongoDB中的数据库的名称，如果数据库中没有这个名字的话，那么MongoDB会自动新建一个名字为'my-website'的数据库并连接。\n然后我们建立一个数据模型，这个模型建立可以在文件任意位置定义，无所谓Mongoose是否已经与数据库连接,这里我们模拟建立一个用户注册的模型，包含用户的名字，信箱，以及密码信息。\n```\nvar Schema = mongoose.Schema;\nvar user = mongoose.model('User',new Schema({\n    first:String,\n    last:String,\n    email:{type:String, unique:true,\n    password:{type:String, index:true}}}))\n```\n这里我们设置了所有的字段类型都是string类型，email的字段我们设置为唯一不可重复。然后添加新的数据到MongoDB,我们调用save的方法：\n```\nvar user = new User(req.body.user).save(function (err) {\n        if(err) return next(err);\n        console.log(user);\n        //成功存入后的方法;\n    })\n```\n这里要注意我们传的参数req.body.user里面的字段要与我们创建的模型User里面的字段名字相匹配。接下来是查询的方法findOne：\n```\n User.findOne({email:req.body.user.email,password:req.body.user.password},function (err, doc) {\n        if(err) throw err;\n        if(!doc) return res.send(\"<p>user is not found! please go back an try again</p>\")\n        console.log(doc);\n        req.session.loggedIn = doc._id;\n        res.redirect('/');\n    })\n```\n如果查询成功，函数会成功返回一个doc，里面包含了我们查询到的相关信息，这里我要重点给大家介绍一下doc_id这个东西，doc_id是在存储的时候MongoDB自动创建的唯一标识id，方便于我们操作，有一点要注意这个ID是ObjectID类型的。具体查询方法如下：\n```\n User.findById(req.session.loggedIn , function (err, doc) {\n            if(err) return next(err)\n            console.log(doc);\n            app.locals={me:doc};\n            next();\n        })\n```\n这里req.session.loggedIn就是我们存储的doc_id，根据这个id查询出的信息都是唯一的。\n\n下面给大家分享一段我一个模拟登陆注册的server.js的代码：\n```\nvar express = require('express'),\n    bodyParer = require('body-parser'),\n    jade = require('jade'),\n    cookieParser = require('cookie-parser'),\n    mongodb = require('mongodb'),\n    http = require('http'),\n    session = require('express-session'),\n    ObjectID = require('mongodb').ObjectID,\n    mongoose = require('mongoose');\n/**\n * 创建中间件以及一些中间件需要用到的插件\n */\nvar app = express();\n\napp.use(bodyParer.urlencoded({extended:true}));\napp.use(cookieParser())\napp.use(session({\n    resave:false,\n    saveUninitialized:false,\n    secret: 'keyboard cat'\n}))\n\n/**\n * 定义模板引擎\n */\napp.set(\"view engine\",\"jade\");\napp.set('views',\"./views\")\n\n/**\n * 连接数据库\n */\nmongoose.connect('mongodb://localhost/my-website')\n\n/**\n * 定义模板\n */\nvar Schema = mongoose.Schema;\nvar User = mongoose.model('user',new Schema({\n    first:String,\n    last:String,\n    email:{type:String,unique:true},\n    password:{type:String,index:true}\n}))\n\n/**\n * 登陆状态的验证的通用路由\n */\napp.use(function (req, res, next) {\n    if(req.session.loggedIn){\n        res.locals = {authenticated:true}\n        console.log(req.session.loggedIn)\n       User.findById(req.session.loggedIn , function (err, doc) {\n            if(err) return next(err)\n            console.log(doc);\n            app.locals={me:doc};\n            next();\n        })\n    }\n    else{\n        app.locals = {authenticated:false}\n        next();\n    }\n})\n/**\n * 主页路由\n */\napp.get('/',function (req, res, next) {\n    res.render('index');\n})\napp.get('/login/:signupEmail',function (req, res, next) { //这里允许主页接收一个参数\n    res.render('login',{signupEmail:req.params.signupEmail})\n})\n/**\n * 登陆路由模块\n */\napp.get('/login/',function (req, res, next) {\n    res.render('login')\n})\napp.post('/login',function (req, res,next) {\n    User.findOne({email:req.body.user.email,password:req.body.user.password},function (err, doc) {//验证登陆账号密码\n        if(err) throw err;\n        if(!doc) return res.send(\"<p>user is not found! please go back an try again</p>\")\n        console.log(doc);\n        req.session.loggedIn = doc._id;\n        res.redirect('/');\n    })\n})\n/**\n * 注册路由模块\n */\napp.get('/signup',function (req, res) {\n    res.render('signup')\n})\napp.post('/signup',function (req, res) {\n    console.log(req.body);\n    var user = new User(req.body.user).save(function (err) {//注册信息保存到MongoDB数据库\n        if(err) return next(err);\n        console.log(user);\n        res.redirect('/login/' + req.body.user.email);\n    })\n})\n/**\n * 登出操作\n */\napp.get('/logout',function (req, res) {\n    req.session.loggedIn = null;\n    res.redirect('/')\n})\n\nhttp.createServer(app).listen(3000);\n```\n　　希望我的分享对大家有帮助哦o(^▽^)o本文原创欢迎转载~~~~~~~~~~~~\n\n　　","slug":"在node-js下用mongoose简单的操作mongoDB面向文档","published":1,"updated":"2017-09-29T06:39:35.271Z","_id":"cj764c8lx000ew0d0h48i9cog","comments":1,"layout":"post","photos":[],"link":"","content":"<p>摘要:<br>    　　MongoDB是一个面向文档的数据库，它非常适合Node.js应用以及云端部署，因为MySql以及PostgreSql是根据固定的结构设计将数据存储在不同的表之中，而MongoDB可以将任意类型的文档数据储存到集合之中，这也是MongoDB最有意思的特性之一。所以今天就安利一波如何用node.js操作MongoDB数据库。<br>    <div align=\"center\" style=\"height:200px;\"><br>    <img src=\"../../../../img/2017-5/timg.jpg\" width=\"585\" height=\"192\"><br>    </div><br>    <a id=\"more\"></a><br>正文:<br>　　要在node.js中操作MongoDB，我们首先要选择一个方便我们操作的node的插件，比较常用的插件有两种，分别是’mongodb’与’mongoose’。这里我推荐使用mongoose，因为他是根据mongodb封装的一个插件，使用起来更方便，操作起来也更简洁。<br>　　首先我们要在node中安装mongoose，在跟git bash中输入<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> mongoose <span class=\"comment\">--save</span></div></pre></td></tr></table></figure></p>\n<p>当然如果你安装了淘宝镜像，那么使用cnpm更好。接下来我们在node.js项目中新建一个server.js文件，然后在其中输入依赖：<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">var mongoose</span> = require(<span class=\"string\">'mongoose'</span>);</div></pre></td></tr></table></figure></p>\n<p>这样我们就引入了mongoose这个插件，接下来我们需要利用这个插件来连接数据库<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongoose.<span class=\"built_in\">connect</span>(<span class=\"string\">'mongodb://localhost:my-website'</span>)</div></pre></td></tr></table></figure></p>\n<p>这里注意了，’my-website’是你在MongoDB中的数据库的名称，如果数据库中没有这个名字的话，那么MongoDB会自动新建一个名字为’my-website’的数据库并连接。<br>然后我们建立一个数据模型，这个模型建立可以在文件任意位置定义，无所谓Mongoose是否已经与数据库连接,这里我们模拟建立一个用户注册的模型，包含用户的名字，信箱，以及密码信息。<br><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">var</span> Schema = mongoose.Schema;</div><div class=\"line\"><span class=\"built_in\">var</span> user = mongoose.model(<span class=\"string\">'User'</span>,<span class=\"literal\">new</span> Schema(&#123;</div><div class=\"line\">    first:<span class=\"built_in\">String</span>,</div><div class=\"line\">    last:<span class=\"built_in\">String</span>,</div><div class=\"line\">    email:&#123;<span class=\"keyword\">type</span>:<span class=\"built_in\">String</span>, unique:<span class=\"literal\">true</span>,</div><div class=\"line\">    password:&#123;<span class=\"keyword\">type</span>:<span class=\"built_in\">String</span>, index:<span class=\"literal\">true</span>&#125;&#125;&#125;))</div></pre></td></tr></table></figure></p>\n<p>这里我们设置了所有的字段类型都是string类型，email的字段我们设置为唯一不可重复。然后添加新的数据到MongoDB,我们调用save的方法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(req.body.user).save(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> next(err);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(user);</div><div class=\"line\">        <span class=\"comment\">//成功存入后的方法;</span></div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure></p>\n<p>这里要注意我们传的参数req.body.user里面的字段要与我们创建的模型User里面的字段名字相匹配。接下来是查询的方法findOne：<br><figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.findOne(&#123;email:req.body.user.email,password:req.body.user.password&#125;,<span class=\"keyword\">function</span> (err, <span class=\"meta\">doc</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</div><div class=\"line\">       <span class=\"keyword\">if</span>(!<span class=\"meta\">doc</span>) <span class=\"keyword\">return</span> res.send(<span class=\"string\">\"&lt;p&gt;user is not found! please go back an try again&lt;/p&gt;\"</span>)</div><div class=\"line\">       console.log(<span class=\"meta\">doc</span>);</div><div class=\"line\">       req.session.loggedIn = <span class=\"meta\">doc</span>.<span class=\"number\">_</span>id;</div><div class=\"line\">       res.redirect(<span class=\"string\">'/'</span>);</div><div class=\"line\">   &#125;)</div></pre></td></tr></table></figure></p>\n<p>如果查询成功，函数会成功返回一个doc，里面包含了我们查询到的相关信息，这里我要重点给大家介绍一下doc_id这个东西，doc_id是在存储的时候MongoDB自动创建的唯一标识id，方便于我们操作，有一点要注意这个ID是ObjectID类型的。具体查询方法如下：<br><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.findById(req.session.loggedIn , <span class=\"keyword\">function</span> (<span class=\"built_in\">err</span>, doc) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span>(<span class=\"built_in\">err</span>) return <span class=\"keyword\">next</span>(<span class=\"built_in\">err</span>)</div><div class=\"line\">           console.<span class=\"built_in\">log</span>(doc);</div><div class=\"line\">           app.locals=&#123;<span class=\"keyword\">me</span>:doc&#125;;</div><div class=\"line\">           <span class=\"keyword\">next</span>();</div><div class=\"line\">       &#125;)</div></pre></td></tr></table></figure></p>\n<p>这里req.session.loggedIn就是我们存储的doc_id，根据这个id查询出的信息都是唯一的。</p>\n<p>下面给大家分享一段我一个模拟登陆注册的server.js的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>),</div><div class=\"line\">    bodyParer = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>),</div><div class=\"line\">    jade = <span class=\"built_in\">require</span>(<span class=\"string\">'jade'</span>),</div><div class=\"line\">    cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>),</div><div class=\"line\">    mongodb = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>),</div><div class=\"line\">    http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>),</div><div class=\"line\">    session = <span class=\"built_in\">require</span>(<span class=\"string\">'express-session'</span>),</div><div class=\"line\">    ObjectID = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).ObjectID,</div><div class=\"line\">    mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 创建中间件以及一些中间件需要用到的插件</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\">app.use(bodyParer.urlencoded(&#123;<span class=\"attr\">extended</span>:<span class=\"literal\">true</span>&#125;));</div><div class=\"line\">app.use(cookieParser())</div><div class=\"line\">app.use(session(&#123;</div><div class=\"line\">    resave:<span class=\"literal\">false</span>,</div><div class=\"line\">    saveUninitialized:<span class=\"literal\">false</span>,</div><div class=\"line\">    secret: <span class=\"string\">'keyboard cat'</span></div><div class=\"line\">&#125;))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 定义模板引擎</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">app.set(<span class=\"string\">\"view engine\"</span>,<span class=\"string\">\"jade\"</span>);</div><div class=\"line\">app.set(<span class=\"string\">'views'</span>,<span class=\"string\">\"./views\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 连接数据库</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/my-website'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 定义模板</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">var</span> Schema = mongoose.Schema;</div><div class=\"line\"><span class=\"keyword\">var</span> User = mongoose.model(<span class=\"string\">'user'</span>,<span class=\"keyword\">new</span> Schema(&#123;</div><div class=\"line\">    first:<span class=\"built_in\">String</span>,</div><div class=\"line\">    last:<span class=\"built_in\">String</span>,</div><div class=\"line\">    email:&#123;<span class=\"attr\">type</span>:<span class=\"built_in\">String</span>,<span class=\"attr\">unique</span>:<span class=\"literal\">true</span>&#125;,</div><div class=\"line\">    password:&#123;<span class=\"attr\">type</span>:<span class=\"built_in\">String</span>,<span class=\"attr\">index</span>:<span class=\"literal\">true</span>&#125;</div><div class=\"line\">&#125;))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 登陆状态的验证的通用路由</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(req.session.loggedIn)&#123;</div><div class=\"line\">        res.locals = &#123;<span class=\"attr\">authenticated</span>:<span class=\"literal\">true</span>&#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(req.session.loggedIn)</div><div class=\"line\">       User.findById(req.session.loggedIn , <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, doc</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> next(err)</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(doc);</div><div class=\"line\">            app.locals=&#123;<span class=\"attr\">me</span>:doc&#125;;</div><div class=\"line\">            next();</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        app.locals = &#123;<span class=\"attr\">authenticated</span>:<span class=\"literal\">false</span>&#125;</div><div class=\"line\">        next();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 主页路由</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'index'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">app.get(<span class=\"string\">'/login/:signupEmail'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123; <span class=\"comment\">//这里允许主页接收一个参数</span></div><div class=\"line\">    res.render(<span class=\"string\">'login'</span>,&#123;<span class=\"attr\">signupEmail</span>:req.params.signupEmail&#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 登陆路由模块</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">app.get(<span class=\"string\">'/login/'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'login'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">app.post(<span class=\"string\">'/login'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res,next</span>) </span>&#123;</div><div class=\"line\">    User.findOne(&#123;<span class=\"attr\">email</span>:req.body.user.email,<span class=\"attr\">password</span>:req.body.user.password&#125;,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, doc</span>) </span>&#123;<span class=\"comment\">//验证登陆账号密码</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!doc) <span class=\"keyword\">return</span> res.send(<span class=\"string\">\"&lt;p&gt;user is not found! please go back an try again&lt;/p&gt;\"</span>)</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(doc);</div><div class=\"line\">        req.session.loggedIn = doc._id;</div><div class=\"line\">        res.redirect(<span class=\"string\">'/'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 注册路由模块</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">app.get(<span class=\"string\">'/signup'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'signup'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">app.post(<span class=\"string\">'/signup'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(req.body);</div><div class=\"line\">    <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(req.body.user).save(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;<span class=\"comment\">//注册信息保存到MongoDB数据库</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> next(err);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(user);</div><div class=\"line\">        res.redirect(<span class=\"string\">'/login/'</span> + req.body.user.email);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 登出操作</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">app.get(<span class=\"string\">'/logout'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    req.session.loggedIn = <span class=\"literal\">null</span>;</div><div class=\"line\">    res.redirect(<span class=\"string\">'/'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">http.createServer(app).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<p>　　希望我的分享对大家有帮助哦o(^▽^)o本文原创欢迎转载<del>~</del><del>~</del>~~</p>\n<p>　　</p>\n","site":{"data":{}},"excerpt":"<p>摘要:<br>    　　MongoDB是一个面向文档的数据库，它非常适合Node.js应用以及云端部署，因为MySql以及PostgreSql是根据固定的结构设计将数据存储在不同的表之中，而MongoDB可以将任意类型的文档数据储存到集合之中，这也是MongoDB最有意思的特性之一。所以今天就安利一波如何用node.js操作MongoDB数据库。<br>    <div align=\"center\" style=\"height:200px;\"><br>    <img src=\"../../../../img/2017-5/timg.jpg\" width=\"585\" height=\"192\"><br>    </div><br>","more":"<br>正文:<br>　　要在node.js中操作MongoDB，我们首先要选择一个方便我们操作的node的插件，比较常用的插件有两种，分别是’mongodb’与’mongoose’。这里我推荐使用mongoose，因为他是根据mongodb封装的一个插件，使用起来更方便，操作起来也更简洁。<br>　　首先我们要在node中安装mongoose，在跟git bash中输入<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> mongoose <span class=\"comment\">--save</span></div></pre></td></tr></table></figure></p>\n<p>当然如果你安装了淘宝镜像，那么使用cnpm更好。接下来我们在node.js项目中新建一个server.js文件，然后在其中输入依赖：<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">var mongoose</span> = require(<span class=\"string\">'mongoose'</span>);</div></pre></td></tr></table></figure></p>\n<p>这样我们就引入了mongoose这个插件，接下来我们需要利用这个插件来连接数据库<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongoose.<span class=\"built_in\">connect</span>(<span class=\"string\">'mongodb://localhost:my-website'</span>)</div></pre></td></tr></table></figure></p>\n<p>这里注意了，’my-website’是你在MongoDB中的数据库的名称，如果数据库中没有这个名字的话，那么MongoDB会自动新建一个名字为’my-website’的数据库并连接。<br>然后我们建立一个数据模型，这个模型建立可以在文件任意位置定义，无所谓Mongoose是否已经与数据库连接,这里我们模拟建立一个用户注册的模型，包含用户的名字，信箱，以及密码信息。<br><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">var</span> Schema = mongoose.Schema;</div><div class=\"line\"><span class=\"built_in\">var</span> user = mongoose.model(<span class=\"string\">'User'</span>,<span class=\"literal\">new</span> Schema(&#123;</div><div class=\"line\">    first:<span class=\"built_in\">String</span>,</div><div class=\"line\">    last:<span class=\"built_in\">String</span>,</div><div class=\"line\">    email:&#123;<span class=\"keyword\">type</span>:<span class=\"built_in\">String</span>, unique:<span class=\"literal\">true</span>,</div><div class=\"line\">    password:&#123;<span class=\"keyword\">type</span>:<span class=\"built_in\">String</span>, index:<span class=\"literal\">true</span>&#125;&#125;&#125;))</div></pre></td></tr></table></figure></p>\n<p>这里我们设置了所有的字段类型都是string类型，email的字段我们设置为唯一不可重复。然后添加新的数据到MongoDB,我们调用save的方法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(req.body.user).save(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> next(err);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(user);</div><div class=\"line\">        <span class=\"comment\">//成功存入后的方法;</span></div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure></p>\n<p>这里要注意我们传的参数req.body.user里面的字段要与我们创建的模型User里面的字段名字相匹配。接下来是查询的方法findOne：<br><figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.findOne(&#123;email:req.body.user.email,password:req.body.user.password&#125;,<span class=\"keyword\">function</span> (err, <span class=\"meta\">doc</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</div><div class=\"line\">       <span class=\"keyword\">if</span>(!<span class=\"meta\">doc</span>) <span class=\"keyword\">return</span> res.send(<span class=\"string\">\"&lt;p&gt;user is not found! please go back an try again&lt;/p&gt;\"</span>)</div><div class=\"line\">       console.log(<span class=\"meta\">doc</span>);</div><div class=\"line\">       req.session.loggedIn = <span class=\"meta\">doc</span>.<span class=\"number\">_</span>id;</div><div class=\"line\">       res.redirect(<span class=\"string\">'/'</span>);</div><div class=\"line\">   &#125;)</div></pre></td></tr></table></figure></p>\n<p>如果查询成功，函数会成功返回一个doc，里面包含了我们查询到的相关信息，这里我要重点给大家介绍一下doc_id这个东西，doc_id是在存储的时候MongoDB自动创建的唯一标识id，方便于我们操作，有一点要注意这个ID是ObjectID类型的。具体查询方法如下：<br><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.findById(req.session.loggedIn , <span class=\"keyword\">function</span> (<span class=\"built_in\">err</span>, doc) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span>(<span class=\"built_in\">err</span>) return <span class=\"keyword\">next</span>(<span class=\"built_in\">err</span>)</div><div class=\"line\">           console.<span class=\"built_in\">log</span>(doc);</div><div class=\"line\">           app.locals=&#123;<span class=\"keyword\">me</span>:doc&#125;;</div><div class=\"line\">           <span class=\"keyword\">next</span>();</div><div class=\"line\">       &#125;)</div></pre></td></tr></table></figure></p>\n<p>这里req.session.loggedIn就是我们存储的doc_id，根据这个id查询出的信息都是唯一的。</p>\n<p>下面给大家分享一段我一个模拟登陆注册的server.js的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>),</div><div class=\"line\">    bodyParer = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>),</div><div class=\"line\">    jade = <span class=\"built_in\">require</span>(<span class=\"string\">'jade'</span>),</div><div class=\"line\">    cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>),</div><div class=\"line\">    mongodb = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>),</div><div class=\"line\">    http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>),</div><div class=\"line\">    session = <span class=\"built_in\">require</span>(<span class=\"string\">'express-session'</span>),</div><div class=\"line\">    ObjectID = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).ObjectID,</div><div class=\"line\">    mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 创建中间件以及一些中间件需要用到的插件</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\">app.use(bodyParer.urlencoded(&#123;<span class=\"attr\">extended</span>:<span class=\"literal\">true</span>&#125;));</div><div class=\"line\">app.use(cookieParser())</div><div class=\"line\">app.use(session(&#123;</div><div class=\"line\">    resave:<span class=\"literal\">false</span>,</div><div class=\"line\">    saveUninitialized:<span class=\"literal\">false</span>,</div><div class=\"line\">    secret: <span class=\"string\">'keyboard cat'</span></div><div class=\"line\">&#125;))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 定义模板引擎</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">app.set(<span class=\"string\">\"view engine\"</span>,<span class=\"string\">\"jade\"</span>);</div><div class=\"line\">app.set(<span class=\"string\">'views'</span>,<span class=\"string\">\"./views\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 连接数据库</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/my-website'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 定义模板</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">var</span> Schema = mongoose.Schema;</div><div class=\"line\"><span class=\"keyword\">var</span> User = mongoose.model(<span class=\"string\">'user'</span>,<span class=\"keyword\">new</span> Schema(&#123;</div><div class=\"line\">    first:<span class=\"built_in\">String</span>,</div><div class=\"line\">    last:<span class=\"built_in\">String</span>,</div><div class=\"line\">    email:&#123;<span class=\"attr\">type</span>:<span class=\"built_in\">String</span>,<span class=\"attr\">unique</span>:<span class=\"literal\">true</span>&#125;,</div><div class=\"line\">    password:&#123;<span class=\"attr\">type</span>:<span class=\"built_in\">String</span>,<span class=\"attr\">index</span>:<span class=\"literal\">true</span>&#125;</div><div class=\"line\">&#125;))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 登陆状态的验证的通用路由</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(req.session.loggedIn)&#123;</div><div class=\"line\">        res.locals = &#123;<span class=\"attr\">authenticated</span>:<span class=\"literal\">true</span>&#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(req.session.loggedIn)</div><div class=\"line\">       User.findById(req.session.loggedIn , <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, doc</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> next(err)</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(doc);</div><div class=\"line\">            app.locals=&#123;<span class=\"attr\">me</span>:doc&#125;;</div><div class=\"line\">            next();</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        app.locals = &#123;<span class=\"attr\">authenticated</span>:<span class=\"literal\">false</span>&#125;</div><div class=\"line\">        next();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 主页路由</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'index'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\">app.get(<span class=\"string\">'/login/:signupEmail'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123; <span class=\"comment\">//这里允许主页接收一个参数</span></div><div class=\"line\">    res.render(<span class=\"string\">'login'</span>,&#123;<span class=\"attr\">signupEmail</span>:req.params.signupEmail&#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 登陆路由模块</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">app.get(<span class=\"string\">'/login/'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'login'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">app.post(<span class=\"string\">'/login'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res,next</span>) </span>&#123;</div><div class=\"line\">    User.findOne(&#123;<span class=\"attr\">email</span>:req.body.user.email,<span class=\"attr\">password</span>:req.body.user.password&#125;,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, doc</span>) </span>&#123;<span class=\"comment\">//验证登陆账号密码</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!doc) <span class=\"keyword\">return</span> res.send(<span class=\"string\">\"&lt;p&gt;user is not found! please go back an try again&lt;/p&gt;\"</span>)</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(doc);</div><div class=\"line\">        req.session.loggedIn = doc._id;</div><div class=\"line\">        res.redirect(<span class=\"string\">'/'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 注册路由模块</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">app.get(<span class=\"string\">'/signup'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.render(<span class=\"string\">'signup'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">app.post(<span class=\"string\">'/signup'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(req.body);</div><div class=\"line\">    <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(req.body.user).save(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;<span class=\"comment\">//注册信息保存到MongoDB数据库</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> next(err);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(user);</div><div class=\"line\">        res.redirect(<span class=\"string\">'/login/'</span> + req.body.user.email);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 登出操作</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">app.get(<span class=\"string\">'/logout'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    req.session.loggedIn = <span class=\"literal\">null</span>;</div><div class=\"line\">    res.redirect(<span class=\"string\">'/'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">http.createServer(app).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<p>　　希望我的分享对大家有帮助哦o(^▽^)o本文原创欢迎转载<del>~</del><del>~</del>~~</p>\n<p>　　</p>"},{"title":"Hello World","date":"2017-02-21T18:01:08.000Z","_content":"It's feel so good when you give the shit to someone had ever look down upon you o(^-^)o\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2017-02-22 2:01:08\ncategories:\n  - 开发\n  - 二级目录\ntags:\n    - 开篇之作\n    - 啦啦啦\n---\nIt's feel so good when you give the shit to someone had ever look down upon you o(^-^)o\n","slug":"hello-world","published":1,"updated":"2017-09-29T06:39:35.262Z","_id":"cj764c8lz000gw0d0yigy0yzc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>It’s feel so good when you give the shit to someone had ever look down upon you o(^-^)o</p>\n","site":{"data":{}},"excerpt":"","more":"<p>It’s feel so good when you give the shit to someone had ever look down upon you o(^-^)o</p>\n"},{"title":"热烈庆祝耶不q的小窝搭建成功啦~","date":"2017-02-24T03:44:03.000Z","_content":"\n\n摘要:\n    　　从事行业这么这么长时间以来，一直一直筹划着想有一个自己的部落格，直到今天，这个愿望终于算是实现啦..........\n<div align=center>\n           <img src=\"../../../../img/2017-2/775723462023695706.jpg\" width=\"400\" height=\"600\" />\n           </div>\n<!-- more -->\n正文:\n    　　从事行业这么这么长时间以来，一直一直筹划着想有一个自己的部落格，但是犹豫比较忙（ps:其实大部分原因还是懒啦。。。哈哈哈。。。。），这个夙愿一直没有达成。\n    　　但是直到今天，这个愿望终于算是实现啦！经历一天的时间，搭配着[github](https://github.com)代码仓库，总算是把自己的部落格搭建起来了~~\n    <div align=center>\n    <img src=\"../../../../img/2017-2/94291181983545482.jpg\" width=\"400\" height=\"400\" />\n    </div>\n    　　初步完成的小窝支持响应式，在pc端和移动端都有很好的体验效果。但是有点不足就是必须ie9以上（终于可以说句：去屎吧ie8！现在不是公司的项目你猜我还理你嘛！？）。\n    　　以后会渐渐更新我的小窝，初步计划小窝里会更新一些技术上的问题，到现在累积了一些自认为技术上的亮点跟一些深坑，会慢慢贴到自己的小窝里。\n    　　除了技术上的难题，还会更新一些生活上的琐事。嘿嘿嘿嘿。。。。我在想要不要打个码再把这些鸡毛蒜皮的事情更新上来。。\n    　　嗯嗯，反正就是这样啦！祝愿我的小窝越来越精彩，越来越被你们关注~啦啦啦~\n    <div align=center>\n    <img src=\"../../../../img/2017-2/759734497473095040.jpg\" width=\"400\" height=\"400\" />\n    </div>","source":"_posts/热烈庆祝耶不q的小窝搭建成功啦.md","raw":"---\ntitle: 热烈庆祝耶不q的小窝搭建成功啦~\ndate: 2017-02-24 11:44:03\ncategories:\n  - 日志\ntags:\n    - 生活\n    - 开篇之作\n    - 啦啦啦\n---\n\n\n摘要:\n    　　从事行业这么这么长时间以来，一直一直筹划着想有一个自己的部落格，直到今天，这个愿望终于算是实现啦..........\n<div align=center>\n           <img src=\"../../../../img/2017-2/775723462023695706.jpg\" width=\"400\" height=\"600\" />\n           </div>\n<!-- more -->\n正文:\n    　　从事行业这么这么长时间以来，一直一直筹划着想有一个自己的部落格，但是犹豫比较忙（ps:其实大部分原因还是懒啦。。。哈哈哈。。。。），这个夙愿一直没有达成。\n    　　但是直到今天，这个愿望终于算是实现啦！经历一天的时间，搭配着[github](https://github.com)代码仓库，总算是把自己的部落格搭建起来了~~\n    <div align=center>\n    <img src=\"../../../../img/2017-2/94291181983545482.jpg\" width=\"400\" height=\"400\" />\n    </div>\n    　　初步完成的小窝支持响应式，在pc端和移动端都有很好的体验效果。但是有点不足就是必须ie9以上（终于可以说句：去屎吧ie8！现在不是公司的项目你猜我还理你嘛！？）。\n    　　以后会渐渐更新我的小窝，初步计划小窝里会更新一些技术上的问题，到现在累积了一些自认为技术上的亮点跟一些深坑，会慢慢贴到自己的小窝里。\n    　　除了技术上的难题，还会更新一些生活上的琐事。嘿嘿嘿嘿。。。。我在想要不要打个码再把这些鸡毛蒜皮的事情更新上来。。\n    　　嗯嗯，反正就是这样啦！祝愿我的小窝越来越精彩，越来越被你们关注~啦啦啦~\n    <div align=center>\n    <img src=\"../../../../img/2017-2/759734497473095040.jpg\" width=\"400\" height=\"400\" />\n    </div>","slug":"热烈庆祝耶不q的小窝搭建成功啦","published":1,"updated":"2017-09-29T06:39:35.276Z","_id":"cj764c8m4000kw0d0krao3e29","comments":1,"layout":"post","photos":[],"link":"","content":"<p>摘要:<br>    　　从事行业这么这么长时间以来，一直一直筹划着想有一个自己的部落格，直到今天，这个愿望终于算是实现啦……….</p>\n<div align=\"center\"><br>           <img src=\"../../../../img/2017-2/775723462023695706.jpg\" width=\"400\" height=\"600\"><br>           </div><br><a id=\"more\"></a><br>正文:<br>    　　从事行业这么这么长时间以来，一直一直筹划着想有一个自己的部落格，但是犹豫比较忙（ps:其实大部分原因还是懒啦。。。哈哈哈。。。。），这个夙愿一直没有达成。<br>    　　但是直到今天，这个愿望终于算是实现啦！经历一天的时间，搭配着<a href=\"https://github.com\" target=\"_blank\" rel=\"external\">github</a>代码仓库，总算是把自己的部落格搭建起来了~~<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-2/94291181983545482.jpg\" width=\"400\" height=\"400\"><br>    </div><br>    　　初步完成的小窝支持响应式，在pc端和移动端都有很好的体验效果。但是有点不足就是必须ie9以上（终于可以说句：去屎吧ie8！现在不是公司的项目你猜我还理你嘛！？）。<br>    　　以后会渐渐更新我的小窝，初步计划小窝里会更新一些技术上的问题，到现在累积了一些自认为技术上的亮点跟一些深坑，会慢慢贴到自己的小窝里。<br>    　　除了技术上的难题，还会更新一些生活上的琐事。嘿嘿嘿嘿。。。。我在想要不要打个码再把这些鸡毛蒜皮的事情更新上来。。<br>    　　嗯嗯，反正就是这样啦！祝愿我的小窝越来越精彩，越来越被你们关注~啦啦啦~<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-2/759734497473095040.jpg\" width=\"400\" height=\"400\"><br>    </div>","site":{"data":{}},"excerpt":"<p>摘要:<br>    　　从事行业这么这么长时间以来，一直一直筹划着想有一个自己的部落格，直到今天，这个愿望终于算是实现啦……….</p>\n<div align=\"center\"><br>           <img src=\"../../../../img/2017-2/775723462023695706.jpg\" width=\"400\" height=\"600\"><br>           </div><br>","more":"<br>正文:<br>    　　从事行业这么这么长时间以来，一直一直筹划着想有一个自己的部落格，但是犹豫比较忙（ps:其实大部分原因还是懒啦。。。哈哈哈。。。。），这个夙愿一直没有达成。<br>    　　但是直到今天，这个愿望终于算是实现啦！经历一天的时间，搭配着<a href=\"https://github.com\" target=\"_blank\" rel=\"external\">github</a>代码仓库，总算是把自己的部落格搭建起来了~~<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-2/94291181983545482.jpg\" width=\"400\" height=\"400\"><br>    </div><br>    　　初步完成的小窝支持响应式，在pc端和移动端都有很好的体验效果。但是有点不足就是必须ie9以上（终于可以说句：去屎吧ie8！现在不是公司的项目你猜我还理你嘛！？）。<br>    　　以后会渐渐更新我的小窝，初步计划小窝里会更新一些技术上的问题，到现在累积了一些自认为技术上的亮点跟一些深坑，会慢慢贴到自己的小窝里。<br>    　　除了技术上的难题，还会更新一些生活上的琐事。嘿嘿嘿嘿。。。。我在想要不要打个码再把这些鸡毛蒜皮的事情更新上来。。<br>    　　嗯嗯，反正就是这样啦！祝愿我的小窝越来越精彩，越来越被你们关注~啦啦啦~<br>    <div align=\"center\"><br>    <img src=\"../../../../img/2017-2/759734497473095040.jpg\" width=\"400\" height=\"400\"><br>    </div>"},{"title":"移动端不同像素比的贴图与边框问题","date":"2017-06-01T02:27:18.000Z","_content":"摘要:\n    　　开发过移动端的都知道，移动端的设备像素分为物理像素跟设备像素，而且不同型号的设备的物理像素的还不一样，比如iphone6的物理像素就是设备像素的两倍，而iphone6Plus的物理像素则是设备像素的三倍。这就造成了我们在css中所使用的到的px这种相对单位的在移动端的浏览器解析中有了不一样的表现。那为了让我们的项目在不同设备中的表现区别不大，就需要我们做一些工作了。下面我来为大家介绍几个在移动端开发中我们经常遇到的问题跟几角方案。\n    <div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-6/20170601123154.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n<!-- more -->\n正文:\n<h1 style=\"color:#d9534f;\">添加一像素边框</h1>\n　　在css样式中我们经常会遇见需要给一个div下面加上1px的底部边框的需求。这个通常我们只需要在给div加上一个border-bottom 1px就可以了。但是在移动端中一个1px就出问题了，你会发现在手机端上面这个1px会比平常要宽。这就是因为设备物理像素跟设备像素比的问题了。比如iphone6下这个1px会变成2px，而iphone6Plus下这个1px则会变成3px。那么我们可以通过@media给不同的设备写一下兼容。\n\n```\n.div{\n    position: relative;\n}\n.div:after{\n    display: block;\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    content:'';\n    border-top:1px solid #000;\n}\n @media(-webkit-min-device-pixel-ratio:1.5),(min-device-pixel-ratio:1.5){\n    .div:after\n      transform: scaleY(0.7);\n      -webkit-transform: scaleY(0.7);\n    }\n  }\n  @media(-webkit-min-device-pixel-ratio:2),(min-device-pixel-ratio:2){\n    .div:after{\n      transform: scaleY(0.5);\n      -webkit-transform: scaleY(0.5);\n    }\n  }\n  @media(-webkit-min-device-pixel-ratio:3),(min-device-pixel-ratio:3){\n    .div:after{\n      transform: scaleY(0.3);\n      -webkit-transform: scaleY(0.3);\n    }\n}\n```\n这样我们给需要加border的元素一个伪类并给这个伪类绝对定位让他贴附在该元素的底部，然后给这个伪类一个border-top 1px，然后分别在像素比为1.5的设备下让线条缩放0.7倍，像素比为2.0的设备下缩放0.5倍，像素比为3.0的设备下缩放0.3倍，这样换算下来就都差不多是1px的样子了。\n<h1 style=\"color:#d9534f;\">图片的兼容</h1>\n不知道大家有过这样的经历没有，一半在移动端开发的时候ui给我们的设计图一般都会两套不同的大小。比如一个图片叫picture@2x.png，那么相对应的一定就会有一个picture@3x.png，有没有想过这是为什么呢？其实这也是为了适配我们在不同像素比的设备，在不同像素比的设备中使用不同大小的图标以防图片虚化，这是兼容的图片的一个常用思路。\n```\n.span{\n    display:inline-block;\n    width:30px;\n    height:30px;\n    background-image: url(picture@2x.png);\n    background-size: 30px;\n    background-repeat: no-repeat;\n}\n@media (-webkit-min-device-pixel-ratio:3),(min-device-pixel-ratio:3){\n    .span{\n        background-image: url(picture@3x.png);\n    }\n}\n```\n这里还有一个需要我们注意的地方，我们知道我们为了网站优化减少http请求次数，通常都把一些图标集合起来做成一个大的精灵图，这时候可能需要我们改变的就是图片的位置background-position。其实除了这种方法我们还可以把这些图片转成base64格式，让其已代码的形式存在于css中，这样既减少了http请求次数，还方便我们的项目构造，真的很方便实用，像vue的脚手架工具vue-cli就会自动为我们把一些小图片打包到css当中，非常方便，当然这些都是题外话了。\n\n　　还有今天是儿童节，祝大家永远18睡,还有哦，文章开头的图片是我家新成员 咋地了，哈哈~~~~~~下次会专门更新篇博客来重大介绍一下我家新成员o(^▽^)o~~~~~~~~~~\n<div align=center style=\"overflow:hidden\">\n    <img src=\"../../../../img/2017-6/20170601115946.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601115955.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120000.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120005.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120010.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120014.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120019.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120023.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120029.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\">\n    </div>\n\n　　","source":"_posts/移动端不同像素比的贴图与边框问题.md","raw":"---\ntitle: 移动端不同像素比的贴图与边框问题\ndate: 2017-06-01 10:27:18\ncategories:\n  - 开发\ntags:\n    - 前端\n    - 移动端\n    - css\n---\n摘要:\n    　　开发过移动端的都知道，移动端的设备像素分为物理像素跟设备像素，而且不同型号的设备的物理像素的还不一样，比如iphone6的物理像素就是设备像素的两倍，而iphone6Plus的物理像素则是设备像素的三倍。这就造成了我们在css中所使用的到的px这种相对单位的在移动端的浏览器解析中有了不一样的表现。那为了让我们的项目在不同设备中的表现区别不大，就需要我们做一些工作了。下面我来为大家介绍几个在移动端开发中我们经常遇到的问题跟几角方案。\n    <div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-6/20170601123154.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n<!-- more -->\n正文:\n<h1 style=\"color:#d9534f;\">添加一像素边框</h1>\n　　在css样式中我们经常会遇见需要给一个div下面加上1px的底部边框的需求。这个通常我们只需要在给div加上一个border-bottom 1px就可以了。但是在移动端中一个1px就出问题了，你会发现在手机端上面这个1px会比平常要宽。这就是因为设备物理像素跟设备像素比的问题了。比如iphone6下这个1px会变成2px，而iphone6Plus下这个1px则会变成3px。那么我们可以通过@media给不同的设备写一下兼容。\n\n```\n.div{\n    position: relative;\n}\n.div:after{\n    display: block;\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    content:'';\n    border-top:1px solid #000;\n}\n @media(-webkit-min-device-pixel-ratio:1.5),(min-device-pixel-ratio:1.5){\n    .div:after\n      transform: scaleY(0.7);\n      -webkit-transform: scaleY(0.7);\n    }\n  }\n  @media(-webkit-min-device-pixel-ratio:2),(min-device-pixel-ratio:2){\n    .div:after{\n      transform: scaleY(0.5);\n      -webkit-transform: scaleY(0.5);\n    }\n  }\n  @media(-webkit-min-device-pixel-ratio:3),(min-device-pixel-ratio:3){\n    .div:after{\n      transform: scaleY(0.3);\n      -webkit-transform: scaleY(0.3);\n    }\n}\n```\n这样我们给需要加border的元素一个伪类并给这个伪类绝对定位让他贴附在该元素的底部，然后给这个伪类一个border-top 1px，然后分别在像素比为1.5的设备下让线条缩放0.7倍，像素比为2.0的设备下缩放0.5倍，像素比为3.0的设备下缩放0.3倍，这样换算下来就都差不多是1px的样子了。\n<h1 style=\"color:#d9534f;\">图片的兼容</h1>\n不知道大家有过这样的经历没有，一半在移动端开发的时候ui给我们的设计图一般都会两套不同的大小。比如一个图片叫picture@2x.png，那么相对应的一定就会有一个picture@3x.png，有没有想过这是为什么呢？其实这也是为了适配我们在不同像素比的设备，在不同像素比的设备中使用不同大小的图标以防图片虚化，这是兼容的图片的一个常用思路。\n```\n.span{\n    display:inline-block;\n    width:30px;\n    height:30px;\n    background-image: url(picture@2x.png);\n    background-size: 30px;\n    background-repeat: no-repeat;\n}\n@media (-webkit-min-device-pixel-ratio:3),(min-device-pixel-ratio:3){\n    .span{\n        background-image: url(picture@3x.png);\n    }\n}\n```\n这里还有一个需要我们注意的地方，我们知道我们为了网站优化减少http请求次数，通常都把一些图标集合起来做成一个大的精灵图，这时候可能需要我们改变的就是图片的位置background-position。其实除了这种方法我们还可以把这些图片转成base64格式，让其已代码的形式存在于css中，这样既减少了http请求次数，还方便我们的项目构造，真的很方便实用，像vue的脚手架工具vue-cli就会自动为我们把一些小图片打包到css当中，非常方便，当然这些都是题外话了。\n\n　　还有今天是儿童节，祝大家永远18睡,还有哦，文章开头的图片是我家新成员 咋地了，哈哈~~~~~~下次会专门更新篇博客来重大介绍一下我家新成员o(^▽^)o~~~~~~~~~~\n<div align=center style=\"overflow:hidden\">\n    <img src=\"../../../../img/2017-6/20170601115946.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601115955.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120000.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120005.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120010.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120014.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120019.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120023.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120029.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\">\n    </div>\n\n　　","slug":"移动端不同像素比的贴图与边框问题","published":1,"updated":"2017-09-29T06:39:35.277Z","_id":"cj764c8ma000nw0d0m3egxska","comments":1,"layout":"post","photos":[],"link":"","content":"<p>摘要:<br>    　　开发过移动端的都知道，移动端的设备像素分为物理像素跟设备像素，而且不同型号的设备的物理像素的还不一样，比如iphone6的物理像素就是设备像素的两倍，而iphone6Plus的物理像素则是设备像素的三倍。这就造成了我们在css中所使用的到的px这种相对单位的在移动端的浏览器解析中有了不一样的表现。那为了让我们的项目在不同设备中的表现区别不大，就需要我们做一些工作了。下面我来为大家介绍几个在移动端开发中我们经常遇到的问题跟几角方案。<br>    <div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-6/20170601123154.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br><a id=\"more\"></a><br>正文:</p>\n<p></p><h1 style=\"color:#d9534f;\">添加一像素边框</h1><br>　　在css样式中我们经常会遇见需要给一个div下面加上1px的底部边框的需求。这个通常我们只需要在给div加上一个border-bottom 1px就可以了。但是在移动端中一个1px就出问题了，你会发现在手机端上面这个1px会比平常要宽。这就是因为设备物理像素跟设备像素比的问题了。比如iphone6下这个1px会变成2px，而iphone6Plus下这个1px则会变成3px。那么我们可以通过@media给不同的设备写一下兼容。<p></p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.div</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.div</span>:after&#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: block;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#000</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> @<span class=\"keyword\">media</span>(-webkit-min-device-pixel-ratio:<span class=\"number\">1.5</span>),(min-device-pixel-ratio:<span class=\"number\">1.5</span>)&#123;</div><div class=\"line\">    <span class=\"selector-class\">.div</span>:after</div><div class=\"line\">      <span class=\"attribute\">transform</span>: scaleY(<span class=\"number\">0.7</span>);</div><div class=\"line\">      -webkit-<span class=\"attribute\">transform</span>: scaleY(<span class=\"number\">0.7</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  @<span class=\"keyword\">media</span>(-webkit-min-device-pixel-ratio:<span class=\"number\">2</span>),(min-device-pixel-ratio:<span class=\"number\">2</span>)&#123;</div><div class=\"line\">    <span class=\"selector-class\">.div</span>:after&#123;</div><div class=\"line\">      <span class=\"attribute\">transform</span>: scaleY(<span class=\"number\">0.5</span>);</div><div class=\"line\">      -webkit-<span class=\"attribute\">transform</span>: scaleY(<span class=\"number\">0.5</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  @<span class=\"keyword\">media</span>(-webkit-min-device-pixel-ratio:<span class=\"number\">3</span>),(min-device-pixel-ratio:<span class=\"number\">3</span>)&#123;</div><div class=\"line\">    <span class=\"selector-class\">.div</span>:after&#123;</div><div class=\"line\">      <span class=\"attribute\">transform</span>: scaleY(<span class=\"number\">0.3</span>);</div><div class=\"line\">      -webkit-<span class=\"attribute\">transform</span>: scaleY(<span class=\"number\">0.3</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样我们给需要加border的元素一个伪类并给这个伪类绝对定位让他贴附在该元素的底部，然后给这个伪类一个border-top 1px，然后分别在像素比为1.5的设备下让线条缩放0.7倍，像素比为2.0的设备下缩放0.5倍，像素比为3.0的设备下缩放0.3倍，这样换算下来就都差不多是1px的样子了。</p>\n<p></p><h1 style=\"color:#d9534f;\">图片的兼容</h1><br>不知道大家有过这样的经历没有，一半在移动端开发的时候ui给我们的设计图一般都会两套不同的大小。比如一个图片叫picture@2x.png，那么相对应的一定就会有一个picture@3x.png，有没有想过这是为什么呢？其实这也是为了适配我们在不同像素比的设备，在不同像素比的设备中使用不同大小的图标以防图片虚化，这是兼容的图片的一个常用思路。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.span</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>:inline-block;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">30px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">30px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(picture@2x.png);</div><div class=\"line\">    <span class=\"attribute\">background-size</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-repeat</span>: no-repeat;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> (-webkit-min-device-pixel-ratio:<span class=\"number\">3</span>),(min-device-pixel-ratio:<span class=\"number\">3</span>)&#123;</div><div class=\"line\">    <span class=\"selector-class\">.span</span>&#123;</div><div class=\"line\">        <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(picture@3x.png);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p>\n<p>这里还有一个需要我们注意的地方，我们知道我们为了网站优化减少http请求次数，通常都把一些图标集合起来做成一个大的精灵图，这时候可能需要我们改变的就是图片的位置background-position。其实除了这种方法我们还可以把这些图片转成base64格式，让其已代码的形式存在于css中，这样既减少了http请求次数，还方便我们的项目构造，真的很方便实用，像vue的脚手架工具vue-cli就会自动为我们把一些小图片打包到css当中，非常方便，当然这些都是题外话了。</p>\n<p>　　还有今天是儿童节，祝大家永远18睡,还有哦，文章开头的图片是我家新成员 咋地了，哈哈<del>~</del>~下次会专门更新篇博客来重大介绍一下我家新成员o(^▽^)o<del>~</del><del>~</del></p>\n<div align=\"center\" style=\"overflow:hidden\"><br>    <img src=\"../../../../img/2017-6/20170601115946.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601115955.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120000.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120005.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120010.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120014.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120019.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120023.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120029.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><br>    </div>\n\n<p>　　</p>\n","site":{"data":{}},"excerpt":"<p>摘要:<br>    　　开发过移动端的都知道，移动端的设备像素分为物理像素跟设备像素，而且不同型号的设备的物理像素的还不一样，比如iphone6的物理像素就是设备像素的两倍，而iphone6Plus的物理像素则是设备像素的三倍。这就造成了我们在css中所使用的到的px这种相对单位的在移动端的浏览器解析中有了不一样的表现。那为了让我们的项目在不同设备中的表现区别不大，就需要我们做一些工作了。下面我来为大家介绍几个在移动端开发中我们经常遇到的问题跟几角方案。<br>    <div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-6/20170601123154.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br>","more":"<br>正文:</p>\n<p></p><h1 style=\"color:#d9534f;\">添加一像素边框</h1><br>　　在css样式中我们经常会遇见需要给一个div下面加上1px的底部边框的需求。这个通常我们只需要在给div加上一个border-bottom 1px就可以了。但是在移动端中一个1px就出问题了，你会发现在手机端上面这个1px会比平常要宽。这就是因为设备物理像素跟设备像素比的问题了。比如iphone6下这个1px会变成2px，而iphone6Plus下这个1px则会变成3px。那么我们可以通过@media给不同的设备写一下兼容。<p></p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.div</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.div</span>:after&#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: block;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#000</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> @<span class=\"keyword\">media</span>(-webkit-min-device-pixel-ratio:<span class=\"number\">1.5</span>),(min-device-pixel-ratio:<span class=\"number\">1.5</span>)&#123;</div><div class=\"line\">    <span class=\"selector-class\">.div</span>:after</div><div class=\"line\">      <span class=\"attribute\">transform</span>: scaleY(<span class=\"number\">0.7</span>);</div><div class=\"line\">      -webkit-<span class=\"attribute\">transform</span>: scaleY(<span class=\"number\">0.7</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  @<span class=\"keyword\">media</span>(-webkit-min-device-pixel-ratio:<span class=\"number\">2</span>),(min-device-pixel-ratio:<span class=\"number\">2</span>)&#123;</div><div class=\"line\">    <span class=\"selector-class\">.div</span>:after&#123;</div><div class=\"line\">      <span class=\"attribute\">transform</span>: scaleY(<span class=\"number\">0.5</span>);</div><div class=\"line\">      -webkit-<span class=\"attribute\">transform</span>: scaleY(<span class=\"number\">0.5</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  @<span class=\"keyword\">media</span>(-webkit-min-device-pixel-ratio:<span class=\"number\">3</span>),(min-device-pixel-ratio:<span class=\"number\">3</span>)&#123;</div><div class=\"line\">    <span class=\"selector-class\">.div</span>:after&#123;</div><div class=\"line\">      <span class=\"attribute\">transform</span>: scaleY(<span class=\"number\">0.3</span>);</div><div class=\"line\">      -webkit-<span class=\"attribute\">transform</span>: scaleY(<span class=\"number\">0.3</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样我们给需要加border的元素一个伪类并给这个伪类绝对定位让他贴附在该元素的底部，然后给这个伪类一个border-top 1px，然后分别在像素比为1.5的设备下让线条缩放0.7倍，像素比为2.0的设备下缩放0.5倍，像素比为3.0的设备下缩放0.3倍，这样换算下来就都差不多是1px的样子了。</p>\n<p></p><h1 style=\"color:#d9534f;\">图片的兼容</h1><br>不知道大家有过这样的经历没有，一半在移动端开发的时候ui给我们的设计图一般都会两套不同的大小。比如一个图片叫picture@2x.png，那么相对应的一定就会有一个picture@3x.png，有没有想过这是为什么呢？其实这也是为了适配我们在不同像素比的设备，在不同像素比的设备中使用不同大小的图标以防图片虚化，这是兼容的图片的一个常用思路。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.span</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>:inline-block;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">30px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">30px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(picture@2x.png);</div><div class=\"line\">    <span class=\"attribute\">background-size</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-repeat</span>: no-repeat;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> (-webkit-min-device-pixel-ratio:<span class=\"number\">3</span>),(min-device-pixel-ratio:<span class=\"number\">3</span>)&#123;</div><div class=\"line\">    <span class=\"selector-class\">.span</span>&#123;</div><div class=\"line\">        <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(picture@3x.png);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p>\n<p>这里还有一个需要我们注意的地方，我们知道我们为了网站优化减少http请求次数，通常都把一些图标集合起来做成一个大的精灵图，这时候可能需要我们改变的就是图片的位置background-position。其实除了这种方法我们还可以把这些图片转成base64格式，让其已代码的形式存在于css中，这样既减少了http请求次数，还方便我们的项目构造，真的很方便实用，像vue的脚手架工具vue-cli就会自动为我们把一些小图片打包到css当中，非常方便，当然这些都是题外话了。</p>\n<p>　　还有今天是儿童节，祝大家永远18睡,还有哦，文章开头的图片是我家新成员 咋地了，哈哈<del>~</del>~下次会专门更新篇博客来重大介绍一下我家新成员o(^▽^)o<del>~</del><del>~</del></p>\n<div align=\"center\" style=\"overflow:hidden\"><br>    <img src=\"../../../../img/2017-6/20170601115946.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601115955.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120000.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120005.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120010.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120014.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120019.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120023.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><img src=\"../../../../img/2017-6/20170601120029.jpg\" width=\"300\" height=\"300\" style=\"display:inline-block;float:left;vertical-align:top\"><br>    </div>\n\n<p>　　</p>"},{"title":"手把手教你如何用node.js创建一个聊天室","date":"2017-04-06T01:55:28.000Z","_content":"摘要:\n    　　node.js无疑是当下最火的前端构建后台的的工具，包括一些gulp，webpack，grunt，都是建立在node.js之上的。node的强大可以说可以帮前端光用JS就可以实现一些。今天就分享一波如何用node.js里面最简单的一些module实现一个简单的聊天室\n    <div align=center style=\"height:200px;\">\n    <img src=\"../../../../img/2017-4/timg (1).jpg\" width=\"490\" height=\"132\" />\n    </div>\n    <!-- more -->\n正文:\n　　话不多说，先上代码：\n```\nvar net = require(\"net\"); //应用模块\nvar userCount = 0;  //记录当前用户数量\nvar users = {};      //记录用户信息\nvar server = net.createServer(function(c){\n   var nickname = \"\";  //创建一个变量，用于保存新建用户名\n   userCount ++;\n   var message ='';   //创建一个空字符串用于接收用户输入的信息片段\n   c.setEncoding(\"utf8\");  //设置新建连接的编码格式为utf-8\n   c.on(\"data\",function(data){  //绑定一个data事件，用于监听客户端的输入操作\n       if(data !=\"\\r\\n\"){   //判定如果输入的不是回车，则把输入的信息片段拼接起来\n           message += data;\n           return;\n       }\n       else{\n           if(!nickname){  //判断如果此链接不存在昵称，则是首次联结聊天室\n               if(users[message]) //如果用户输入的昵称已经存在，则重新输入\n               {\n                   c.write(\"the nick your putin had already exist , please again : \\r\\n\");\n                   return;\n               }\n               else{\n                   for(var i in users){\n                       users[i].write( message + \" has already connected in ~\\r\\n\"); //新用户链接，给其他用户发送公告\n                   }\n                   nickname = message;  //保存用户输入的昵称\n                   users[message] = c;  //把每个新创建的连接添加到用户群组中\n                   userCount ++;  //用户数加1\n                   var curUsers = Object.keys(users);\n                   console.log(\"current users : \" + curUsers);\n                   c.write(\"alright , your name is :\" + message + \"\\r\\n\");\n                   c.write(\"current users : \" + curUsers +\"\\r\\n\");\n                   c.write(\"please input your message:\\r\\n\");\n               }\n           }\n           else{\n               c.write(\"your says:\" + message +\"\\r\\n\"); //在当前客户端打印你输入的信息\n               for(var i in users){\n                  if (i != nickname){\n                      users[i].write(nickname + \" says : \" + message +\"\\r\\n\");  //广播当前连接发送的信息\n                  }\n               }\n           }\n           message = \"\";\n           return;\n       }\n\n   });\n    c.on(\"close\",function () {  //连接关闭删除用户\n       delete users[nickname];\n        userCount --;  //用户数量减减\n        console.log(nickname + \" quite !\"); //服务端打印出退出的用户\n    });\n   c.write(\"hello~ please input your nickname and then press Enter: \\r\\n\");\n}).listen(3000,function(){  //监听端口3000\n   console.log(\"server bound !\");\n});\n```\n　　怎么安装node就不详细介绍了，自己百度下吧。然后新建项目，创建一个index.js，然后把上述代码复制进去，然后再doc界面输入node index启动服务，这样服务端就大功告成了。然后客户端用windows跟mac都自带有的telnet来测试（这里需要注意，一般电脑上的telnet进程是默认关闭的，可以百度一下先把这个服务打开），然后再运行用输入telnet 127.0.0.1:3000，就能连接到我们的服务端了。\n<div align=center>\n    <img src=\"../../../../img/2017-4/QQ20170406110609.png\" width=\"400\" height=\"220\" />\n    </div>\n　　看下代码逻辑：首先我们这里只用到了一个node里面叫\"net\"的模块，这个模块跟\"http\"模块相似，都可以用.createServer来创建服务，然后每个createServer里面接收的参数（c）就是我们可以操作的连接，每次新进来一个用户你就可以理解为新创建了一个c变量。然后我们监听每个连接的数据传送就是监听c的data事件，监听每个连接的关闭事件，就是监听c的close事件，连接的编码格式就是c.setEncoding(\"utf8\")。这样讲就非常好理解了。 我们这里用了users[message] = c用了这样一句话把每个新建连接保存在一个对象之中，然后每次给所有用户广播消息的时候只需一个循环给对象里的每个连接都发送一次当前客户端发送的消息，就可以啦！\n　　但是这里有一个点非常需要注意，我们监听c的data事件，是每次有变动就触发的。意思就是 if(data !=\"\\r\\n\") 如果你不主动判断一下是否输入了回车字符的话，每次你输入一个字母，data事件就给我们返回一个字母，更像一种流传送的形式。所以我们这里用回车来截断一下，判定每次用户输入回车为一段完整字符串的输入，不然的话就把字符片段与之前的片段拼接在一块，这样每次看到的就是一段完整的话了。\n　　好了，大概介绍这么多，有什么不懂的可以给我留言啦。\n　　","source":"_posts/手把手教你如何用node-js创建一个聊天室.md","raw":"---\ntitle: 手把手教你如何用node.js创建一个聊天室\ndate: 2017-04-06 09:55:28\ncategories:\n  - 开发\ntags:\n    - 前端\n    - 聊天室\n    - node.js\n---\n摘要:\n    　　node.js无疑是当下最火的前端构建后台的的工具，包括一些gulp，webpack，grunt，都是建立在node.js之上的。node的强大可以说可以帮前端光用JS就可以实现一些。今天就分享一波如何用node.js里面最简单的一些module实现一个简单的聊天室\n    <div align=center style=\"height:200px;\">\n    <img src=\"../../../../img/2017-4/timg (1).jpg\" width=\"490\" height=\"132\" />\n    </div>\n    <!-- more -->\n正文:\n　　话不多说，先上代码：\n```\nvar net = require(\"net\"); //应用模块\nvar userCount = 0;  //记录当前用户数量\nvar users = {};      //记录用户信息\nvar server = net.createServer(function(c){\n   var nickname = \"\";  //创建一个变量，用于保存新建用户名\n   userCount ++;\n   var message ='';   //创建一个空字符串用于接收用户输入的信息片段\n   c.setEncoding(\"utf8\");  //设置新建连接的编码格式为utf-8\n   c.on(\"data\",function(data){  //绑定一个data事件，用于监听客户端的输入操作\n       if(data !=\"\\r\\n\"){   //判定如果输入的不是回车，则把输入的信息片段拼接起来\n           message += data;\n           return;\n       }\n       else{\n           if(!nickname){  //判断如果此链接不存在昵称，则是首次联结聊天室\n               if(users[message]) //如果用户输入的昵称已经存在，则重新输入\n               {\n                   c.write(\"the nick your putin had already exist , please again : \\r\\n\");\n                   return;\n               }\n               else{\n                   for(var i in users){\n                       users[i].write( message + \" has already connected in ~\\r\\n\"); //新用户链接，给其他用户发送公告\n                   }\n                   nickname = message;  //保存用户输入的昵称\n                   users[message] = c;  //把每个新创建的连接添加到用户群组中\n                   userCount ++;  //用户数加1\n                   var curUsers = Object.keys(users);\n                   console.log(\"current users : \" + curUsers);\n                   c.write(\"alright , your name is :\" + message + \"\\r\\n\");\n                   c.write(\"current users : \" + curUsers +\"\\r\\n\");\n                   c.write(\"please input your message:\\r\\n\");\n               }\n           }\n           else{\n               c.write(\"your says:\" + message +\"\\r\\n\"); //在当前客户端打印你输入的信息\n               for(var i in users){\n                  if (i != nickname){\n                      users[i].write(nickname + \" says : \" + message +\"\\r\\n\");  //广播当前连接发送的信息\n                  }\n               }\n           }\n           message = \"\";\n           return;\n       }\n\n   });\n    c.on(\"close\",function () {  //连接关闭删除用户\n       delete users[nickname];\n        userCount --;  //用户数量减减\n        console.log(nickname + \" quite !\"); //服务端打印出退出的用户\n    });\n   c.write(\"hello~ please input your nickname and then press Enter: \\r\\n\");\n}).listen(3000,function(){  //监听端口3000\n   console.log(\"server bound !\");\n});\n```\n　　怎么安装node就不详细介绍了，自己百度下吧。然后新建项目，创建一个index.js，然后把上述代码复制进去，然后再doc界面输入node index启动服务，这样服务端就大功告成了。然后客户端用windows跟mac都自带有的telnet来测试（这里需要注意，一般电脑上的telnet进程是默认关闭的，可以百度一下先把这个服务打开），然后再运行用输入telnet 127.0.0.1:3000，就能连接到我们的服务端了。\n<div align=center>\n    <img src=\"../../../../img/2017-4/QQ20170406110609.png\" width=\"400\" height=\"220\" />\n    </div>\n　　看下代码逻辑：首先我们这里只用到了一个node里面叫\"net\"的模块，这个模块跟\"http\"模块相似，都可以用.createServer来创建服务，然后每个createServer里面接收的参数（c）就是我们可以操作的连接，每次新进来一个用户你就可以理解为新创建了一个c变量。然后我们监听每个连接的数据传送就是监听c的data事件，监听每个连接的关闭事件，就是监听c的close事件，连接的编码格式就是c.setEncoding(\"utf8\")。这样讲就非常好理解了。 我们这里用了users[message] = c用了这样一句话把每个新建连接保存在一个对象之中，然后每次给所有用户广播消息的时候只需一个循环给对象里的每个连接都发送一次当前客户端发送的消息，就可以啦！\n　　但是这里有一个点非常需要注意，我们监听c的data事件，是每次有变动就触发的。意思就是 if(data !=\"\\r\\n\") 如果你不主动判断一下是否输入了回车字符的话，每次你输入一个字母，data事件就给我们返回一个字母，更像一种流传送的形式。所以我们这里用回车来截断一下，判定每次用户输入回车为一段完整字符串的输入，不然的话就把字符片段与之前的片段拼接在一块，这样每次看到的就是一段完整的话了。\n　　好了，大概介绍这么多，有什么不懂的可以给我留言啦。\n　　","slug":"手把手教你如何用node-js创建一个聊天室","published":1,"updated":"2017-09-29T06:39:35.274Z","_id":"cj764c8md000sw0d0059c1f27","comments":1,"layout":"post","photos":[],"link":"","content":"<p>摘要:<br>    　　node.js无疑是当下最火的前端构建后台的的工具，包括一些gulp，webpack，grunt，都是建立在node.js之上的。node的强大可以说可以帮前端光用JS就可以实现一些。今天就分享一波如何用node.js里面最简单的一些module实现一个简单的聊天室<br>    <div align=\"center\" style=\"height:200px;\"><br>    <img src=\"../../../../img/2017-4/timg (1).jpg\" width=\"490\" height=\"132\"><br>    </div><br>    <a id=\"more\"></a><br>正文:<br>　　话不多说，先上代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">\"net\"</span>); <span class=\"comment\">//应用模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> userCount = <span class=\"number\">0</span>;  <span class=\"comment\">//记录当前用户数量</span></div><div class=\"line\"><span class=\"keyword\">var</span> users = &#123;&#125;;      <span class=\"comment\">//记录用户信息</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = net.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> nickname = <span class=\"string\">\"\"</span>;  <span class=\"comment\">//创建一个变量，用于保存新建用户名</span></div><div class=\"line\">   userCount ++;</div><div class=\"line\">   <span class=\"keyword\">var</span> message =<span class=\"string\">''</span>;   <span class=\"comment\">//创建一个空字符串用于接收用户输入的信息片段</span></div><div class=\"line\">   c.setEncoding(<span class=\"string\">\"utf8\"</span>);  <span class=\"comment\">//设置新建连接的编码格式为utf-8</span></div><div class=\"line\">   c.on(<span class=\"string\">\"data\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;  <span class=\"comment\">//绑定一个data事件，用于监听客户端的输入操作</span></div><div class=\"line\">       <span class=\"keyword\">if</span>(data !=<span class=\"string\">\"\\r\\n\"</span>)&#123;   <span class=\"comment\">//判定如果输入的不是回车，则把输入的信息片段拼接起来</span></div><div class=\"line\">           message += data;</div><div class=\"line\">           <span class=\"keyword\">return</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">           <span class=\"keyword\">if</span>(!nickname)&#123;  <span class=\"comment\">//判断如果此链接不存在昵称，则是首次联结聊天室</span></div><div class=\"line\">               <span class=\"keyword\">if</span>(users[message]) <span class=\"comment\">//如果用户输入的昵称已经存在，则重新输入</span></div><div class=\"line\">               &#123;</div><div class=\"line\">                   c.write(<span class=\"string\">\"the nick your putin had already exist , please again : \\r\\n\"</span>);</div><div class=\"line\">                   <span class=\"keyword\">return</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> users)&#123;</div><div class=\"line\">                       users[i].write( message + <span class=\"string\">\" has already connected in ~\\r\\n\"</span>); <span class=\"comment\">//新用户链接，给其他用户发送公告</span></div><div class=\"line\">                   &#125;</div><div class=\"line\">                   nickname = message;  <span class=\"comment\">//保存用户输入的昵称</span></div><div class=\"line\">                   users[message] = c;  <span class=\"comment\">//把每个新创建的连接添加到用户群组中</span></div><div class=\"line\">                   userCount ++;  <span class=\"comment\">//用户数加1</span></div><div class=\"line\">                   <span class=\"keyword\">var</span> curUsers = <span class=\"built_in\">Object</span>.keys(users);</div><div class=\"line\">                   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"current users : \"</span> + curUsers);</div><div class=\"line\">                   c.write(<span class=\"string\">\"alright , your name is :\"</span> + message + <span class=\"string\">\"\\r\\n\"</span>);</div><div class=\"line\">                   c.write(<span class=\"string\">\"current users : \"</span> + curUsers +<span class=\"string\">\"\\r\\n\"</span>);</div><div class=\"line\">                   c.write(<span class=\"string\">\"please input your message:\\r\\n\"</span>);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">               c.write(<span class=\"string\">\"your says:\"</span> + message +<span class=\"string\">\"\\r\\n\"</span>); <span class=\"comment\">//在当前客户端打印你输入的信息</span></div><div class=\"line\">               <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> users)&#123;</div><div class=\"line\">                  <span class=\"keyword\">if</span> (i != nickname)&#123;</div><div class=\"line\">                      users[i].write(nickname + <span class=\"string\">\" says : \"</span> + message +<span class=\"string\">\"\\r\\n\"</span>);  <span class=\"comment\">//广播当前连接发送的信息</span></div><div class=\"line\">                  &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           message = <span class=\"string\">\"\"</span>;</div><div class=\"line\">           <span class=\"keyword\">return</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;);</div><div class=\"line\">    c.on(<span class=\"string\">\"close\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">//连接关闭删除用户</span></div><div class=\"line\">       <span class=\"keyword\">delete</span> users[nickname];</div><div class=\"line\">        userCount --;  <span class=\"comment\">//用户数量减减</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(nickname + <span class=\"string\">\" quite !\"</span>); <span class=\"comment\">//服务端打印出退出的用户</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">   c.write(<span class=\"string\">\"hello~ please input your nickname and then press Enter: \\r\\n\"</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  <span class=\"comment\">//监听端口3000</span></div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"server bound !\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>　　怎么安装node就不详细介绍了，自己百度下吧。然后新建项目，创建一个index.js，然后把上述代码复制进去，然后再doc界面输入node index启动服务，这样服务端就大功告成了。然后客户端用windows跟mac都自带有的telnet来测试（这里需要注意，一般电脑上的telnet进程是默认关闭的，可以百度一下先把这个服务打开），然后再运行用输入telnet 127.0.0.1:3000，就能连接到我们的服务端了。</p>\n<p><div align=\"center\"><br>    <img src=\"../../../../img/2017-4/QQ20170406110609.png\" width=\"400\" height=\"220\"><br>    </div><br>　　看下代码逻辑：首先我们这里只用到了一个node里面叫”net”的模块，这个模块跟”http”模块相似，都可以用.createServer来创建服务，然后每个createServer里面接收的参数（c）就是我们可以操作的连接，每次新进来一个用户你就可以理解为新创建了一个c变量。然后我们监听每个连接的数据传送就是监听c的data事件，监听每个连接的关闭事件，就是监听c的close事件，连接的编码格式就是c.setEncoding(“utf8”)。这样讲就非常好理解了。 我们这里用了users[message] = c用了这样一句话把每个新建连接保存在一个对象之中，然后每次给所有用户广播消息的时候只需一个循环给对象里的每个连接都发送一次当前客户端发送的消息，就可以啦！<br>　　但是这里有一个点非常需要注意，我们监听c的data事件，是每次有变动就触发的。意思就是 if(data !=”\\r\\n”) 如果你不主动判断一下是否输入了回车字符的话，每次你输入一个字母，data事件就给我们返回一个字母，更像一种流传送的形式。所以我们这里用回车来截断一下，判定每次用户输入回车为一段完整字符串的输入，不然的话就把字符片段与之前的片段拼接在一块，这样每次看到的就是一段完整的话了。<br>　　好了，大概介绍这么多，有什么不懂的可以给我留言啦。\n　　</p>\n","site":{"data":{}},"excerpt":"<p>摘要:<br>    　　node.js无疑是当下最火的前端构建后台的的工具，包括一些gulp，webpack，grunt，都是建立在node.js之上的。node的强大可以说可以帮前端光用JS就可以实现一些。今天就分享一波如何用node.js里面最简单的一些module实现一个简单的聊天室<br>    <div align=\"center\" style=\"height:200px;\"><br>    <img src=\"../../../../img/2017-4/timg (1).jpg\" width=\"490\" height=\"132\"><br>    </div><br>","more":"<br>正文:<br>　　话不多说，先上代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">\"net\"</span>); <span class=\"comment\">//应用模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> userCount = <span class=\"number\">0</span>;  <span class=\"comment\">//记录当前用户数量</span></div><div class=\"line\"><span class=\"keyword\">var</span> users = &#123;&#125;;      <span class=\"comment\">//记录用户信息</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = net.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> nickname = <span class=\"string\">\"\"</span>;  <span class=\"comment\">//创建一个变量，用于保存新建用户名</span></div><div class=\"line\">   userCount ++;</div><div class=\"line\">   <span class=\"keyword\">var</span> message =<span class=\"string\">''</span>;   <span class=\"comment\">//创建一个空字符串用于接收用户输入的信息片段</span></div><div class=\"line\">   c.setEncoding(<span class=\"string\">\"utf8\"</span>);  <span class=\"comment\">//设置新建连接的编码格式为utf-8</span></div><div class=\"line\">   c.on(<span class=\"string\">\"data\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;  <span class=\"comment\">//绑定一个data事件，用于监听客户端的输入操作</span></div><div class=\"line\">       <span class=\"keyword\">if</span>(data !=<span class=\"string\">\"\\r\\n\"</span>)&#123;   <span class=\"comment\">//判定如果输入的不是回车，则把输入的信息片段拼接起来</span></div><div class=\"line\">           message += data;</div><div class=\"line\">           <span class=\"keyword\">return</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">           <span class=\"keyword\">if</span>(!nickname)&#123;  <span class=\"comment\">//判断如果此链接不存在昵称，则是首次联结聊天室</span></div><div class=\"line\">               <span class=\"keyword\">if</span>(users[message]) <span class=\"comment\">//如果用户输入的昵称已经存在，则重新输入</span></div><div class=\"line\">               &#123;</div><div class=\"line\">                   c.write(<span class=\"string\">\"the nick your putin had already exist , please again : \\r\\n\"</span>);</div><div class=\"line\">                   <span class=\"keyword\">return</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> users)&#123;</div><div class=\"line\">                       users[i].write( message + <span class=\"string\">\" has already connected in ~\\r\\n\"</span>); <span class=\"comment\">//新用户链接，给其他用户发送公告</span></div><div class=\"line\">                   &#125;</div><div class=\"line\">                   nickname = message;  <span class=\"comment\">//保存用户输入的昵称</span></div><div class=\"line\">                   users[message] = c;  <span class=\"comment\">//把每个新创建的连接添加到用户群组中</span></div><div class=\"line\">                   userCount ++;  <span class=\"comment\">//用户数加1</span></div><div class=\"line\">                   <span class=\"keyword\">var</span> curUsers = <span class=\"built_in\">Object</span>.keys(users);</div><div class=\"line\">                   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"current users : \"</span> + curUsers);</div><div class=\"line\">                   c.write(<span class=\"string\">\"alright , your name is :\"</span> + message + <span class=\"string\">\"\\r\\n\"</span>);</div><div class=\"line\">                   c.write(<span class=\"string\">\"current users : \"</span> + curUsers +<span class=\"string\">\"\\r\\n\"</span>);</div><div class=\"line\">                   c.write(<span class=\"string\">\"please input your message:\\r\\n\"</span>);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">               c.write(<span class=\"string\">\"your says:\"</span> + message +<span class=\"string\">\"\\r\\n\"</span>); <span class=\"comment\">//在当前客户端打印你输入的信息</span></div><div class=\"line\">               <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> users)&#123;</div><div class=\"line\">                  <span class=\"keyword\">if</span> (i != nickname)&#123;</div><div class=\"line\">                      users[i].write(nickname + <span class=\"string\">\" says : \"</span> + message +<span class=\"string\">\"\\r\\n\"</span>);  <span class=\"comment\">//广播当前连接发送的信息</span></div><div class=\"line\">                  &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           message = <span class=\"string\">\"\"</span>;</div><div class=\"line\">           <span class=\"keyword\">return</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;);</div><div class=\"line\">    c.on(<span class=\"string\">\"close\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">//连接关闭删除用户</span></div><div class=\"line\">       <span class=\"keyword\">delete</span> users[nickname];</div><div class=\"line\">        userCount --;  <span class=\"comment\">//用户数量减减</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(nickname + <span class=\"string\">\" quite !\"</span>); <span class=\"comment\">//服务端打印出退出的用户</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">   c.write(<span class=\"string\">\"hello~ please input your nickname and then press Enter: \\r\\n\"</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  <span class=\"comment\">//监听端口3000</span></div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"server bound !\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>　　怎么安装node就不详细介绍了，自己百度下吧。然后新建项目，创建一个index.js，然后把上述代码复制进去，然后再doc界面输入node index启动服务，这样服务端就大功告成了。然后客户端用windows跟mac都自带有的telnet来测试（这里需要注意，一般电脑上的telnet进程是默认关闭的，可以百度一下先把这个服务打开），然后再运行用输入telnet 127.0.0.1:3000，就能连接到我们的服务端了。</p>\n<p><div align=\"center\"><br>    <img src=\"../../../../img/2017-4/QQ20170406110609.png\" width=\"400\" height=\"220\"><br>    </div><br>　　看下代码逻辑：首先我们这里只用到了一个node里面叫”net”的模块，这个模块跟”http”模块相似，都可以用.createServer来创建服务，然后每个createServer里面接收的参数（c）就是我们可以操作的连接，每次新进来一个用户你就可以理解为新创建了一个c变量。然后我们监听每个连接的数据传送就是监听c的data事件，监听每个连接的关闭事件，就是监听c的close事件，连接的编码格式就是c.setEncoding(“utf8”)。这样讲就非常好理解了。 我们这里用了users[message] = c用了这样一句话把每个新建连接保存在一个对象之中，然后每次给所有用户广播消息的时候只需一个循环给对象里的每个连接都发送一次当前客户端发送的消息，就可以啦！<br>　　但是这里有一个点非常需要注意，我们监听c的data事件，是每次有变动就触发的。意思就是 if(data !=”\\r\\n”) 如果你不主动判断一下是否输入了回车字符的话，每次你输入一个字母，data事件就给我们返回一个字母，更像一种流传送的形式。所以我们这里用回车来截断一下，判定每次用户输入回车为一段完整字符串的输入，不然的话就把字符片段与之前的片段拼接在一块，这样每次看到的就是一段完整的话了。<br>　　好了，大概介绍这么多，有什么不懂的可以给我留言啦。\n　　</p>"},{"title":"分享一个H5与app交互获取分享成功回调的案例","date":"2017-09-28T07:48:02.000Z","_content":"摘要:\n　　最近忙的要死，因为赶上十一，今年的十一又和中秋重叠了（所以放那么多天假。。），所以公司一下主推了两个活动，这可真是把我忙坏了。。但是忙归忙，还是有一些小功能很有意思，这次就给大家主要分享一下跟app交互，获取用户分享成功的案例把。\n    <div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/thinking.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n<h1 style=\"color:#3a3a3a;\">正文：</h1><h3 style=\"color:#3a3a3a;\">案例场景：</h3>\n\n　　场景大概是这样的：公司做一个抽奖活动，抽奖次数呢是需要用户成功分享到微信或者朋友圈，这个时候才能获得一次抽奖机会。而我们的H5是在嵌在原生app里面的webview，分享的方法也是调用原生的方法，所以分享成功的回调其实是需要app端来传给我们的。那么好，问题来了，‘分享成功’这个要怎么判定呢？当时给出了以下几种方案：\n　　1.第一个方案是给分享出的页面带上用户的id与token，用户点开页面与后台交互加一次抽奖次数。但是这种方案很快被产品否定了，因为这样的话分享前就需要用户登录才能给用户分享出去的页面带用户信息。\n　　2.第二个方案是用户点击分享按钮就算分享成功，加一次分享次数，这种方法直接被我据了，这么low说真的我连做的的欲望都没有\n　　3.第三个方案就是用户点击H5的分享按钮，然后弹出app原生的分享到微信还是qq的弹层，点击弹层里面的qq或者微信的图标才算分享成功。我觉得这个这个还不错，而且app端人员也提出了一个很让我惊喜的事情，就是他们可以手动调用我们的js方法，只要我们在浏览器里的控制台里面能直接调用的方法，app都可以调用。所以解决方案就是：点击微信或者qq的图标，app端就调用我们的js方法，方法内是我们H5告知后台分享成功的ajax请求。\n　　光说不太直观，上个图把：\n<div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/20170928170434.jpg\"  style=\"display:inline-block;vertical-align:top;max-width:375px;\"></div>\n    如上图，遮罩后面的页面是原生H5的，前面那个分享的弹层是原生app的，这样看就比较直观了把。\n　　但是到最后逼逼叨叨了半天，还是选了第二种我觉得很low的方案，因为产品提出了我们忽略的一个重大问题：第二方案个需要app发版，用户不更新怎么办？不更新怎么办。。。。怎么办。。。此刻我的内心如下图。。。\n<div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/20170928174329.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n　　卒。。。。\n　　最后还有一个很偏门的问题分享给大家：你们之前有没有碰见过很奇葩的微信分享的icon莫名失效的，像下图：\n<div align=left style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/20170928174908.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n　　我们都要上线了，突然发现这个问题，一只排查代码到晚上十一二点，后来发现不是代码问题？居然是分享的title跟content有问题。。。。这是微信的限制，如果分享内容有敏感词汇的话，图片上传就出问题了。。。这个问题简直神踏马。。。。。\n　　好吧，这次分享内容就到这，没什么代码干货，纯逻辑，希望对各位同学有帮助。最后放上一张咋滴了囧图震楼，哈哈哈哈哈\n<div align=left style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/20170928191842.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n\n","source":"_posts/分享一个H5与app交互获取分享成功回调的案例.md","raw":"---\ntitle: 分享一个H5与app交互获取分享成功回调的案例\ndate: 2017-09-28 15:48:02\ncategories:\n  - 开发\ntags:\n    - js\n    - 业务\n---\n摘要:\n　　最近忙的要死，因为赶上十一，今年的十一又和中秋重叠了（所以放那么多天假。。），所以公司一下主推了两个活动，这可真是把我忙坏了。。但是忙归忙，还是有一些小功能很有意思，这次就给大家主要分享一下跟app交互，获取用户分享成功的案例把。\n    <div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/thinking.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n<h1 style=\"color:#3a3a3a;\">正文：</h1><h3 style=\"color:#3a3a3a;\">案例场景：</h3>\n\n　　场景大概是这样的：公司做一个抽奖活动，抽奖次数呢是需要用户成功分享到微信或者朋友圈，这个时候才能获得一次抽奖机会。而我们的H5是在嵌在原生app里面的webview，分享的方法也是调用原生的方法，所以分享成功的回调其实是需要app端来传给我们的。那么好，问题来了，‘分享成功’这个要怎么判定呢？当时给出了以下几种方案：\n　　1.第一个方案是给分享出的页面带上用户的id与token，用户点开页面与后台交互加一次抽奖次数。但是这种方案很快被产品否定了，因为这样的话分享前就需要用户登录才能给用户分享出去的页面带用户信息。\n　　2.第二个方案是用户点击分享按钮就算分享成功，加一次分享次数，这种方法直接被我据了，这么low说真的我连做的的欲望都没有\n　　3.第三个方案就是用户点击H5的分享按钮，然后弹出app原生的分享到微信还是qq的弹层，点击弹层里面的qq或者微信的图标才算分享成功。我觉得这个这个还不错，而且app端人员也提出了一个很让我惊喜的事情，就是他们可以手动调用我们的js方法，只要我们在浏览器里的控制台里面能直接调用的方法，app都可以调用。所以解决方案就是：点击微信或者qq的图标，app端就调用我们的js方法，方法内是我们H5告知后台分享成功的ajax请求。\n　　光说不太直观，上个图把：\n<div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/20170928170434.jpg\"  style=\"display:inline-block;vertical-align:top;max-width:375px;\"></div>\n    如上图，遮罩后面的页面是原生H5的，前面那个分享的弹层是原生app的，这样看就比较直观了把。\n　　但是到最后逼逼叨叨了半天，还是选了第二种我觉得很low的方案，因为产品提出了我们忽略的一个重大问题：第二方案个需要app发版，用户不更新怎么办？不更新怎么办。。。。怎么办。。。此刻我的内心如下图。。。\n<div align=center style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/20170928174329.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n　　卒。。。。\n　　最后还有一个很偏门的问题分享给大家：你们之前有没有碰见过很奇葩的微信分享的icon莫名失效的，像下图：\n<div align=left style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/20170928174908.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n　　我们都要上线了，突然发现这个问题，一只排查代码到晚上十一二点，后来发现不是代码问题？居然是分享的title跟content有问题。。。。这是微信的限制，如果分享内容有敏感词汇的话，图片上传就出问题了。。。这个问题简直神踏马。。。。。\n　　好吧，这次分享内容就到这，没什么代码干货，纯逻辑，希望对各位同学有帮助。最后放上一张咋滴了囧图震楼，哈哈哈哈哈\n<div align=left style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/20170928191842.jpg\"  style=\"display:inline-block;vertical-align:top\"></div>\n\n","slug":"分享一个H5与app交互获取分享成功回调的案例","published":1,"updated":"2017-09-28T11:29:42.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj85iyc8400000wd0p13cex8v","content":"<p>摘要:<br>　　最近忙的要死，因为赶上十一，今年的十一又和中秋重叠了（所以放那么多天假。。），所以公司一下主推了两个活动，这可真是把我忙坏了。。但是忙归忙，还是有一些小功能很有意思，这次就给大家主要分享一下跟app交互，获取用户分享成功的案例把。<br>    <div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/thinking.jpg\" style=\"display:inline-block;vertical-align:top\"></div></p>\n<p></p><h1 style=\"color:#3a3a3a;\">正文：</h1><h3 style=\"color:#3a3a3a;\">案例场景：</h3><p></p>\n<p>　　场景大概是这样的：公司做一个抽奖活动，抽奖次数呢是需要用户成功分享到微信或者朋友圈，这个时候才能获得一次抽奖机会。而我们的H5是在嵌在原生app里面的webview，分享的方法也是调用原生的方法，所以分享成功的回调其实是需要app端来传给我们的。那么好，问题来了，‘分享成功’这个要怎么判定呢？当时给出了以下几种方案：<br>　　1.第一个方案是给分享出的页面带上用户的id与token，用户点开页面与后台交互加一次抽奖次数。但是这种方案很快被产品否定了，因为这样的话分享前就需要用户登录才能给用户分享出去的页面带用户信息。<br>　　2.第二个方案是用户点击分享按钮就算分享成功，加一次分享次数，这种方法直接被我据了，这么low说真的我连做的的欲望都没有<br>　　3.第三个方案就是用户点击H5的分享按钮，然后弹出app原生的分享到微信还是qq的弹层，点击弹层里面的qq或者微信的图标才算分享成功。我觉得这个这个还不错，而且app端人员也提出了一个很让我惊喜的事情，就是他们可以手动调用我们的js方法，只要我们在浏览器里的控制台里面能直接调用的方法，app都可以调用。所以解决方案就是：点击微信或者qq的图标，app端就调用我们的js方法，方法内是我们H5告知后台分享成功的ajax请求。<br>　　光说不太直观，上个图把：</p>\n<div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/20170928170434.jpg\" style=\"display:inline-block;vertical-align:top;max-width:375px;\"></div><br>    如上图，遮罩后面的页面是原生H5的，前面那个分享的弹层是原生app的，这样看就比较直观了把。<br>　　但是到最后逼逼叨叨了半天，还是选了第二种我觉得很low的方案，因为产品提出了我们忽略的一个重大问题：第二方案个需要app发版，用户不更新怎么办？不更新怎么办。。。。怎么办。。。此刻我的内心如下图。。。<br><div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/20170928174329.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br>　　卒。。。。<br>　　最后还有一个很偏门的问题分享给大家：你们之前有没有碰见过很奇葩的微信分享的icon莫名失效的，像下图：<br><div align=\"left\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/20170928174908.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br>　　我们都要上线了，突然发现这个问题，一只排查代码到晚上十一二点，后来发现不是代码问题？居然是分享的title跟content有问题。。。。这是微信的限制，如果分享内容有敏感词汇的话，图片上传就出问题了。。。这个问题简直神踏马。。。。。<br>　　好吧，这次分享内容就到这，没什么代码干货，纯逻辑，希望对各位同学有帮助。最后放上一张咋滴了囧图震楼，哈哈哈哈哈<br><div align=\"left\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/20170928191842.jpg\" style=\"display:inline-block;vertical-align:top\"></div>\n\n","site":{"data":{}},"excerpt":"","more":"<p>摘要:<br>　　最近忙的要死，因为赶上十一，今年的十一又和中秋重叠了（所以放那么多天假。。），所以公司一下主推了两个活动，这可真是把我忙坏了。。但是忙归忙，还是有一些小功能很有意思，这次就给大家主要分享一下跟app交互，获取用户分享成功的案例把。<br>    <div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/thinking.jpg\" style=\"display:inline-block;vertical-align:top\"></div></p>\n<p></p><h1 style=\"color:#3a3a3a;\">正文：</h1><h3 style=\"color:#3a3a3a;\">案例场景：</h3><p></p>\n<p>　　场景大概是这样的：公司做一个抽奖活动，抽奖次数呢是需要用户成功分享到微信或者朋友圈，这个时候才能获得一次抽奖机会。而我们的H5是在嵌在原生app里面的webview，分享的方法也是调用原生的方法，所以分享成功的回调其实是需要app端来传给我们的。那么好，问题来了，‘分享成功’这个要怎么判定呢？当时给出了以下几种方案：<br>　　1.第一个方案是给分享出的页面带上用户的id与token，用户点开页面与后台交互加一次抽奖次数。但是这种方案很快被产品否定了，因为这样的话分享前就需要用户登录才能给用户分享出去的页面带用户信息。<br>　　2.第二个方案是用户点击分享按钮就算分享成功，加一次分享次数，这种方法直接被我据了，这么low说真的我连做的的欲望都没有<br>　　3.第三个方案就是用户点击H5的分享按钮，然后弹出app原生的分享到微信还是qq的弹层，点击弹层里面的qq或者微信的图标才算分享成功。我觉得这个这个还不错，而且app端人员也提出了一个很让我惊喜的事情，就是他们可以手动调用我们的js方法，只要我们在浏览器里的控制台里面能直接调用的方法，app都可以调用。所以解决方案就是：点击微信或者qq的图标，app端就调用我们的js方法，方法内是我们H5告知后台分享成功的ajax请求。<br>　　光说不太直观，上个图把：</p>\n<div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/20170928170434.jpg\" style=\"display:inline-block;vertical-align:top;max-width:375px;\"></div><br>    如上图，遮罩后面的页面是原生H5的，前面那个分享的弹层是原生app的，这样看就比较直观了把。<br>　　但是到最后逼逼叨叨了半天，还是选了第二种我觉得很low的方案，因为产品提出了我们忽略的一个重大问题：第二方案个需要app发版，用户不更新怎么办？不更新怎么办。。。。怎么办。。。此刻我的内心如下图。。。<br><div align=\"center\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/20170928174329.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br>　　卒。。。。<br>　　最后还有一个很偏门的问题分享给大家：你们之前有没有碰见过很奇葩的微信分享的icon莫名失效的，像下图：<br><div align=\"left\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/20170928174908.jpg\" style=\"display:inline-block;vertical-align:top\"></div><br>　　我们都要上线了，突然发现这个问题，一只排查代码到晚上十一二点，后来发现不是代码问题？居然是分享的title跟content有问题。。。。这是微信的限制，如果分享内容有敏感词汇的话，图片上传就出问题了。。。这个问题简直神踏马。。。。。<br>　　好吧，这次分享内容就到这，没什么代码干货，纯逻辑，希望对各位同学有帮助。最后放上一张咋滴了囧图震楼，哈哈哈哈哈<br><div align=\"left\" style=\"overflow:hidden\"><img src=\"../../../../img/2017-9/20170928191842.jpg\" style=\"display:inline-block;vertical-align:top\"></div>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj764c8l20000w0d0a2pbqlqz","category_id":"cj764c8ld0002w0d0gqi0vbwf","_id":"cj764c8lv000aw0d03h3h5gn3"},{"post_id":"cj764c8lt0009w0d04uf7vx3q","category_id":"cj764c8ld0002w0d0gqi0vbwf","_id":"cj764c8lz000fw0d0em3adkpo"},{"post_id":"cj764c8lh0004w0d0xkoq2vir","category_id":"cj764c8ld0002w0d0gqi0vbwf","_id":"cj764c8m2000jw0d0l54drelj"},{"post_id":"cj764c8lv000bw0d0adq0s9qx","category_id":"cj764c8ld0002w0d0gqi0vbwf","_id":"cj764c8m9000mw0d0cdql3o1h"},{"post_id":"cj764c8lx000ew0d0h48i9cog","category_id":"cj764c8ld0002w0d0gqi0vbwf","_id":"cj764c8mc000qw0d0z7llr4r1"},{"post_id":"cj764c8lk0005w0d0t39ln4xm","category_id":"cj764c8lw000cw0d0t68dsy6r","_id":"cj764c8me000uw0d0iuvj5bu7"},{"post_id":"cj764c8lp0006w0d0qf2wxqs9","category_id":"cj764c8lw000cw0d0t68dsy6r","_id":"cj764c8mi000ww0d05xiqy40c"},{"post_id":"cj764c8ma000nw0d0m3egxska","category_id":"cj764c8ld0002w0d0gqi0vbwf","_id":"cj764c8mj000yw0d09zrv0shk"},{"post_id":"cj764c8md000sw0d0059c1f27","category_id":"cj764c8ld0002w0d0gqi0vbwf","_id":"cj764c8mj000zw0d0avzuzsc5"},{"post_id":"cj764c8lz000gw0d0yigy0yzc","category_id":"cj764c8ld0002w0d0gqi0vbwf","_id":"cj764c8mk0011w0d0ufqgz410"},{"post_id":"cj764c8lz000gw0d0yigy0yzc","category_id":"cj764c8mb000ow0d0iilmkqwl","_id":"cj764c8ml0013w0d0gl7oc44j"},{"post_id":"cj764c8m4000kw0d0krao3e29","category_id":"cj764c8mi000vw0d00rzutsxq","_id":"cj764c8mm0016w0d0wkvrxk4y"},{"post_id":"cj85iyc8400000wd0p13cex8v","category_id":"cj764c8ld0002w0d0gqi0vbwf","_id":"cj85iyc8n00020wd0s28d03r8"},{"post_id":"cj764c8l80001w0d0cutjxg59","category_id":"cj764c8ld0002w0d0gqi0vbwf","_id":"cj85iycas00050wd09p3r1rk0"}],"PostTag":[{"post_id":"cj764c8l20000w0d0a2pbqlqz","tag_id":"cj764c8lg0003w0d0pyjiindp","_id":"cj764c8m7000lw0d09wnru6sj"},{"post_id":"cj764c8l20000w0d0a2pbqlqz","tag_id":"cj764c8lq0008w0d0encn7s59","_id":"cj764c8mc000pw0d08iz0861m"},{"post_id":"cj764c8l20000w0d0a2pbqlqz","tag_id":"cj764c8lx000dw0d04g1arbkv","_id":"cj764c8me000tw0d0cdigmoku"},{"post_id":"cj764c8l80001w0d0cutjxg59","tag_id":"cj764c8m2000iw0d0crzk44e3","_id":"cj764c8ml0012w0d0c14ikb9d"},{"post_id":"cj764c8l80001w0d0cutjxg59","tag_id":"cj764c8mc000rw0d0qxa9cx5e","_id":"cj764c8ml0014w0d02bgpdmi8"},{"post_id":"cj764c8l80001w0d0cutjxg59","tag_id":"cj764c8mi000xw0d0uw3mvf20","_id":"cj764c8mm0017w0d0vqlouomp"},{"post_id":"cj764c8lh0004w0d0xkoq2vir","tag_id":"cj764c8lg0003w0d0pyjiindp","_id":"cj764c8mn001aw0d0mo3towdu"},{"post_id":"cj764c8lh0004w0d0xkoq2vir","tag_id":"cj764c8m2000iw0d0crzk44e3","_id":"cj764c8mn001bw0d05qpaao21"},{"post_id":"cj764c8lh0004w0d0xkoq2vir","tag_id":"cj764c8mm0018w0d0pe19x4b1","_id":"cj764c8mo001dw0d0namb5h34"},{"post_id":"cj764c8lk0005w0d0t39ln4xm","tag_id":"cj764c8mn0019w0d0q3wk6k6y","_id":"cj764c8mq001fw0d03gzq5t1o"},{"post_id":"cj764c8lk0005w0d0t39ln4xm","tag_id":"cj764c8mn001cw0d06qxj35in","_id":"cj764c8mq001gw0d0qqcoj8r1"},{"post_id":"cj764c8lp0006w0d0qf2wxqs9","tag_id":"cj764c8mq001ew0d0o9dwba98","_id":"cj764c8ms001jw0d0ya7i6zta"},{"post_id":"cj764c8lp0006w0d0qf2wxqs9","tag_id":"cj764c8mr001hw0d0abkxa285","_id":"cj764c8mt001kw0d0ft3xsfkh"},{"post_id":"cj764c8lt0009w0d04uf7vx3q","tag_id":"cj764c8lg0003w0d0pyjiindp","_id":"cj764c8mu001nw0d0cqt45j2x"},{"post_id":"cj764c8lt0009w0d04uf7vx3q","tag_id":"cj764c8m2000iw0d0crzk44e3","_id":"cj764c8mv001ow0d0xmzg36m1"},{"post_id":"cj764c8lt0009w0d04uf7vx3q","tag_id":"cj764c8mt001lw0d0c1wswmtx","_id":"cj764c8mw001qw0d0bm9tr6i6"},{"post_id":"cj764c8lv000bw0d0adq0s9qx","tag_id":"cj764c8lg0003w0d0pyjiindp","_id":"cj764c8mx001sw0d0g2i4xa2p"},{"post_id":"cj764c8lv000bw0d0adq0s9qx","tag_id":"cj764c8mu001mw0d0jpc6ljm9","_id":"cj764c8mx001tw0d09ee6m82p"},{"post_id":"cj764c8lv000bw0d0adq0s9qx","tag_id":"cj764c8mw001pw0d0ydpainco","_id":"cj764c8mz001vw0d0guhrk4np"},{"post_id":"cj764c8lx000ew0d0h48i9cog","tag_id":"cj764c8lg0003w0d0pyjiindp","_id":"cj764c8n1001xw0d0f8zryiqo"},{"post_id":"cj764c8lx000ew0d0h48i9cog","tag_id":"cj764c8mw001rw0d0f6x5xxvg","_id":"cj764c8n1001yw0d0vubza3z7"},{"post_id":"cj764c8lx000ew0d0h48i9cog","tag_id":"cj764c8mz001uw0d0qpzb9q4e","_id":"cj764c8n20020w0d04nduumkp"},{"post_id":"cj764c8lz000gw0d0yigy0yzc","tag_id":"cj764c8mz001ww0d094m8v6zy","_id":"cj764c8n40022w0d0yy4avtk3"},{"post_id":"cj764c8lz000gw0d0yigy0yzc","tag_id":"cj764c8mr001hw0d0abkxa285","_id":"cj764c8n40023w0d0ds79ql54"},{"post_id":"cj764c8m4000kw0d0krao3e29","tag_id":"cj764c8mn0019w0d0q3wk6k6y","_id":"cj764c8n70027w0d0wc90fc9m"},{"post_id":"cj764c8m4000kw0d0krao3e29","tag_id":"cj764c8mz001ww0d094m8v6zy","_id":"cj764c8n80028w0d08u73jt7y"},{"post_id":"cj764c8m4000kw0d0krao3e29","tag_id":"cj764c8mr001hw0d0abkxa285","_id":"cj764c8n8002aw0d0895fte0u"},{"post_id":"cj764c8ma000nw0d0m3egxska","tag_id":"cj764c8lg0003w0d0pyjiindp","_id":"cj764c8n9002cw0d0lw4kan1c"},{"post_id":"cj764c8ma000nw0d0m3egxska","tag_id":"cj764c8n50026w0d096nsjdmx","_id":"cj764c8n9002dw0d0zifikvzc"},{"post_id":"cj764c8ma000nw0d0m3egxska","tag_id":"cj764c8n80029w0d063oe58ui","_id":"cj764c8na002fw0d0ajpiz8wj"},{"post_id":"cj764c8md000sw0d0059c1f27","tag_id":"cj764c8lg0003w0d0pyjiindp","_id":"cj764c8nb002gw0d0aeuf3g8k"},{"post_id":"cj764c8md000sw0d0059c1f27","tag_id":"cj764c8n8002bw0d0693o467v","_id":"cj764c8nb002hw0d0skd44uef"},{"post_id":"cj764c8md000sw0d0059c1f27","tag_id":"cj764c8mz001uw0d0qpzb9q4e","_id":"cj764c8nb002iw0d0qdxuv821"},{"post_id":"cj85iyc8400000wd0p13cex8v","tag_id":"cj764c8m2000iw0d0crzk44e3","_id":"cj85iyc8p00030wd035vq2ums"},{"post_id":"cj85iyc8400000wd0p13cex8v","tag_id":"cj85iyc8g00010wd0kofp1lks","_id":"cj85iyc8q00040wd0134pojgl"}],"Tag":[{"name":"前端","_id":"cj764c8lg0003w0d0pyjiindp"},{"name":"eclipse","_id":"cj764c8lq0008w0d0encn7s59"},{"name":"跨域","_id":"cj764c8lx000dw0d04g1arbkv"},{"name":"js","_id":"cj764c8m2000iw0d0crzk44e3"},{"name":"vue","_id":"cj764c8mc000rw0d0qxa9cx5e"},{"name":"vue-resource","_id":"cj764c8mi000xw0d0uw3mvf20"},{"name":"构造函数","_id":"cj764c8mm0018w0d0pe19x4b1"},{"name":"生活","_id":"cj764c8mn0019w0d0q3wk6k6y"},{"name":"日常","_id":"cj764c8mn001cw0d06qxj35in"},{"name":"小心情","_id":"cj764c8mq001ew0d0o9dwba98"},{"name":"啦啦啦","_id":"cj764c8mr001hw0d0abkxa285"},{"name":"兼容","_id":"cj764c8mt001lw0d0c1wswmtx"},{"name":"文件上传","_id":"cj764c8mu001mw0d0jpc6ljm9"},{"name":"ajax","_id":"cj764c8mw001pw0d0ydpainco"},{"name":"mongoDB","_id":"cj764c8mw001rw0d0f6x5xxvg"},{"name":"node.js","_id":"cj764c8mz001uw0d0qpzb9q4e"},{"name":"开篇之作","_id":"cj764c8mz001ww0d094m8v6zy"},{"name":"移动端","_id":"cj764c8n50026w0d096nsjdmx"},{"name":"css","_id":"cj764c8n80029w0d063oe58ui"},{"name":"聊天室","_id":"cj764c8n8002bw0d0693o467v"},{"name":"业务","_id":"cj85iyc8g00010wd0kofp1lks"}]}}